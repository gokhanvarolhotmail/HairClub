{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "hc-eim-df-prod2"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/DimSource')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Lead",
                                "type": "DatasetReference"
                            },
                            "name": "ODSLead"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSource",
                                "type": "DatasetReference"
                            },
                            "name": "DimSource"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Account",
                                "type": "DatasetReference"
                            },
                            "name": "ODSAccount"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSource",
                                "type": "DatasetReference"
                            },
                            "name": "InsertDimSource"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "SelectHash"
                        },
                        {
                            "name": "SelectLeadSource"
                        },
                        {
                            "name": "FilterLastModifiedLead"
                        },
                        {
                            "name": "DistinctLeadSource"
                        },
                        {
                            "name": "AddCustomColumnsLead"
                        },
                        {
                            "name": "AddHash"
                        },
                        {
                            "name": "DoesNotExist"
                        },
                        {
                            "name": "FilterLastModifiedAccount"
                        },
                        {
                            "name": "SelectAccountSource"
                        },
                        {
                            "name": "DistinctAccountSource"
                        },
                        {
                            "name": "UnionAccount"
                        },
                        {
                            "name": "DistinctHash"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tMasterRecordId as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tSalutation as string,\n\t\tMiddleName as string,\n\t\tSuffix as string,\n\t\tName as string,\n\t\tRecordTypeId as string,\n\t\tTitle as string,\n\t\tCompany as string,\n\t\tStreet as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tPostalCode as string,\n\t\tCountry as string,\n\t\tStateCode as string,\n\t\tCountryCode as string,\n\t\tLatitude as decimal(38,18),\n\t\tLongitude as decimal(38,18),\n\t\tGeocodeAccuracy as string,\n\t\tPhone as string,\n\t\tMobilePhone as string,\n\t\tFax as string,\n\t\tEmail as string,\n\t\tWebsite as string,\n\t\tPhotoUrl as string,\n\t\tDescription as string,\n\t\tLeadSource as string,\n\t\tStatus as string,\n\t\tIndustry as string,\n\t\tRating as string,\n\t\tCurrencyIsoCode as string,\n\t\tAnnualRevenue as decimal(38,18),\n\t\tNumberOfEmployees as integer,\n\t\tOwnerId as string,\n\t\tHasOptedOutOfEmail as boolean,\n\t\tIsConverted as boolean,\n\t\tConvertedDate as timestamp,\n\t\tConvertedAccountId as string,\n\t\tConvertedContactId as string,\n\t\tConvertedOpportunityId as string,\n\t\tIsUnreadByOwner as boolean,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastActivityDate as timestamp,\n\t\tDoNotCall as boolean,\n\t\tHasOptedOutOfFax as boolean,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tLastTransferDate as timestamp,\n\t\tJigsaw as string,\n\t\tJigsawContactId as string,\n\t\tEmailBouncedReason as string,\n\t\tEmailBouncedDate as timestamp,\n\t\tet4ae5__HasOptedOutOfMobile__c as boolean,\n\t\tet4ae5__Mobile_Country_Code__c as string,\n\t\tDisc__c as string,\n\t\tDoNotContact__c as boolean,\n\t\tDoNotEmail__c as boolean,\n\t\tDoNotMail__c as boolean,\n\t\tDoNotText__c as boolean,\n\t\tEthnicity__c as string,\n\t\tExternal_Id__c as string,\n\t\tGender__c as string,\n\t\tHairLossExperience__c as string,\n\t\tHairLossFamily__c as string,\n\t\tHairLossOrVolume__c as string,\n\t\tHairLossProductOther__c as string,\n\t\tHairLossProductUsed__c as string,\n\t\tHairLossSpot__c as string,\n\t\tHardCopyPreferred__c as boolean,\n\t\tLanguage__c as string,\n\t\tLudwigScale__c as string,\n\t\tMaritalStatus__c as string,\n\t\tNorwoodScale__c as string,\n\t\tReferral_Code_Expiration_Date__c as timestamp,\n\t\tReferral_Code__c as string,\n\t\tService_Territory__c as string,\n\t\tSolutionOffered__c as string,\n\t\tText_Reminer_Opt_In__c as boolean,\n\t\tAge__c as decimal(38,18),\n\t\tBirthdate__c as timestamp,\n\t\tLead_Qualifier__c as string,\n\t\tLead_Rescheduler__c as string,\n\t\tPromo_Code__c as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSLead\nsource(output(\n\t\tSourceKey as integer,\n\t\tSourceName as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSource\nsource(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tMasterRecordId as string,\n\t\tName as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tSalutation as string,\n\t\tMiddleName as string,\n\t\tSuffix as string,\n\t\tType as string,\n\t\tRecordTypeId as string,\n\t\tParentId as string,\n\t\tBillingStreet as string,\n\t\tBillingCity as string,\n\t\tBillingState as string,\n\t\tBillingPostalCode as string,\n\t\tBillingCountry as string,\n\t\tBillingStateCode as string,\n\t\tBillingCountryCode as string,\n\t\tBillingLatitude as decimal(38,18),\n\t\tBillingLongitude as decimal(38,18),\n\t\tBillingGeocodeAccuracy as string,\n\t\tShippingStreet as string,\n\t\tShippingCity as string,\n\t\tShippingState as string,\n\t\tShippingPostalCode as string,\n\t\tShippingCountry as string,\n\t\tShippingStateCode as string,\n\t\tShippingCountryCode as string,\n\t\tShippingLatitude as decimal(38,18),\n\t\tShippingLongitude as decimal(38,18),\n\t\tShippingGeocodeAccuracy as string,\n\t\tPhone as string,\n\t\tWebsite as string,\n\t\tPhotoUrl as string,\n\t\tIndustry as string,\n\t\tNumberOfEmployees as integer,\n\t\tDescription as string,\n\t\tCurrencyIsoCode as string,\n\t\tOwnerId as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastActivityDate as timestamp,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tPersonContactId as string,\n\t\tIsPersonAccount as boolean,\n\t\tPersonMailingStreet as string,\n\t\tPersonMailingCity as string,\n\t\tPersonMailingState as string,\n\t\tPersonMailingPostalCode as string,\n\t\tPersonMailingCountry as string,\n\t\tPersonMailingStateCode as string,\n\t\tPersonMailingCountryCode as string,\n\t\tPersonMailingLatitude as decimal(38,18),\n\t\tPersonMailingLongitude as decimal(38,18),\n\t\tPersonMailingGeocodeAccuracy as string,\n\t\tPersonMobilePhone as string,\n\t\tPersonEmail as string,\n\t\tPersonTitle as string,\n\t\tPersonDepartment as string,\n\t\tPersonLastCURequestDate as timestamp,\n\t\tPersonLastCUUpdateDate as timestamp,\n\t\tPersonEmailBouncedReason as string,\n\t\tPersonEmailBouncedDate as timestamp,\n\t\tJigsaw as string,\n\t\tJigsawCompanyId as string,\n\t\tAccountSource as string,\n\t\tSicDesc as string,\n\t\tOperatingHoursId as string,\n\t\tActive__c as boolean,\n\t\tCompany__c as string,\n\t\tConectCreationDate__c as timestamp,\n\t\tConectLastUpdate__c as timestamp,\n\t\tExternal_Id__c as string,\n\t\tCount_Close_Won_Opportunities__c as decimal(38,18),\n\t\tCustomer_Status__c as string,\n\t\tDisc__pc as string,\n\t\tDoNotContact__pc as boolean,\n\t\tDoNotEmail__pc as boolean,\n\t\tDoNotMail__pc as boolean,\n\t\tDoNotText__pc as boolean,\n\t\tEthnicity__pc as string,\n\t\tGender__pc as string,\n\t\tHairLossExperience__pc as string,\n\t\tHairLossFamily__pc as string,\n\t\tHairLossOrVolume__pc as string,\n\t\tHairLossProductOther__pc as string,\n\t\tHairLossProductUsed__pc as string,\n\t\tHairLossSpot__pc as string,\n\t\tHardCopyPreferred__pc as boolean,\n\t\tLanguage__pc as string,\n\t\tMaritalStatus__pc as string,\n\t\tText_Reminder_Opt_In__pc as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSAccount\nDimSource select(mapColumn(\n\t\tHash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectHash\nFilterLastModifiedLead select(mapColumn(\n\t\tSourceName = LeadSource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLeadSource\nODSLead filter(toDate(LastModifiedDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastModifiedDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(LeadSource)) ~> FilterLastModifiedLead\nSelectLeadSource aggregate(groupBy(SourceName),\n\teach(match(name!='SourceName'), $$ = first($$))) ~> DistinctLeadSource\nUnionAccount derive(SourceSystem = 'Salesforce',\n\t\tSourceName = initCap(trim(SourceName)),\n\t\tIsActive = toBoolean('1'),\n\t\tDWH_LastUpdateDate = currentTimestamp(),\n\t\tDWH_CreatedDate = currentTimestamp()) ~> AddCustomColumnsLead\nAddCustomColumnsLead derive(Hash = sha2(256, concat(lower(SourceName), SourceSystem))) ~> AddHash\nDistinctHash, SelectHash exists(DistinctHash@Hash == SelectHash@Hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> DoesNotExist\nODSAccount filter(toDate(LastModifiedDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastModifiedDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(AccountSource)) ~> FilterLastModifiedAccount\nFilterLastModifiedAccount select(mapColumn(\n\t\tSourceName = AccountSource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAccountSource\nSelectAccountSource aggregate(groupBy(SourceName),\n\teach(match(name!='SourceName'), $$ = first($$))) ~> DistinctAccountSource\nDistinctLeadSource, DistinctAccountSource union(byName: true)~> UnionAccount\nAddHash aggregate(groupBy(Hash),\n\teach(match(name!='Hash'), $$ = first($$))) ~> DistinctHash\nDoesNotExist sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSourceKey as integer,\n\t\tSourceName as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSourceName,\n\t\tHash,\n\t\tDWH_CreatedDate,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive,\n\t\tSourceSystem\n\t)) ~> InsertDimSource"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimFormat')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/Marketing"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ASA_ODS_MA_Television",
                                "type": "DatasetReference"
                            },
                            "name": "ODSTelevision"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Campaign",
                                "type": "DatasetReference"
                            },
                            "name": "ODSCampaign"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimFormat",
                                "type": "DatasetReference"
                            },
                            "name": "SourceDimFormat"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimFormat",
                                "type": "DatasetReference"
                            },
                            "name": "UpdateFormat"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimFormat",
                                "type": "DatasetReference"
                            },
                            "name": "InsertFormat"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterLastUpload"
                        },
                        {
                            "name": "FilterLastModified"
                        },
                        {
                            "name": "SelectFormat"
                        },
                        {
                            "name": "SelectFormatColumn"
                        },
                        {
                            "name": "DistinctFormatTelevision"
                        },
                        {
                            "name": "DistinctFormatCampaign"
                        },
                        {
                            "name": "Union"
                        },
                        {
                            "name": "CustomColumns"
                        },
                        {
                            "name": "DerivedColumnCampaign"
                        },
                        {
                            "name": "Exists"
                        },
                        {
                            "name": "DoesNotExist"
                        },
                        {
                            "name": "SelectFormatColumns"
                        },
                        {
                            "name": "AddColumnsDates"
                        },
                        {
                            "name": "AllowUpdate"
                        },
                        {
                            "name": "AddUpdateColumn"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\ttransactionid as string,\n\t\tcalendardateest as string,\n\t\tcalendartimeest as string,\n\t\tbroadcastdateest as string,\n\t\tlocalairtime as string,\n\t\tpurpose as string,\n\t\tmethod as string,\n\t\tchannel as string,\n\t\tmedium as string,\n\t\tcompany as string,\n\t\tlocation as string,\n\t\tbudgettype as string,\n\t\tbudgetname as string,\n\t\tsource as string,\n\t\taffiliate as string,\n\t\tstation as string,\n\t\tshow as string,\n\t\tcontenttype as string,\n\t\tcontent as string,\n\t\tcampaigntype as string,\n\t\tcampaign as string,\n\t\tisci as string,\n\t\tmasternumber as string,\n\t\ttfn as string,\n\t\tsourcecode as string,\n\t\tpromocode as string,\n\t\turl as string,\n\t\tagency as string,\n\t\tregion as string,\n\t\tdmacode as string,\n\t\tdmaname as string,\n\t\taudiene as string,\n\t\ttactic as string,\n\t\tplacement as string,\n\t\tformat as string,\n\t\tlanguage as string,\n\t\tgrossspend as string,\n\t\tnetspend as string,\n\t\t{impressions18-65} as string,\n\t\tgrp as string,\n\t\tspots as string,\n\t\tlogtype as string,\n\t\t{impressions35+} as string,\n\t\ttrp as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tFilePath as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSTelevision\nsource(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tName as string,\n\t\tParentId as string,\n\t\tType as string,\n\t\tRecordTypeId as string,\n\t\tStatus as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tCurrencyIsoCode as string,\n\t\tExpectedRevenue as decimal(38,18),\n\t\tBudgetedCost as decimal(38,18),\n\t\tActualCost as decimal(38,18),\n\t\tExpectedResponse as decimal(38,18),\n\t\tNumberSent as decimal(38,18),\n\t\tIsActive as boolean,\n\t\tDescription as string,\n\t\tNumberOfLeads as integer,\n\t\tNumberOfConvertedLeads as integer,\n\t\tNumberOfContacts as integer,\n\t\tNumberOfResponses as integer,\n\t\tNumberOfOpportunities as integer,\n\t\tNumberOfWonOpportunities as integer,\n\t\tAmountAllOpportunities as decimal(38,18),\n\t\tAmountWonOpportunities as decimal(38,18),\n\t\tOwnerId as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastActivityDate as timestamp,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tCampaignMemberRecordTypeId as string,\n\t\tChannel__c as string,\n\t\tCompany__c as string,\n\t\tExternal_Id__c as string,\n\t\tLanguage__c as string,\n\t\tSourceCode_L__c as string,\n\t\tPromo_Code__c as string,\n\t\tTollFreeNumber__c as string,\n\t\tLocation__c as string,\n\t\tMedia__c as string,\n\t\tFormat__c as string,\n\t\tAudience__c as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSCampaign\nsource(output(\n\t\tFormatKey as integer,\n\t\tFormatName as string,\n\t\tFormatValue as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> SourceDimFormat\nODSTelevision filter(toDate(DWH_LoadDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(DWH_LoadDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(format)) ~> FilterLastUpload\nODSCampaign filter(toDate(LastModifiedDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastModifiedDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(Format__c)) ~> FilterLastModified\nFilterLastModified select(mapColumn(\n\t\tFormat__c\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectFormat\nFilterLastUpload select(mapColumn(\n\t\tformat\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectFormatColumn\nSelectFormatColumn aggregate(groupBy(format),\n\teach(match(name!='format'), $$ = first($$))) ~> DistinctFormatTelevision\nSelectFormat aggregate(groupBy(Format__c),\n\teach(match(name!='Format__c'), $$ = first($$))) ~> DistinctFormatCampaign\nCustomColumns, DerivedColumnCampaign union(byName: true)~> Union\nDistinctFormatTelevision derive(IsActive = toBoolean('1'),\n\t\tSource = 'Marketing',\n\t\tFormatName = initCap(trim(format))) ~> CustomColumns\nDistinctFormatCampaign derive(IsActive = toBoolean('1'),\n\t\tSource = 'Salesforce',\n\t\tFormatName = initCap(trim(Format__c))) ~> DerivedColumnCampaign\nUnion, SelectFormatColumns exists(Union@FormatName == SelectFormatColumns@FormatName\n\t&& Union@Source == SelectFormatColumns@Source,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nUnion, SelectFormatColumns exists(Union@FormatName == SelectFormatColumns@FormatName\n\t&& Union@Source == SelectFormatColumns@Source,\n\tnegate:true,\n\tbroadcast: 'auto')~> DoesNotExist\nSourceDimFormat select(mapColumn(\n\t\tFormatKey,\n\t\tFormatName,\n\t\tFormatValue,\n\t\tDWH_CreatedDate,\n\t\tDWH_LastUpdate,\n\t\tIsActive,\n\t\tSource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFormatColumns\nDoesNotExist derive(DWH_CreatedDate = currentTimestamp(),\n\t\tDWH_LastUpdate = currentTimestamp()) ~> AddColumnsDates\nExists alterRow(updateIf(true())) ~> AllowUpdate\nAllowUpdate derive(DWH_LastUpdate = currentTimestamp()) ~> AddUpdateColumn\nAddUpdateColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tFormatKey as integer,\n\t\tFormatName as string,\n\t\tFormatValue as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['FormatName'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFormatName,\n\t\tDWH_LastUpdate,\n\t\tIsActive,\n\t\tSource\n\t)) ~> UpdateFormat\nAddColumnsDates sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tFormatKey as integer,\n\t\tFormatName as string,\n\t\tFormatValue as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFormatName,\n\t\tDWH_CreatedDate,\n\t\tDWH_LastUpdate,\n\t\tIsActive,\n\t\tSource\n\t)) ~> InsertFormat"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimStatus')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Campaign",
                                "type": "DatasetReference"
                            },
                            "name": "ODSCampaign"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Lead",
                                "type": "DatasetReference"
                            },
                            "name": "ODSLead"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Account",
                                "type": "DatasetReference"
                            },
                            "name": "ODSAccount"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_ServiceAppointment",
                                "type": "DatasetReference"
                            },
                            "name": "ODSServiceAppointment"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimStatus",
                                "type": "DatasetReference"
                            },
                            "name": "UpdateStatus"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterLeadLastModified"
                        },
                        {
                            "name": "DistinctStatus"
                        },
                        {
                            "name": "SelectStatus"
                        },
                        {
                            "name": "AddStaticColumnsLead"
                        },
                        {
                            "name": "FilterCapaignLastModified"
                        },
                        {
                            "name": "DistinctCampaignStatus"
                        },
                        {
                            "name": "SelectStatusCampaign"
                        },
                        {
                            "name": "AddStaticColumns"
                        },
                        {
                            "name": "UnionLead"
                        },
                        {
                            "name": "AllowUpsert"
                        },
                        {
                            "name": "FilterLastModifiedStatus"
                        },
                        {
                            "name": "SelectAccountStatus"
                        },
                        {
                            "name": "DistinctAccountSource"
                        },
                        {
                            "name": "AddStaticColumnsAccount"
                        },
                        {
                            "name": "UnionAccount"
                        },
                        {
                            "name": "AddDateColumnsAndHash"
                        },
                        {
                            "name": "FilterAppointmentLastModified"
                        },
                        {
                            "name": "SelectAppointmentStatus"
                        },
                        {
                            "name": "DistinctAppointmentStatus"
                        },
                        {
                            "name": "AddStaticColumnsAppointment"
                        },
                        {
                            "name": "UnionServiceAppointment"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tId as string,\n\t\tRecordTypeId as string,\n\t\tWhoId as string,\n\t\tWhatId as string,\n\t\tWhoCount as integer,\n\t\tWhatCount as integer,\n\t\tActivityDate as timestamp,\n\t\tStatus as string,\n\t\tPriority as string,\n\t\tIsHighPriority as boolean,\n\t\tOwnerId as string,\n\t\tCurrencyIsoCode as string,\n\t\tType as string,\n\t\tIsDeleted as boolean,\n\t\tAccountId as string,\n\t\tIsClosed as boolean,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tIsArchived as boolean,\n\t\tCallDurationInSeconds as integer,\n\t\tCallType as string,\n\t\tCallDisposition as string,\n\t\tCallObject as string,\n\t\tReminderDateTime as timestamp,\n\t\tIsReminderSet as boolean,\n\t\tRecurrenceActivityId as string,\n\t\tIsRecurrence as boolean,\n\t\tRecurrenceStartDateOnly as timestamp,\n\t\tRecurrenceEndDateOnly as timestamp,\n\t\tRecurrenceTimeZoneSidKey as string,\n\t\tRecurrenceType as string,\n\t\tRecurrenceInterval as integer,\n\t\tRecurrenceDayOfWeekMask as integer,\n\t\tRecurrenceDayOfMonth as integer,\n\t\tRecurrenceInstance as string,\n\t\tRecurrenceMonthOfYear as string,\n\t\tRecurrenceRegeneratedType as string,\n\t\tTaskSubtype as string,\n\t\tCompletedDateTime as timestamp,\n\t\tCenter_Name__c as string,\n\t\tCompleted_Date__c as timestamp,\n\t\tExternal_ID__c as string,\n\t\tLead__c as string,\n\t\tPerson_Account__c as string,\n\t\tRecording_Link__c as string,\n\t\tResult__c as string,\n\t\tSPRecordingOrTranscriptURL__c as string,\n\t\tService_Appointment__c as string,\n\t\tService_Territory_Caller_Id__c as string,\n\t\tTaskWhoIds as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSCampaign\nsource(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tMasterRecordId as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tSalutation as string,\n\t\tMiddleName as string,\n\t\tSuffix as string,\n\t\tName as string,\n\t\tRecordTypeId as string,\n\t\tTitle as string,\n\t\tCompany as string,\n\t\tStreet as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tPostalCode as string,\n\t\tCountry as string,\n\t\tStateCode as string,\n\t\tCountryCode as string,\n\t\tLatitude as decimal(38,18),\n\t\tLongitude as decimal(38,18),\n\t\tGeocodeAccuracy as string,\n\t\tPhone as string,\n\t\tMobilePhone as string,\n\t\tFax as string,\n\t\tEmail as string,\n\t\tWebsite as string,\n\t\tPhotoUrl as string,\n\t\tDescription as string,\n\t\tLeadSource as string,\n\t\tStatus as string,\n\t\tIndustry as string,\n\t\tRating as string,\n\t\tCurrencyIsoCode as string,\n\t\tAnnualRevenue as decimal(38,18),\n\t\tNumberOfEmployees as integer,\n\t\tOwnerId as string,\n\t\tHasOptedOutOfEmail as boolean,\n\t\tIsConverted as boolean,\n\t\tConvertedDate as timestamp,\n\t\tConvertedAccountId as string,\n\t\tConvertedContactId as string,\n\t\tConvertedOpportunityId as string,\n\t\tIsUnreadByOwner as boolean,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastActivityDate as timestamp,\n\t\tDoNotCall as boolean,\n\t\tHasOptedOutOfFax as boolean,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tLastTransferDate as timestamp,\n\t\tJigsaw as string,\n\t\tJigsawContactId as string,\n\t\tEmailBouncedReason as string,\n\t\tEmailBouncedDate as timestamp,\n\t\tet4ae5__HasOptedOutOfMobile__c as boolean,\n\t\tet4ae5__Mobile_Country_Code__c as string,\n\t\tDisc__c as string,\n\t\tDoNotContact__c as boolean,\n\t\tDoNotEmail__c as boolean,\n\t\tDoNotMail__c as boolean,\n\t\tDoNotText__c as boolean,\n\t\tEthnicity__c as string,\n\t\tExternal_Id__c as string,\n\t\tGender__c as string,\n\t\tHairLossExperience__c as string,\n\t\tHairLossFamily__c as string,\n\t\tHairLossOrVolume__c as string,\n\t\tHairLossProductOther__c as string,\n\t\tHairLossProductUsed__c as string,\n\t\tHairLossSpot__c as string,\n\t\tHardCopyPreferred__c as boolean,\n\t\tLanguage__c as string,\n\t\tLudwigScale__c as string,\n\t\tMaritalStatus__c as string,\n\t\tNorwoodScale__c as string,\n\t\tReferral_Code_Expiration_Date__c as timestamp,\n\t\tReferral_Code__c as string,\n\t\tService_Territory__c as string,\n\t\tSolutionOffered__c as string,\n\t\tText_Reminer_Opt_In__c as boolean,\n\t\tAge__c as decimal(38,18),\n\t\tBirthdate__c as timestamp,\n\t\tLead_Qualifier__c as string,\n\t\tLead_Rescheduler__c as string,\n\t\tPromo_Code__c as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSLead\nsource(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tMasterRecordId as string,\n\t\tName as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tSalutation as string,\n\t\tMiddleName as string,\n\t\tSuffix as string,\n\t\tType as string,\n\t\tRecordTypeId as string,\n\t\tParentId as string,\n\t\tBillingStreet as string,\n\t\tBillingCity as string,\n\t\tBillingState as string,\n\t\tBillingPostalCode as string,\n\t\tBillingCountry as string,\n\t\tBillingStateCode as string,\n\t\tBillingCountryCode as string,\n\t\tBillingLatitude as decimal(38,18),\n\t\tBillingLongitude as decimal(38,18),\n\t\tBillingGeocodeAccuracy as string,\n\t\tShippingStreet as string,\n\t\tShippingCity as string,\n\t\tShippingState as string,\n\t\tShippingPostalCode as string,\n\t\tShippingCountry as string,\n\t\tShippingStateCode as string,\n\t\tShippingCountryCode as string,\n\t\tShippingLatitude as decimal(38,18),\n\t\tShippingLongitude as decimal(38,18),\n\t\tShippingGeocodeAccuracy as string,\n\t\tPhone as string,\n\t\tWebsite as string,\n\t\tPhotoUrl as string,\n\t\tIndustry as string,\n\t\tNumberOfEmployees as integer,\n\t\tDescription as string,\n\t\tCurrencyIsoCode as string,\n\t\tOwnerId as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastActivityDate as timestamp,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tPersonContactId as string,\n\t\tIsPersonAccount as boolean,\n\t\tPersonMailingStreet as string,\n\t\tPersonMailingCity as string,\n\t\tPersonMailingState as string,\n\t\tPersonMailingPostalCode as string,\n\t\tPersonMailingCountry as string,\n\t\tPersonMailingStateCode as string,\n\t\tPersonMailingCountryCode as string,\n\t\tPersonMailingLatitude as decimal(38,18),\n\t\tPersonMailingLongitude as decimal(38,18),\n\t\tPersonMailingGeocodeAccuracy as string,\n\t\tPersonMobilePhone as string,\n\t\tPersonEmail as string,\n\t\tPersonTitle as string,\n\t\tPersonDepartment as string,\n\t\tPersonLastCURequestDate as timestamp,\n\t\tPersonLastCUUpdateDate as timestamp,\n\t\tPersonEmailBouncedReason as string,\n\t\tPersonEmailBouncedDate as timestamp,\n\t\tJigsaw as string,\n\t\tJigsawCompanyId as string,\n\t\tAccountSource as string,\n\t\tSicDesc as string,\n\t\tOperatingHoursId as string,\n\t\tActive__c as boolean,\n\t\tCompany__c as string,\n\t\tConectCreationDate__c as timestamp,\n\t\tConectLastUpdate__c as timestamp,\n\t\tExternal_Id__c as string,\n\t\tCount_Close_Won_Opportunities__c as decimal(38,18),\n\t\tCustomer_Status__c as string,\n\t\tDisc__pc as string,\n\t\tDoNotContact__pc as boolean,\n\t\tDoNotEmail__pc as boolean,\n\t\tDoNotMail__pc as boolean,\n\t\tDoNotText__pc as boolean,\n\t\tEthnicity__pc as string,\n\t\tGender__pc as string,\n\t\tHairLossExperience__pc as string,\n\t\tHairLossFamily__pc as string,\n\t\tHairLossOrVolume__pc as string,\n\t\tHairLossProductOther__pc as string,\n\t\tHairLossProductUsed__pc as string,\n\t\tHairLossSpot__pc as string,\n\t\tHardCopyPreferred__pc as boolean,\n\t\tLanguage__pc as string,\n\t\tMaritalStatus__pc as string,\n\t\tText_Reminder_Opt_In__pc as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSAccount\nsource(output(\n\t\tId as string,\n\t\tOwnerId as string,\n\t\tIsDeleted as boolean,\n\t\tAppointmentNumber as string,\n\t\tCurrencyIsoCode as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tParentRecordId as string,\n\t\tParentRecordType as string,\n\t\tAccountId as string,\n\t\tWorkTypeId as string,\n\t\tContactId as string,\n\t\tStreet as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tPostalCode as string,\n\t\tCountry as string,\n\t\tStateCode as string,\n\t\tCountryCode as string,\n\t\tLatitude as decimal(38,18),\n\t\tLongitude as decimal(38,18),\n\t\tGeocodeAccuracy as string,\n\t\tDescription as string,\n\t\tEarliestStartTime as timestamp,\n\t\tDueDate as timestamp,\n\t\tDuration as decimal(38,18),\n\t\tArrivalWindowStartTime as timestamp,\n\t\tArrivalWindowEndTime as timestamp,\n\t\tStatus as string,\n\t\tSchedStartTime as timestamp,\n\t\tSchedEndTime as timestamp,\n\t\tActualStartTime as timestamp,\n\t\tActualEndTime as timestamp,\n\t\tActualDuration as decimal(38,18),\n\t\tDurationType as string,\n\t\tDurationInMinutes as decimal(38,18),\n\t\tServiceTerritoryId as string,\n\t\tSubject as string,\n\t\tParentRecordStatusCategory as string,\n\t\tStatusCategory as string,\n\t\tServiceNote as string,\n\t\tAppointmentType as string,\n\t\tEmail as string,\n\t\tPhone as string,\n\t\tCancellationReason as string,\n\t\tAdditionalInformation as string,\n\t\tComments as string,\n\t\tCenter_Type__c as string,\n\t\tExternal_Id__c as string,\n\t\tService_Appointment__c as string,\n\t\tWork_Type_Group__c as string,\n\t\tAppointment_Type__c as string,\n\t\tMeeting_Platform_Id__c as string,\n\t\tMeeting_Platform__c as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSServiceAppointment\nODSLead filter(toDate(LastModifiedDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastModifiedDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(Status)) ~> FilterLeadLastModified\nFilterLeadLastModified aggregate(groupBy(Status),\n\teach(match(name!='Status'), $$ = first($$))) ~> DistinctStatus\nDistinctStatus select(mapColumn(\n\t\tStatusName = Status\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectStatus\nSelectStatus derive(StatusGroup = 'Lead',\n\t\tIsActive = 1,\n\t\tSourceSystem = 'Salesforce') ~> AddStaticColumnsLead\nODSCampaign filter(toDate(LastModifiedDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastModifiedDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(Status)) ~> FilterCapaignLastModified\nFilterCapaignLastModified aggregate(groupBy(Status),\n\teach(match(name!='Status'), $$ = first($$))) ~> DistinctCampaignStatus\nDistinctCampaignStatus select(mapColumn(\n\t\tStatusName = Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectStatusCampaign\nSelectStatusCampaign derive(StatusGroup = 'Campaign',\n\t\tIsActive = 1,\n\t\tSourceSystem = 'Salesforce') ~> AddStaticColumns\nAddStaticColumns, AddStaticColumnsLead union(byName: true)~> UnionLead\nAddDateColumnsAndHash alterRow(upsertIf(true())) ~> AllowUpsert\nODSAccount filter(toDate(LastModifiedDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastModifiedDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(Customer_Status__c)) ~> FilterLastModifiedStatus\nFilterLastModifiedStatus select(mapColumn(\n\t\tStatusName = Customer_Status__c\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAccountStatus\nSelectAccountStatus aggregate(groupBy(StatusName),\n\teach(match(name!='StatusName'), $$ = first($$))) ~> DistinctAccountSource\nDistinctAccountSource derive(StatusGroup = 'Account',\n\t\tIsActive = 1,\n\t\tSourceSystem = 'Salesforce') ~> AddStaticColumnsAccount\nUnionLead, AddStaticColumnsAccount union(byName: true)~> UnionAccount\nUnionServiceAppointment derive(DWH_LastUpdateDate = currentTimestamp(),\n\t\tDWH_LoadDate = currentTimestamp(),\n\t\tHash = sha2(256, concat(StatusName, StatusGroup,SourceSystem))) ~> AddDateColumnsAndHash\nODSServiceAppointment filter(toDate(LastModifiedDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastModifiedDate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(Status)) ~> FilterAppointmentLastModified\nFilterAppointmentLastModified select(mapColumn(\n\t\tStatusName = Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAppointmentStatus\nSelectAppointmentStatus aggregate(groupBy(StatusName),\n\teach(match(name!='StatusName'), $$ = first($$))) ~> DistinctAppointmentStatus\nDistinctAppointmentStatus derive(StatusGroup = 'ServiceAppointment',\n\t\tIsActive = 1,\n\t\tSourceSystem = 'Salesforce') ~> AddStaticColumnsAppointment\nUnionAccount, AddStaticColumnsAppointment union(byName: true)~> UnionServiceAppointment\nAllowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tStatusKey as integer,\n\t\tHash as string,\n\t\tStatusName as string,\n\t\tStatusGroup as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Hash'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHash,\n\t\tStatusName,\n\t\tStatusGroup,\n\t\tDWH_LoadDate,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive,\n\t\tSourceSystem\n\t)) ~> UpdateStatus"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimLead')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Lead_Filtered",
                                "type": "DatasetReference"
                            },
                            "name": "ODSLead"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimTimeOfDay",
                                "type": "DatasetReference"
                            },
                            "name": "DimTimeOfDay"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimGeography",
                                "type": "DatasetReference"
                            },
                            "name": "DimGeography"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimDate",
                                "type": "DatasetReference"
                            },
                            "name": "DimDate"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimEthnicity",
                                "type": "DatasetReference"
                            },
                            "name": "DimEthnicity"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimGender",
                                "type": "DatasetReference"
                            },
                            "name": "DimGender"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimLanguage",
                                "type": "DatasetReference"
                            },
                            "name": "DimLanguage"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimStatus",
                                "type": "DatasetReference"
                            },
                            "name": "DimStatus"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimMaritalStatus",
                                "type": "DatasetReference"
                            },
                            "name": "DimMaritalStatus"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSource",
                                "type": "DatasetReference"
                            },
                            "name": "DimSource"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_CampaignMember",
                                "type": "DatasetReference"
                            },
                            "name": "OriginalCampaignDataset"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCampaign",
                                "type": "DatasetReference"
                            },
                            "name": "DimCampaign"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCenter",
                                "type": "DatasetReference"
                            },
                            "name": "DimCenter"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimPromotion",
                                "type": "DatasetReference"
                            },
                            "name": "DimPromotion"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimLead",
                                "type": "DatasetReference"
                            },
                            "name": "UpsertLead"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "SelectLeadColumns"
                        },
                        {
                            "name": "JoinGeography"
                        },
                        {
                            "name": "SelectGeography"
                        },
                        {
                            "name": "FilterLastModified"
                        },
                        {
                            "name": "JoinDateCreated"
                        },
                        {
                            "name": "JoinTimeOfDay"
                        },
                        {
                            "name": "SelectDateColumnsActivity"
                        },
                        {
                            "name": "SelectTimeCreated"
                        },
                        {
                            "name": "CalculateFinalsColumns"
                        },
                        {
                            "name": "JoinDateActivity"
                        },
                        {
                            "name": "SelectTimeActivity"
                        },
                        {
                            "name": "SelectDateColumnsCreated"
                        },
                        {
                            "name": "SelectEthnicityColumns"
                        },
                        {
                            "name": "SelectGenderColumns"
                        },
                        {
                            "name": "SelectLanguageColumns"
                        },
                        {
                            "name": "SelectStatusColumn"
                        },
                        {
                            "name": "FilterByGroupAndSource"
                        },
                        {
                            "name": "SelectMaritalStatusColumn"
                        },
                        {
                            "name": "SelectSource"
                        },
                        {
                            "name": "JoinEthnicity"
                        },
                        {
                            "name": "JoinGender"
                        },
                        {
                            "name": "JoinLanguage"
                        },
                        {
                            "name": "JoinStatus"
                        },
                        {
                            "name": "JoinMaritalStatus"
                        },
                        {
                            "name": "JoinSource"
                        },
                        {
                            "name": "DerivedColumn1ffff"
                        },
                        {
                            "name": "IsValid"
                        },
                        {
                            "name": "SelectFinalColumns"
                        },
                        {
                            "name": "AllowUpsert"
                        },
                        {
                            "name": "JoinTimeOfDayActivity"
                        },
                        {
                            "name": "SelectOriginalCampaign"
                        },
                        {
                            "name": "JoinOriginalCampaign"
                        },
                        {
                            "name": "SelectCampaignColumns"
                        },
                        {
                            "name": "JoinDimCampaign"
                        },
                        {
                            "name": "SelectDimCenter"
                        },
                        {
                            "name": "FilterCenter"
                        },
                        {
                            "name": "JoinCenter"
                        },
                        {
                            "name": "JoinPromotion"
                        },
                        {
                            "name": "SelectPromotionColumns"
                        },
                        {
                            "name": "FilterPromotion"
                        },
                        {
                            "name": "FilterBySourceSystemGender"
                        },
                        {
                            "name": "FilterBySourceSystem"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer (7)\n}\nsource(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tMasterRecordId as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tSalutation as string,\n\t\tMiddleName as string,\n\t\tSuffix as string,\n\t\tName as string,\n\t\tRecordTypeId as string,\n\t\tTitle as string,\n\t\tCompany as string,\n\t\tStreet as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tPostalCode as string,\n\t\tCountry as string,\n\t\tStateCode as string,\n\t\tCountryCode as string,\n\t\tLatitude as decimal(38,18),\n\t\tLongitude as decimal(38,18),\n\t\tGeocodeAccuracy as string,\n\t\tPhone as string,\n\t\tMobilePhone as string,\n\t\tFax as string,\n\t\tEmail as string,\n\t\tWebsite as string,\n\t\tPhotoUrl as string,\n\t\tDescription as string,\n\t\tLeadSource as string,\n\t\tStatus as string,\n\t\tIndustry as string,\n\t\tRating as string,\n\t\tCurrencyIsoCode as string,\n\t\tAnnualRevenue as decimal(38,18),\n\t\tNumberOfEmployees as integer,\n\t\tOwnerId as string,\n\t\tHasOptedOutOfEmail as boolean,\n\t\tIsConverted as boolean,\n\t\tConvertedDate as timestamp,\n\t\tConvertedAccountId as string,\n\t\tConvertedContactId as string,\n\t\tConvertedOpportunityId as string,\n\t\tIsUnreadByOwner as boolean,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastActivityDate as timestamp,\n\t\tDoNotCall as boolean,\n\t\tHasOptedOutOfFax as boolean,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tLastTransferDate as timestamp,\n\t\tJigsaw as string,\n\t\tJigsawContactId as string,\n\t\tEmailBouncedReason as string,\n\t\tEmailBouncedDate as timestamp,\n\t\tet4ae5__HasOptedOutOfMobile__c as boolean,\n\t\tet4ae5__Mobile_Country_Code__c as string,\n\t\tDisc__c as string,\n\t\tDoNotContact__c as boolean,\n\t\tDoNotEmail__c as boolean,\n\t\tDoNotMail__c as boolean,\n\t\tDoNotText__c as boolean,\n\t\tEthnicity__c as string,\n\t\tExternal_Id__c as string,\n\t\tGender__c as string,\n\t\tHairLossExperience__c as string,\n\t\tHairLossFamily__c as string,\n\t\tHairLossOrVolume__c as string,\n\t\tHairLossProductOther__c as string,\n\t\tHairLossProductUsed__c as string,\n\t\tHairLossSpot__c as string,\n\t\tHardCopyPreferred__c as boolean,\n\t\tLanguage__c as string,\n\t\tLudwigScale__c as string,\n\t\tMaritalStatus__c as string,\n\t\tNorwoodScale__c as string,\n\t\tReferral_Code_Expiration_Date__c as timestamp,\n\t\tReferral_Code__c as string,\n\t\tService_Territory__c as string,\n\t\tSolutionOffered__c as string,\n\t\tText_Reminer_Opt_In__c as boolean,\n\t\tAge__c as decimal(38,18),\n\t\tBirthdate__c as timestamp,\n\t\tLead_Qualifier__c as string,\n\t\tLead_Rescheduler__c as string,\n\t\tPromo_Code__c as string,\n\t\tGCLID__c as string,\n\t\tOccupation__c as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> ODSLead\nsource(output(\n\t\tTimeOfDayKey as integer,\n\t\tTime as string,\n\t\tTime24 as string,\n\t\tTime24HM as string,\n\t\tHour as integer,\n\t\tHourC as integer,\n\t\tHourName as string,\n\t\tMinute as integer,\n\t\tMinuteC as integer,\n\t\tMinuteKey as integer,\n\t\tMinuteName as string,\n\t\tSecond as integer,\n\t\tHour24 as integer,\n\t\tAM as string,\n\t\t{30MinuteInterval} as integer,\n\t\tDayPart as string,\n\t\tTimeNumber as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimTimeOfDay\nsource(output(\n\t\tGeographyKey as integer,\n\t\tDigitZIPCode as string,\n\t\tLongitudeZIPCode as double,\n\t\tLatitudeZIPCode as double,\n\t\tZIPCodeClassification as string,\n\t\tNameOfCityOrORG as string,\n\t\tFIPSCode as integer,\n\t\tTwoLetterAbbrevForState as string,\n\t\tFullNameOfStateOrTerritory as string,\n\t\tFIPSCountyCode as integer,\n\t\tNameOfCounty as string,\n\t\tMetroStatisticalAreaCode as integer,\n\t\tSingleAreaCodeForZIPCode as integer,\n\t\tMultipleAreaCodesForZIPCode as string,\n\t\tTimeZoneForZIPCode as string,\n\t\tHrsDiff as integer,\n\t\tZIPCodeObeysDaylightSavings as boolean,\n\t\tUSPSPostOfficeName as string,\n\t\tUSPSAlternateNamesOfCity as string,\n\t\tLocalAlternateNamesOfCity as string,\n\t\tCleanCITYNameForGeocoding as string,\n\t\tCleanSTATENAMEForGeocoding as string,\n\t\tFIPSStateNumericCode as integer,\n\t\tName as string,\n\t\tDMADescription as string,\n\t\tDMAMarketRegion as string,\n\t\tDMACode as integer,\n\t\tDMANameNielsen as string,\n\t\tDMANameInternal as string,\n\t\tDMANameAlternate as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimGeography\nsource(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tISODate as string,\n\t\tYearNumber as integer,\n\t\tYearQuarterNumber as integer,\n\t\tYearMonthNumber as integer,\n\t\tYearQuarterMonthNumber as integer,\n\t\tYearWeekNumber as integer,\n\t\tDateName as string,\n\t\tWeekName as string,\n\t\tWeekNameWithYear as string,\n\t\tWeekShortName as string,\n\t\tWeekShortNameWithYear as string,\n\t\tWeekNumber as integer,\n\t\tFirstDateOfWeek as date,\n\t\tLastDateOfWeek as date,\n\t\tDayOfWeek as integer,\n\t\tDayOfWeekName as string,\n\t\tIsWeekday as boolean,\n\t\tIsWeekend as boolean,\n\t\tMonthName as string,\n\t\tMonthNameWithYear as string,\n\t\tMonthShortName as string,\n\t\tMonthShortNameWithYear as string,\n\t\tMonthNumber as integer,\n\t\tFirstDateOfMonth as date,\n\t\tLastDateOfMonth as date,\n\t\tDayOfMonth as integer,\n\t\tDayOfMonthName as string,\n\t\tIsLastDayOfMonth as boolean,\n\t\tQuarterName as string,\n\t\tQuarterNameWithYear as string,\n\t\tQuarterShortName as string,\n\t\tQuarterShortNameWithYear as string,\n\t\tQuarterNumber as integer,\n\t\tFirstDateOfQuarter as date,\n\t\tLastDateOfQuarter as date,\n\t\tDayOfQuarter as integer,\n\t\tDayOfQuarterName as string,\n\t\tHalfName as string,\n\t\tHalfNameWithYear as string,\n\t\tHalfShortName as string,\n\t\tHalfShortNameWithYear as string,\n\t\tHalfNumber as integer,\n\t\tYearHalfNumber as integer,\n\t\tFirstDateOfHalf as date,\n\t\tLastDateOfHalf as date,\n\t\tDayOfHalf as integer,\n\t\tDayOfHalfName as string,\n\t\tYearName as string,\n\t\tYearShortName as string,\n\t\tFirstDateOfYear as date,\n\t\tLastDateOfYear as date,\n\t\tDayOfYear as integer,\n\t\tDayOfYearName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarYear as integer,\n\t\tCalendarYearMonth as string,\n\t\tCalendarYearQtr as string,\n\t\tFiscalYear as integer,\n\t\tFiscalWeek as integer,\n\t\tFiscalPeriod as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalQuarter as integer,\n\t\tFiscalYearFiscalWeek as integer,\n\t\tFiscalYearFiscalPeriod as integer,\n\t\tFiscalYearFiscalMonth as integer,\n\t\tFiscalYearFiscalQuarter as integer,\n\t\tFiscalYearFiscalQuarterFiscalMonth as integer,\n\t\tFiscalYearName as string,\n\t\tFiscalYearLongName as string,\n\t\tFiscalYearShortName as string,\n\t\tFiscalQuarterName as string,\n\t\tFiscalQuarterLongName as string,\n\t\tFiscalQuarterNameWithYear as string,\n\t\tFiscalQuarterLongNameWithYear as string,\n\t\tFiscalQuarterShortName as string,\n\t\tFiscalQuarterShortNameWithYear as string,\n\t\tFiscalMonthName as string,\n\t\tFiscalMonthNameWithYear as string,\n\t\tFiscalMonthShortName as string,\n\t\tFiscalMonthShortNameWithYear as string,\n\t\tFiscalMonthCalendarShortName as string,\n\t\tFiscalMonthCalendarShortNameWithYear as string,\n\t\tFiscalWeekName as string,\n\t\tFiscalWeekLongName as string,\n\t\tFiscalWeekNameWithYear as string,\n\t\tFiscalWeekLongNameWithYear as string,\n\t\tFiscalWeekShortName as string,\n\t\tFiscalWeekShortNameWithYear as string,\n\t\tFiscalPeriodName as string,\n\t\tFiscalPeriodLongName as string,\n\t\tFiscalPeriodNameWithYear as string,\n\t\tFiscalPeriodLongNameWithYear as string,\n\t\tFiscalPeriodShortName as string,\n\t\tFiscalPeriodShortNameWithYear as string,\n\t\tCummWorkdays as integer,\n\t\tMonthWorkdays as integer,\n\t\tMonthWorkdaysTotal as integer,\n\t\tIsHoliday as boolean,\n\t\tMonthOfQuarter as integer,\n\t\tBroadcastYearBroadcastQuarter as integer,\n\t\tBroadcastYearBroadcastMonth as integer,\n\t\tBroadcastYearBroadcastWeek as integer,\n\t\tBroadcastYearQtrMonthWeekDay as integer,\n\t\tBroadcastYearQtrMonth as integer,\n\t\tBroadcastYearShortName as string,\n\t\tBroadcastYearLongName as string,\n\t\tBroadcastYeartName as string,\n\t\tBroadcastQuarterName as string,\n\t\tBroadcastWeekName as string,\n\t\tBroadcastDayName as string,\n\t\tmsrepl_tran_version as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimDate\nsource(output(\n\t\tEthnicityKey as integer,\n\t\tEthnicityName as string,\n\t\tHash as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimEthnicity\nsource(output(\n\t\tGenderKey as integer,\n\t\tGenderName as string,\n\t\tHash as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimGender\nsource(output(\n\t\tLanguageKey as integer,\n\t\tLanguageName as string,\n\t\tHash as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimLanguage\nsource(output(\n\t\tStatusKey as integer,\n\t\tHash as string,\n\t\tStatusName as string,\n\t\tStatusGroup as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimStatus\nsource(output(\n\t\tMaritalStatusKey as integer,\n\t\tMaritalStatusName as string,\n\t\tHash as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimMaritalStatus\nsource(output(\n\t\tSourceKey as integer,\n\t\tSourceName as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSource\nsource(output(\n\t\tRowID as long,\n\t\tLeadId as string,\n\t\tStatus as string,\n\t\tCampaignId as string,\n\t\tCreatedDate as timestamp,\n\t\tLeadSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from(\\nSELECT ROW_NUMBER()\\n               OVER ( PARTITION BY cm.LeadId ORDER BY cm.createdDate asc) AS \\'RowID\\',\\n       cm.LeadId, cm.Status, cm.CampaignId, CreatedDate, LeadSource\\nfrom ods.SF_CampaignMember cm\\nwhere LeadId is not null\\n    ) as x\\nwhere RowID = 1\\n',\n\tformat: 'query',\n\tstaged: true) ~> OriginalCampaignDataset\nsource(output(\n\t\tCampaignKey as integer,\n\t\tCampaignId as string,\n\t\tCampaignName as string,\n\t\tCampaignDescription as string,\n\t\tAgencyKey as integer,\n\t\tAgencyName as string,\n\t\tCampaignStatus as string,\n\t\tStatusKey as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tCurrencyIsoCode as string,\n\t\tCurrencyKey as integer,\n\t\tPromoCode as string,\n\t\tPromotioKey as integer,\n\t\tCampaignChannel as string,\n\t\tChannelKey as integer,\n\t\tCampaignLocation as string,\n\t\tCampaignLanguage as string,\n\t\tLanguageKey as integer,\n\t\tCampaignMedia as string,\n\t\tMediaKey as integer,\n\t\tCampaignSource as string,\n\t\tSourceKey as integer,\n\t\tCampaigngender as string,\n\t\tGenderKey as integer,\n\t\tCampaignType as string,\n\t\tBudgetedCost as decimal(38,18),\n\t\tActualCost as decimal(38,18),\n\t\tDNIS as string,\n\t\tReferrer as string,\n\t\tReferralFlag as boolean,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string,\n\t\tCampaignFormat as string,\n\t\tCampaignDeviceType as string,\n\t\tCampaignDNIS as string,\n\t\tCampaignTactic as string,\n\t\tCampaignPromoDescription as string,\n\t\tSourceCode as string,\n\t\tTollFreeName as string,\n\t\tTollFreeMobileName as string,\n\t\tTollFreeNumber as string,\n\t\tExternalID as string,\n\t\tIsDeleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCampaign\nsource(output(\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tCenterPayGroupID as integer,\n\t\tCenterDescription as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCenterGeographykey as integer,\n\t\tCenterPostalCode as string,\n\t\tCenterPhone1 as string,\n\t\tCenterPhone2 as string,\n\t\tCenterPhone3 as string,\n\t\tPhone1TypeID as integer,\n\t\tPhone2TypeID as integer,\n\t\tPhone3TypeID as integer,\n\t\tIsPhone1PrimaryFlag as boolean,\n\t\tIsPhone2PrimaryFlag as boolean,\n\t\tIsPhone3PrimaryFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tLastUpdate as timestamp,\n\t\tUpdateStamp as string,\n\t\tCenterNumber as integer,\n\t\tCenterOwnershipID as integer,\n\t\tCenterOwnershipSortOrder as integer,\n\t\tCenterOwnershipDescription as string,\n\t\tCenterOwnershipDescriptionShort as string,\n\t\tOwnerLastName as string,\n\t\tOwnerFirstName as string,\n\t\tCorporateName as string,\n\t\tOwnershipAddress1 as string,\n\t\tOwnershipAddress2 as string,\n\t\tOwnershipGeographykey as integer,\n\t\tOwnershipPostalCode as string,\n\t\tCenterTypeID as integer,\n\t\tCenterTypeSortOrder as integer,\n\t\tCenterTypeDescription as string,\n\t\tCenterTypeDescriptionShort as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string,\n\t\tTimeZoneID as integer,\n\t\tServiceTerritoryId as string,\n\t\tIsDeleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCenter\nsource(output(\n\t\tPromotionkey as integer,\n\t\tPromotionId as string,\n\t\tPromotionName as string,\n\t\tPromotionCurrency as string,\n\t\tPromotionLongName as string,\n\t\tDiscountType as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tIsActive as boolean,\n\t\tExternalId as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimPromotion\nFilterLastModified select(mapColumn(\n\t\tLeadFirstName = FirstName,\n\t\tLeadId = Id,\n\t\tLeadLastName = LastName,\n\t\tLeadFullName = Name,\n\t\tLeadBirthday = Birthdate__c,\n\t\tLeadAddress = Street,\n\t\tLeadEmail = Email,\n\t\tCreatedById,\n\t\tLastModifiedById,\n\t\tLeadPhone = Phone,\n\t\tLeadMobilePhone = MobilePhone,\n\t\tNorwoodScale = NorwoodScale__c,\n\t\tLudwigScale = LudwigScale__c,\n\t\tHairLossInFamily = HairLossFamily__c,\n\t\tHairLossProductUsed = HairLossProductUsed__c,\n\t\tHairLossSpot = HairLossSpot__c,\n\t\tLeadPostalCode = PostalCode,\n\t\tCity,\n\t\tState,\n\t\tLeadEthnicity = Ethnicity__c,\n\t\tLeadGender = Gender__c,\n\t\tLeadLanguage = Language__c,\n\t\tLeadStatus = Status,\n\t\tCreatedDate,\n\t\tLastActivityDate,\n\t\tLeadMaritalStatus = MaritalStatus__c,\n\t\tLastModifiedDate,\n\t\tLeadSource,\n\t\tDoNotCall,\n\t\tDoNotContact = DoNotContact__c,\n\t\tDoNotEmail = DoNotEmail__c,\n\t\tDoNotMail = DoNotMail__c,\n\t\tDoNotText = DoNotText__c,\n\t\tConvertedContactId,\n\t\tConvertedAccountId,\n\t\tConvertedOpportunityId,\n\t\tConvertedDate,\n\t\tDiscStyle = Disc__c,\n\t\tLeadExternalId = External_Id__c,\n\t\tIsDeleted,\n\t\tServiceTerritoryId = Service_Territory__c,\n\t\tGCLID = GCLID__c,\n\t\tReferralCode = Referral_Code__c,\n\t\tReferralCodeExpirationDate = Referral_Code_Expiration_Date__c,\n\t\tPromoCode = Promo_Code__c,\n\t\tOccupation__c\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLeadColumns\nIsValid, SelectGeography join(lower(iif(length(replace(LeadPostalCode, ' ',''))==6, left(LeadPostalCode, 3), LeadPostalCode)) == lower(DigitZIPCode),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinGeography\nDimGeography select(mapColumn(\n\t\tGeographyKey,\n\t\tDigitZIPCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGeography\nODSLead filter(LastModifiedDate <= currentTimestamp() && toDate(LastModifiedDate) > toDate(addDays(currentTimestamp(), $DaysToLoad*-1))) ~> FilterLastModified\nJoinGeography, SelectDateColumnsCreated join(toDate(CreatedDate) == FullDateCreated,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDateCreated\nJoinDateActivity, SelectTimeCreated join(second(CreatedDate) == Second\n\t&& hour(CreatedDate) == Hour\n\t&& minute(CreatedDate) == Minute,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTimeOfDay\nDimDate select(mapColumn(\n\t\tDateKeyActivity = DateKey,\n\t\tFullDateActivity = FullDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDateColumnsActivity\nDimTimeOfDay select(mapColumn(\n\t\tTimeOfDayKeyCreated = TimeOfDayKey,\n\t\tSecond,\n\t\tHour = Hour24,\n\t\tMinute\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTimeCreated\nJoinPromotion derive(LeadFirstName = iif(regexMatch(LeadFirstName,`[a-zA-Z]+`), initCap(regexReplace(LeadFirstName, `([0-9])|[!@#$%^&*(),.?:;+´~|\\[\\]{}|<>\\/_-]`,'')) ,initCap(regexReplace(LeadFirstName, `[()-]`,''))),\n\t\tLeadLastname = iif(regexMatch(LeadLastName,`[a-zA-Z]+`), initCap(regexReplace(LeadLastName, `([0-9])|[!@#$%^&*(),.?:;+´~|\\[\\]{}|<>\\/_-]`,'')) ,initCap(regexReplace(LeadLastName, `[()-]`,''))),\n\t\tLeadFullName = iif(regexMatch(LeadFullName,`[a-zA-Z]+`), initCap(regexReplace(LeadFullName, `([0-9])|[!@#$%^&*(),.?:;+´~|\\[\\]{}|<>\\/_-]`,'')) ,initCap(regexReplace(LeadFullName, `[()-]`,''))),\n\t\tLeadBirthday = toDate(LeadBirthday),\n\t\tLeadPhone = replace(replace(replace(replace(LeadPhone,'(',''),')',''),' ',''),'-',''),\n\t\tLeadMobilePhone = replace(replace(replace(replace(LeadMobilePhone,'(',''),')',''),' ',''),'-',''),\n\t\tSourceSystem = 'Salesforce',\n\t\tGeographyKey = iifNull(GeographyKey,-1),\n\t\tEthnicityKey = coalesce(EthnicityKey, -1),\n\t\tGenderKey = coalesce(GenderKey, -1),\n\t\tLanguageKey = coalesce(LanguageKey, -1),\n\t\tStatusKey = coalesce(StatusKey, -1),\n\t\tCreatedDateKey = coalesce(DateKeyCreaated, -1),\n\t\tCretaedTimeKey = coalesce(TimeOfDayKeyCreated,-1),\n\t\tLeadLastActivityDate = LastActivityDate,\n\t\tLastActivityDateKey = coalesce(DateKeyActivity,-1),\n\t\tLastActivityTimekey = coalesce(TimeOfDayKeyActivity, -1),\n\t\tLeadSource = initCap(LeadSource),\n\t\tLeadCreatedDate = CreatedDate,\n\t\tSourceKey = coalesce(SourceKey, -1),\n\t\tMaritulStatusKey = coalesce(MaritalStatusKey, -1),\n\t\tDWH_LastUpdateDate = currentTimestamp(),\n\t\tDWH_CreatedDate = currentTimestamp(),\n\t\tCampaignKey = coalesce(CampaignKey, -1),\n\t\tCenterKey = coalesce(CenterKeyDimCenter,-1),\n\t\tCenterNumber = CenterNumber,\n\t\tPromotionkey = coalesce(Promotionkey, -1)) ~> CalculateFinalsColumns\nJoinDateCreated, SelectDateColumnsActivity join(toDate(LastActivityDate) == FullDateActivity,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDateActivity\nDimTimeOfDay select(mapColumn(\n\t\tHour,\n\t\tMinute,\n\t\tSecond,\n\t\tTimeOfDayKeyActivity = TimeOfDayKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTimeActivity\nDimDate select(mapColumn(\n\t\tDateKeyCreaated = DateKey,\n\t\tFullDateCreated = FullDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDateColumnsCreated\nFilterBySourceSystem select(mapColumn(\n\t\tEthnicityKey,\n\t\tEthnicityName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEthnicityColumns\nFilterBySourceSystemGender select(mapColumn(\n\t\tGenderKey,\n\t\tGenderName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGenderColumns\nDimLanguage select(mapColumn(\n\t\tLanguageKey,\n\t\tLanguageName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLanguageColumns\nFilterByGroupAndSource select(mapColumn(\n\t\tStatusKey,\n\t\tStatusName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectStatusColumn\nDimStatus filter(lower(SourceSystem) == 'salesforce' && lower(StatusGroup) == 'lead') ~> FilterByGroupAndSource\nDimMaritalStatus select(mapColumn(\n\t\tMaritalStatusKey,\n\t\tMaritalStatusName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectMaritalStatusColumn\nDimSource select(mapColumn(\n\t\tSourceKey,\n\t\tSourceName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSource\nJoinTimeOfDay, SelectEthnicityColumns join(lower(trim(LeadEthnicity)) == lower(trim(EthnicityName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEthnicity\nJoinEthnicity, SelectGenderColumns join(lower(trim(LeadGender)) == lower(trim(GenderName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinGender\nJoinGender, SelectLanguageColumns join(trim(lower(LeadLanguage)) == lower(trim(LanguageName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLanguage\nJoinLanguage, SelectStatusColumn join(lower(trim(LeadStatus)) == lower(trim(StatusName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinStatus\nJoinStatus, SelectMaritalStatusColumn join(lower(trim(LeadMaritalStatus)) == lower(trim(MaritalStatusName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMaritalStatus\nJoinMaritalStatus, SelectSource join(lower(trim(LeadSource)) == lower(trim(SourceName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSource\nSelectLeadColumns derive(IsValidFirstName = (!regexMatch(replace(lower(regexReplace(lower(LeadFirstName), `[!-_@#$%^&*(),.?:{}|<>\\/]|([0-9])`,'')),' ', ''),`\\b^([a-zA-Z0-9])\\1\\1+`) &&  \n!in(['fuck','asshole','fuckboy','dickhead','motherfucker'], lower(LeadFirstName)) &&  \n!like(lower(LeadFirstName),'%usecase%') &&\n!like(lower(LeadFirstName),'test%') && !like(lower(LeadFirstName),'%test') ) && \n!isNull(LeadFirstName) && \nlength(replace(regexReplace(lower(LeadFirstName), `[!-_@#$%^&*(),.?:{}|<>\\/]|([0-9])`,''),' ', '')) >= 1,\n\t\tIsValidLastName = ((!regexMatch(replace(lower(regexReplace(lower(LeadLastName), `[!-_@#$%^&*(),?:{}|<>\\/]|([0-9])`,'')), ' ', ''),`\\b^([a-zA-Z0-9])\\1\\1+`) &&\n !in(['fuck','asshole','fuckboy','dickhead','motherfucker'], lower(LeadLastName)) && !like(lower(LeadLastName),'%usecase%')\n&& !like(lower(LeadLastName),'test%') && !like(lower(LeadLastName),'%test') && !like(lower(LeadLastName),'%newcaller%')\n) && !isNull(LeadLastName) && length(replace(regexReplace(lower(LeadLastName), `[!-_@#$%^&*(),?:{}|<>\\/]|([0-9])`,''), ' ', '')) >= 1 ) || lower(LeadLastName) == '.',\n\t\tIsValidFullName = iif(like(lower(LeadFirstName),'fat') && like(lower(LeadLastName), 'ass'), false(), \n    iif(like(lower(LeadFirstName),'mickey') && like(lower(LeadLastName), 'mouse'), false(), \n    iif(like(lower(LeadFirstName),'minnie') && like(lower(LeadLastName), 'mouse'), false(),\n    iif(like(lower(LeadFirstName),'daisy') && like(lower(LeadLastName), 'duck'), false(),\n    iif(like(lower(LeadFirstName),'fuck') && like(lower(LeadLastName), 'off'), false(),\n    iif(like(lower(LeadFirstName),'do not') && like(lower(LeadLastName), 'use'), false(),\n    iif(like(lower(LeadFirstName),'donald') && like(lower(LeadLastName), 'duck') , false(),true()))))))) && !isNull(LeadFirstName) && !isNull(LeadLastName),\n\t\tIsValidEmail = (regexMatch(LeadEmail, `[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$`) && !isNull(LeadEmail) ) &&\n( !regexMatch(LeadEmail, `([a-zA-Z])\\1{3,}`) && !like(lower(LeadEmail), '%@test.com') && !like(lower(LeadEmail), '%usecase%') &&\n!like(lower(LeadEmail), 'test123@%') && !like(lower(LeadEmail), 'test@%') &&\n!like(lower(LeadEmail), 'testperson@%') && !like(lower(LeadEmail), 'testweb@%') &&\n!like(lower(LeadEmail), 'testweb#@%') && !like(lower(LeadEmail), '%email.com') &&\n\n!like(lower(LeadEmail), 'test#@%')),\n\t\tIsValidPhone = (length(replace(replace(replace(replace(LeadPhone, '(', ''), ')', ''), ' ',''), '-','')) >= 10 &&\nlength(replace(replace(replace(replace(LeadPhone, '(', ''), ')', ''), ' ',''), '-','')) <= 15 && !isNull(LeadPhone) ) &&\n(!regexMatch(replace(replace(replace(replace(LeadPhone, '(', ''), ')', ''), ' ',''), '-',''),\n`^([0-5])\\1{3,}|^([6])\\2{2,}|^([7-8])\\3{6,}|^([9])\\4{3,}|^(123)`) ),\n\t\tIsValidMobilePhone = (length(replace(replace(replace(replace(LeadMobilePhone, '(', ''), ')', ''), ' ',''), '-','')) >= 10 &&\nlength(replace(replace(replace(replace(LeadMobilePhone, '(', ''), ')', ''), ' ',''), '-','')) <= 15 && !isNull(LeadMobilePhone)) &&\n(!regexMatch(replace(replace(replace(replace(LeadMobilePhone, '(', ''), ')', ''), ' ',''), '-',''),\n`^([0-5])\\1{3,}|^([6])\\2{2,}|^([7-8])\\3{6,}|^([9])\\4{3,}|^(123)`) ),\n\t\tReviewNeeded = regexMatch(LeadFirstName, `[!@#$%^&*(),.?:{}|<>\\/]|([0-9])`) || regexMatch(LeadLastName, `[!@#$%^&*(),.?:{}|<>\\/]|([0-9])`)) ~> DerivedColumn1ffff\nDerivedColumn1ffff derive(IsValid = case(     (\r\n    ( (IsValidFirstName == true() && IsValidLastName == true() && IsValidFullName == true()) &&\r\n        (IsValidEmail == true() || IsValidPhone ==true() || IsValidMobilePhone == true()) )       \r\n        ) , toBoolean('1'), \r\n        toBoolean('0'))) ~> IsValid\nCalculateFinalsColumns select(mapColumn(\n\t\tLeadFirstName,\n\t\tOriginalCampaignId,\n\t\tOriginalCampaignKey = CampaignKey,\n\t\tLeadId = SelectLeadColumns@LeadId,\n\t\tLeadLastName = CalculateFinalsColumns@LeadLastname,\n\t\tLeadFullName,\n\t\tLeadBirthday,\n\t\tLeadAddress,\n\t\tLeadEmail,\n\t\tCreatedById,\n\t\tLastModifiedById,\n\t\tLeadPhone,\n\t\tLeadMobilePhone,\n\t\tNorwoodScale,\n\t\tHairLossInFamily,\n\t\tLudwigScale,\n\t\tHairLossProductUsed,\n\t\tHairLossSpot,\n\t\tLeadPostalCode,\n\t\tCity,\n\t\tState,\n\t\tLeadEthnicity,\n\t\tLeadGender,\n\t\tLeadLanguage,\n\t\tCenterNumber,\n\t\tLeadStatus,\n\t\tCreatedDate,\n\t\tLastActivityDate,\n\t\tLeadMaritalStatus,\n\t\tLastModifiedDate,\n\t\tLeadSource,\n\t\tDoNotCall,\n\t\tDoNotContact,\n\t\tDoNotEmail,\n\t\tDoNotMail,\n\t\tDoNotText,\n\t\tConvertedContactId,\n\t\tConvertedAccountId,\n\t\tConvertedOpportunityId,\n\t\tConvertedDate,\n\t\tDiscStyle,\n\t\tLeadExternalId,\n\t\tIsDeleted,\n\t\tIsValidLeadFirstName = IsValidFirstName,\n\t\tIsValidLeadLastName = IsValidLastName,\n\t\tIsValidLeadFullName = IsValidFullName,\n\t\tIsValidLeadEmail = IsValidEmail,\n\t\tIsValidLeadPhone = IsValidPhone,\n\t\tIsValidLeadMobilePhone = IsValidMobilePhone,\n\t\tReviewNeeded,\n\t\tIsValid,\n\t\tGeographyKey,\n\t\tDigitZIPCode,\n\t\tDateKeyCreaated,\n\t\tFullDateCreated,\n\t\tDateKeyActivity,\n\t\tFullDateActivity,\n\t\tLastActivityTimekey,\n\t\tTimeOfDayKeyCreated,\n\t\tEthnicityKey,\n\t\tEthnicityName,\n\t\tSourceSystem,\n\t\tGenderKey,\n\t\tGenderName,\n\t\tLanguageKey,\n\t\tLanguageName,\n\t\tStatusKey,\n\t\tStatusName,\n\t\tMaritalStatusKey,\n\t\tMaritalStatusName,\n\t\tSourceKey,\n\t\tSourceName,\n\t\tLeadName = LeadFirstName,\n\t\tCreatedDateKey,\n\t\tCreatedTimeKey = CretaedTimeKey,\n\t\tLeadLastActivityDate,\n\t\tLastActivityDateKey,\n\t\tLastActivityTimekey,\n\t\tLeadCreatedDate,\n\t\tMaritulStatusKey,\n\t\tServiceTerritoryId = SelectLeadColumns@ServiceTerritoryId,\n\t\tDWH_CreatedDate,\n\t\tDWH_LastUpdateDate,\n\t\tCenterKey,\n\t\tGCLID,\n\t\tReferralCode,\n\t\tReferralCodeExpirationDate,\n\t\tOriginalCampaignSource,\n\t\tPromotionCode = PromotionName,\n\t\tPromotionCodeKey = Promotionkey,\n\t\tOccupation__c\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalColumns\nSelectFinalColumns alterRow(upsertIf(true())) ~> AllowUpsert\nJoinSource, SelectTimeActivity join(hour(LastActivityDate) == SelectTimeActivity@Hour\n\t&& minute(LastActivityDate) == SelectTimeActivity@Minute\n\t&& second(LastActivityDate) == SelectTimeActivity@Second,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTimeOfDayActivity\nOriginalCampaignDataset select(mapColumn(\n\t\tRowId = RowID,\n\t\tOriginalCampaignId = CampaignId,\n\t\tLeadId,\n\t\tOriginalCampaignSource = LeadSource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOriginalCampaign\nJoinTimeOfDayActivity, SelectOriginalCampaign join(SelectLeadColumns@LeadId == SelectOriginalCampaign@LeadId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinOriginalCampaign\nDimCampaign select(mapColumn(\n\t\tCampaignKey,\n\t\tCampaignId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCampaignColumns\nJoinOriginalCampaign, SelectCampaignColumns join(OriginalCampaignId == CampaignId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimCampaign\nFilterCenter select(mapColumn(\n\t\tCenterKeyDimCenter = CenterKey,\n\t\tCenterID,\n\t\tCenterNumber,\n\t\tServiceTerritoryId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimCenter\nDimCenter filter(IsDeleted == toBoolean(toString(0)) && IsActiveFlag == toBoolean(toString(1))) ~> FilterCenter\nJoinDimCampaign, SelectDimCenter join(SelectLeadColumns@ServiceTerritoryId == SelectDimCenter@ServiceTerritoryId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCenter\nJoinCenter, SelectPromotionColumns join(PromoCode == PromotionId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPromotion\nFilterPromotion select(mapColumn(\n\t\tPromotionkey,\n\t\tPromotionId,\n\t\tPromotionName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPromotionColumns\nDimPromotion filter(IsActive == true()) ~> FilterPromotion\nDimGender filter(lower(trim(SourceSystem)) == lower(trim('salesforce'))) ~> FilterBySourceSystemGender\nDimEthnicity filter(lower(trim(SourceSystem)) == lower(trim('salesforce'))) ~> FilterBySourceSystem\nAllowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tLeadKey as integer,\n\t\tLeadId as string,\n\t\tLeadFirstName as string,\n\t\tLeadLastname as string,\n\t\tLeadFullName as string,\n\t\tLeadBirthday as date,\n\t\tLeadAddress as string,\n\t\tIsActive as boolean,\n\t\tIsConsultFormComplete as boolean,\n\t\tIsvalid as boolean,\n\t\tLeadEmail as string,\n\t\tLeadPhone as string,\n\t\tLeadMobilePhone as string,\n\t\tNorwoodScale as string,\n\t\tLudwigScale as string,\n\t\tHairLossInFamily as string,\n\t\tHairLossProductUsed as string,\n\t\tHairLossSpot as string,\n\t\tGeographyKey as integer,\n\t\tLeadPostalCode as string,\n\t\tEthnicityKey as integer,\n\t\tLeadEthnicity as string,\n\t\tGenderKey as integer,\n\t\tLeadGender as string,\n\t\tCenterKey as integer,\n\t\tCenterNumber as string,\n\t\tLanguageKey as integer,\n\t\tLeadLanguage as string,\n\t\tStatusKey as integer,\n\t\tLeadStatus as string,\n\t\tLeadCreatedDate as timestamp,\n\t\tCreatedDateKey as integer,\n\t\tCreatedTimeKey as integer,\n\t\tLeadLastActivityDate as timestamp,\n\t\tLastActivityDateKey as integer,\n\t\tLastActivityTimekey as integer,\n\t\tDISCStyle as string,\n\t\tLeadMaritalStatus as string,\n\t\tLeadConsultReady as integer,\n\t\tConsultationFormReady as integer,\n\t\tIsDeleted as boolean,\n\t\tDoNotCall as boolean,\n\t\tDoNotContact as boolean,\n\t\tDoNotEmail as boolean,\n\t\tDoNotMail as boolean,\n\t\tDoNotText as boolean,\n\t\tCreateUser as string,\n\t\tUpdateUser as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tMaritalStatusKey as integer,\n\t\tLeadSource as string,\n\t\tSourceKey as integer,\n\t\tOriginalCommMethodkey as integer,\n\t\tRecentCommMethodKey as integer,\n\t\tCommunicationMethod as string,\n\t\tIsValidLeadName as boolean,\n\t\tIsValidLeadLastName as boolean,\n\t\tIsValidLeadFullName as boolean,\n\t\tIsValidLeadPhone as boolean,\n\t\tIsValidLeadMobilePhone as boolean,\n\t\tIsValidLeadEmail as boolean,\n\t\tReviewNeeded as boolean,\n\t\tConvertedContactId as string,\n\t\tConvertedAccountId as string,\n\t\tConvertedOpportunityId as string,\n\t\tConvertedDate as timestamp,\n\t\tLastModifiedDate as timestamp,\n\t\tSourceSystem as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tLeadExternalID as string,\n\t\tServiceTerritoryID as string,\n\t\tOriginalCampaignId as string,\n\t\tOriginalCampaignKey as integer,\n\t\tAccountID as string,\n\t\tLeadOccupation as string,\n\t\tOriginalCampaignSource as string,\n\t\tGCLID as string,\n\t\tRealCreatedDate as timestamp,\n\t\tIsDuplicateByEmail as boolean,\n\t\tIsDuplicateByName as boolean,\n\t\tReferralCode as string,\n\t\tReferralCodeExpirationDate as timestamp,\n\t\tPromotionCodeKey as integer,\n\t\tPromotionCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['LeadId'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLeadId,\n\t\tLeadFirstName,\n\t\tLeadLastname = LeadLastName,\n\t\tLeadFullName,\n\t\tLeadBirthday,\n\t\tLeadAddress,\n\t\tIsvalid = IsValid,\n\t\tGCLID,\n\t\tLeadEmail,\n\t\tLeadPhone,\n\t\tLeadMobilePhone,\n\t\tNorwoodScale,\n\t\tLudwigScale,\n\t\tHairLossInFamily,\n\t\tCenterKey,\n\t\tCenterNumber,\n\t\tHairLossProductUsed,\n\t\tHairLossSpot,\n\t\tGeographyKey,\n\t\tLeadPostalCode,\n\t\tEthnicityKey,\n\t\tLeadEthnicity,\n\t\tGenderKey,\n\t\tLeadGender,\n\t\tLanguageKey,\n\t\tLeadLanguage,\n\t\tStatusKey,\n\t\tLeadStatus,\n\t\tLeadCreatedDate,\n\t\tCreatedDateKey,\n\t\tCreatedTimeKey,\n\t\tLeadLastActivityDate,\n\t\tLastActivityDateKey,\n\t\tLastActivityTimekey,\n\t\tDISCStyle = DiscStyle,\n\t\tLeadMaritalStatus,\n\t\tIsDeleted,\n\t\tDoNotCall,\n\t\tDoNotContact,\n\t\tDoNotEmail,\n\t\tDoNotMail,\n\t\tDoNotText,\n\t\tCreateUser = CreatedById,\n\t\tUpdateUser = LastModifiedById,\n\t\tCity,\n\t\tState,\n\t\tMaritalStatusKey,\n\t\tLeadSource,\n\t\tSourceKey,\n\t\tIsValidLeadName = IsValidLeadFirstName,\n\t\tIsValidLeadLastName,\n\t\tIsValidLeadFullName,\n\t\tIsValidLeadPhone,\n\t\tIsValidLeadMobilePhone,\n\t\tIsValidLeadEmail,\n\t\tReviewNeeded,\n\t\tConvertedContactId,\n\t\tConvertedAccountId,\n\t\tConvertedOpportunityId,\n\t\tConvertedDate,\n\t\tLastModifiedDate,\n\t\tSourceSystem,\n\t\tDWH_CreatedDate,\n\t\tDWH_LastUpdateDate,\n\t\tLeadExternalID = LeadExternalId,\n\t\tOriginalCampaignId,\n\t\tOriginalCampaignKey,\n\t\tServiceTerritoryID = ServiceTerritoryId,\n\t\tReferralCodeExpirationDate,\n\t\tReferralCode,\n\t\tOriginalCampaignSource,\n\t\tPromotionCode,\n\t\tPromotionCodeKey,\n\t\tLeadOccupation = Occupation__c\n\t)) ~> UpsertLead"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODSEvent')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_SF_Event",
                                "type": "DatasetReference"
                            },
                            "name": "EventParquet"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_Event",
                                "type": "DatasetReference"
                            },
                            "name": "UpsertOdsEvent"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AllowUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tId as string,\n\t\tWhoId as string,\n\t\tWhatId as string,\n\t\tWhoCount as integer,\n\t\tWhatCount as integer,\n\t\tSubject as string,\n\t\tLocation as string,\n\t\tIsAllDayEvent as boolean,\n\t\tActivityDateTime as timestamp,\n\t\tActivityDate as timestamp,\n\t\tDurationInMinutes as integer,\n\t\tStartDateTime as timestamp,\n\t\tEndDateTime as timestamp,\n\t\tDescription as string,\n\t\tAccountId as string,\n\t\tOwnerId as string,\n\t\tCurrencyIsoCode as string,\n\t\tType as string,\n\t\tIsPrivate as boolean,\n\t\tShowAs as string,\n\t\tIsDeleted as boolean,\n\t\tIsChild as boolean,\n\t\tIsGroupEvent as boolean,\n\t\tGroupEventType as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tIsArchived as boolean,\n\t\tRecurrenceActivityId as string,\n\t\tIsRecurrence as boolean,\n\t\tRecurrenceStartDateTime as timestamp,\n\t\tRecurrenceEndDateOnly as timestamp,\n\t\tRecurrenceTimeZoneSidKey as string,\n\t\tRecurrenceType as string,\n\t\tRecurrenceInterval as integer,\n\t\tRecurrenceDayOfWeekMask as integer,\n\t\tRecurrenceDayOfMonth as integer,\n\t\tRecurrenceInstance as string,\n\t\tRecurrenceMonthOfYear as string,\n\t\tReminderDateTime as timestamp,\n\t\tIsReminderSet as boolean,\n\t\tEventSubtype as string,\n\t\tIsRecurrence2Exclusion as boolean,\n\t\tRecurrence2PatternText as string,\n\t\tRecurrence2PatternVersion as string,\n\t\tIsRecurrence2 as boolean,\n\t\tIsRecurrence2Exception as boolean,\n\t\tRecurrence2PatternStartDate as timestamp,\n\t\tRecurrence2PatternTimeZone as string,\n\t\tBrightPattern__SPRecordingOrTranscriptURL__c as string,\n\t\tCenter_Name__c as string,\n\t\tCompleted_Date__c as timestamp,\n\t\tExternal_ID__c as string,\n\t\tLead__c as string,\n\t\tMeeting_Platform_Id__c as string,\n\t\tMeeting_Platform__c as string,\n\t\tPerson_Account__c as string,\n\t\tRecording_Link__c as string,\n\t\tResult__c as string,\n\t\tSPRecordingOrTranscriptURL__c as string,\n\t\tService_Appointment__c as string,\n\t\tService_Territory_Caller_Id__c as string,\n\t\tAgent_Link__c as string,\n\t\tGuest_Link__c as string,\n\t\tOpportunity__c as string,\n\t\tAcceptedEventInviteeIds as string,\n\t\tDeclinedEventInviteeIds as string,\n\t\tEventWhoIds as string,\n\t\tUndecidedEventInviteeIds as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> EventParquet\nEventParquet alterRow(upsertIf(true())) ~> AllowUpsert\nAllowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as string,\n\t\tWhoId as string,\n\t\tWhatId as string,\n\t\tWhoCount as integer,\n\t\tWhatCount as integer,\n\t\tSubject as string,\n\t\tLocation as string,\n\t\tIsAllDayEvent as boolean,\n\t\tActivityDateTime as timestamp,\n\t\tActivityDate as timestamp,\n\t\tDurationInMinutes as integer,\n\t\tStartDateTime as timestamp,\n\t\tEndDateTime as timestamp,\n\t\tDescription as string,\n\t\tAccountId as string,\n\t\tOwnerId as string,\n\t\tCurrencyIsoCode as string,\n\t\tType as string,\n\t\tIsPrivate as boolean,\n\t\tShowAs as string,\n\t\tIsDeleted as boolean,\n\t\tIsChild as boolean,\n\t\tIsGroupEvent as boolean,\n\t\tGroupEventType as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tIsArchived as boolean,\n\t\tRecurrenceActivityId as string,\n\t\tIsRecurrence as boolean,\n\t\tRecurrenceStartDateTime as timestamp,\n\t\tRecurrenceEndDateOnly as timestamp,\n\t\tRecurrenceTimeZoneSidKey as string,\n\t\tRecurrenceType as string,\n\t\tRecurrenceInterval as integer,\n\t\tRecurrenceDayOfWeekMask as integer,\n\t\tRecurrenceDayOfMonth as integer,\n\t\tRecurrenceInstance as string,\n\t\tRecurrenceMonthOfYear as string,\n\t\tReminderDateTime as timestamp,\n\t\tIsReminderSet as boolean,\n\t\tEventSubtype as string,\n\t\tIsRecurrence2Exclusion as boolean,\n\t\tRecurrence2PatternText as string,\n\t\tRecurrence2PatternVersion as string,\n\t\tIsRecurrence2 as boolean,\n\t\tIsRecurrence2Exception as boolean,\n\t\tRecurrence2PatternStartDate as timestamp,\n\t\tRecurrence2PatternTimeZone as string,\n\t\tBrightPattern__SPRecordingOrTranscriptURL__c as string,\n\t\tCenter_Name__c as string,\n\t\tCompleted_Date__c as timestamp,\n\t\tExternal_ID__c as string,\n\t\tLead__c as string,\n\t\tMeeting_Platform_Id__c as string,\n\t\tMeeting_Platform__c as string,\n\t\tPerson_Account__c as string,\n\t\tRecording_Link__c as string,\n\t\tResult__c as string,\n\t\tSPRecordingOrTranscriptURL__c as string,\n\t\tService_Appointment__c as string,\n\t\tService_Territory_Caller_Id__c as string,\n\t\tAgent_Link__c as string,\n\t\tGuest_Link__c as string,\n\t\tOpportunity__c as string,\n\t\tAcceptedEventInviteeIds as string,\n\t\tDeclinedEventInviteeIds as string,\n\t\tEventWhoIds as string,\n\t\tUndecidedEventInviteeIds as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Id'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tId,\n\t\tWhoId,\n\t\tWhatId,\n\t\tWhoCount,\n\t\tWhatCount,\n\t\tSubject,\n\t\tLocation,\n\t\tIsAllDayEvent,\n\t\tActivityDateTime,\n\t\tActivityDate,\n\t\tDurationInMinutes,\n\t\tStartDateTime,\n\t\tEndDateTime,\n\t\tDescription,\n\t\tAccountId,\n\t\tOwnerId,\n\t\tCurrencyIsoCode,\n\t\tType,\n\t\tIsPrivate,\n\t\tShowAs,\n\t\tIsDeleted,\n\t\tIsChild,\n\t\tIsGroupEvent,\n\t\tGroupEventType,\n\t\tCreatedDate,\n\t\tCreatedById,\n\t\tLastModifiedDate,\n\t\tLastModifiedById,\n\t\tSystemModstamp,\n\t\tIsArchived,\n\t\tRecurrenceActivityId,\n\t\tIsRecurrence,\n\t\tRecurrenceStartDateTime,\n\t\tRecurrenceEndDateOnly,\n\t\tRecurrenceTimeZoneSidKey,\n\t\tRecurrenceType,\n\t\tRecurrenceInterval,\n\t\tRecurrenceDayOfWeekMask,\n\t\tRecurrenceDayOfMonth,\n\t\tRecurrenceInstance,\n\t\tRecurrenceMonthOfYear,\n\t\tReminderDateTime,\n\t\tIsReminderSet,\n\t\tEventSubtype,\n\t\tIsRecurrence2Exclusion,\n\t\tRecurrence2PatternText,\n\t\tRecurrence2PatternVersion,\n\t\tIsRecurrence2,\n\t\tIsRecurrence2Exception,\n\t\tRecurrence2PatternStartDate,\n\t\tRecurrence2PatternTimeZone,\n\t\tBrightPattern__SPRecordingOrTranscriptURL__c,\n\t\tCenter_Name__c,\n\t\tCompleted_Date__c,\n\t\tExternal_ID__c,\n\t\tLead__c,\n\t\tMeeting_Platform_Id__c,\n\t\tMeeting_Platform__c,\n\t\tPerson_Account__c,\n\t\tRecording_Link__c,\n\t\tResult__c,\n\t\tSPRecordingOrTranscriptURL__c,\n\t\tService_Appointment__c,\n\t\tService_Territory_Caller_Id__c,\n\t\tAgent_Link__c,\n\t\tGuest_Link__c,\n\t\tOpportunity__c,\n\t\tAcceptedEventInviteeIds,\n\t\tDeclinedEventInviteeIds,\n\t\tEventWhoIds,\n\t\tUndecidedEventInviteeIds\n\t)) ~> UpsertOdsEvent"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/FactMarketingActivity')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/Marketing"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ASA_ODS_MA_Television",
                                "type": "DatasetReference"
                            },
                            "name": "ODSTelevision"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimGeography",
                                "type": "DatasetReference"
                            },
                            "name": "DimGeography"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimAgency",
                                "type": "DatasetReference"
                            },
                            "name": "DimAgency"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimChannel",
                                "type": "DatasetReference"
                            },
                            "name": "DimChannel"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimFormat",
                                "type": "DatasetReference"
                            },
                            "name": "DimFormat"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimTactic",
                                "type": "DatasetReference"
                            },
                            "name": "DimTactic"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSource",
                                "type": "DatasetReference"
                            },
                            "name": "DimSource"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimPurpose",
                                "type": "DatasetReference"
                            },
                            "name": "DimPurpose"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCompany",
                                "type": "DatasetReference"
                            },
                            "name": "DimCompany"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimLocation",
                                "type": "DatasetReference"
                            },
                            "name": "DimLocation"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimLanguage",
                                "type": "DatasetReference"
                            },
                            "name": "DimLanguage"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimDate",
                                "type": "DatasetReference"
                            },
                            "name": "DimDate"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimAudience",
                                "type": "DatasetReference"
                            },
                            "name": "DimAudience"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimMethod",
                                "type": "DatasetReference"
                            },
                            "name": "DimMethod"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimMedium",
                                "type": "DatasetReference"
                            },
                            "name": "DimMedium"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimBudget",
                                "type": "DatasetReference"
                            },
                            "name": "DimBudget"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_MA_Targets",
                                "type": "DatasetReference"
                            },
                            "name": "ODSTargets"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimTimeOfDay",
                                "type": "DatasetReference"
                            },
                            "name": "DimTimeOfDay"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_FactMarketingActivity",
                                "type": "DatasetReference"
                            },
                            "name": "FactMarketing"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_FactMarketingActivity",
                                "type": "DatasetReference"
                            },
                            "name": "deleteMarketingActivity"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_FactMarketingActivity",
                                "type": "DatasetReference"
                            },
                            "name": "UpsertMarketing"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterLastUpload"
                        },
                        {
                            "name": "JoinAgency"
                        },
                        {
                            "name": "JoinFormat"
                        },
                        {
                            "name": "JoinTactic"
                        },
                        {
                            "name": "JoinSource"
                        },
                        {
                            "name": "JoinPurpose"
                        },
                        {
                            "name": "JoinCompany"
                        },
                        {
                            "name": "JoinLocation"
                        },
                        {
                            "name": "JoinLanguage"
                        },
                        {
                            "name": "CalculatedColumns"
                        },
                        {
                            "name": "JoinDate"
                        },
                        {
                            "name": "SelectDateKey"
                        },
                        {
                            "name": "CalculeUTCTime"
                        },
                        {
                            "name": "JoinAudience"
                        },
                        {
                            "name": "JoinMedium"
                        },
                        {
                            "name": "SelectFinalColumns"
                        },
                        {
                            "name": "FilterSourceSystem"
                        },
                        {
                            "name": "JoinMethod"
                        },
                        {
                            "name": "JoinChannel"
                        },
                        {
                            "name": "JoinBudget"
                        },
                        {
                            "name": "TransformDates"
                        },
                        {
                            "name": "JoinTimeOfDay"
                        },
                        {
                            "name": "DistincHour"
                        },
                        {
                            "name": "JoinTargets"
                        },
                        {
                            "name": "FilterSocialMedia"
                        },
                        {
                            "name": "FilterBudgetSocialMedia"
                        },
                        {
                            "name": "AllowDelete"
                        },
                        {
                            "name": "DiscountsAndFees"
                        },
                        {
                            "name": "FilterByMonth"
                        },
                        {
                            "name": "AllowUpsert"
                        },
                        {
                            "name": "NotExists"
                        },
                        {
                            "name": "SelectHashFactMark"
                        },
                        {
                            "name": "DateColumn"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer,\n\tFilePath as string\n}\nsource(output(\n\t\ttransactionid as string,\n\t\tcalendardateest as string,\n\t\tcalendartimeest as string,\n\t\tbroadcastdateest as string,\n\t\tlocalairtime as string,\n\t\tpurpose as string,\n\t\tmethod as string,\n\t\tchannel as string,\n\t\tmedium as string,\n\t\tcompany as string,\n\t\tlocation as string,\n\t\tbudgettype as string,\n\t\tbudgetname as string,\n\t\tsource as string,\n\t\taffiliate as string,\n\t\tstation as string,\n\t\tshow as string,\n\t\tcontenttype as string,\n\t\tcontent as string,\n\t\tcampaigntype as string,\n\t\tcampaign as string,\n\t\tisci as string,\n\t\tmasternumber as string,\n\t\ttfn as string,\n\t\tsourcecode as string,\n\t\tpromocode as string,\n\t\turl as string,\n\t\tagency as string,\n\t\tregion as string,\n\t\tdmacode as string,\n\t\tdmaname as string,\n\t\taudiene as string,\n\t\ttactic as string,\n\t\tplacement as string,\n\t\tformat as string,\n\t\tlanguage as string,\n\t\tgrossspend as string,\n\t\tnetspend as string,\n\t\t{impressions18-65} as string,\n\t\tgrp as string,\n\t\tspots as string,\n\t\tlogtype as string,\n\t\t{impressions35+} as string,\n\t\ttrp as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tFilePath as string,\n\t\tCADPrice as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> ODSTelevision\nsource(output(\n\t\tDigitZIPCode as string,\n\t\tLongitudeZIPCode as double,\n\t\tLatitudeZIPCode as double,\n\t\tZIPCodeClassification as string,\n\t\tNameOfCityOrORG as string,\n\t\tFIPSCode as integer,\n\t\tTwoLetterAbbrevForState as string,\n\t\tFullNameOfStateOrTerritory as string,\n\t\tFIPSCountyCode as integer,\n\t\tNameOfCounty as string,\n\t\tMetroStatisticalAreaCode as integer,\n\t\tSingleAreaCodeForZIPCode as integer,\n\t\tMultipleAreaCodesForZIPCode as string,\n\t\tTimeZoneForZIPCode as string,\n\t\tHrsDiff as integer,\n\t\tZIPCodeObeysDaylightSavings as boolean,\n\t\tUSPSPostOfficeName as string,\n\t\tUSPSAlternateNamesOfCity as string,\n\t\tLocalAlternateNamesOfCity as string,\n\t\tCleanCITYNameForGeocoding as string,\n\t\tCleanSTATENAMEForGeocoding as string,\n\t\tFIPSStateNumericCode as integer,\n\t\tName as string,\n\t\tDMADescription as string,\n\t\tDMAMarketRegion as string,\n\t\tDMACode as integer,\n\t\tDMANameNielsen as string,\n\t\tDMANameInternal as string,\n\t\tDMANameAlternate as string,\n\t\tGeographyKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimGeography\nsource(output(\n\t\tAgencyKey as integer,\n\t\tHash as string,\n\t\tAgencyName as string,\n\t\tAgencyAddress as string,\n\t\tAgencyDomain as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string,\n\t\tAgencyType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimAgency\nsource(output(\n\t\tChannelKey as integer,\n\t\tChannelName as string,\n\t\tChannelShortCode as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimChannel\nsource(output(\n\t\tFormatKey as integer,\n\t\tFormatName as string,\n\t\tFormatValue as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimFormat\nsource(output(\n\t\tTacticKey as integer,\n\t\tTacticName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimTactic\nsource(output(\n\t\tSourceKey as integer,\n\t\tSourceName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSource\nsource(output(\n\t\tPurposeKey as integer,\n\t\tPurposeName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimPurpose\nsource(output(\n\t\tCompanyKey as integer,\n\t\tCompanyName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCompany\nsource(output(\n\t\tLocationKey as integer,\n\t\tLocationName as string,\n\t\tShortCodeLocation as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimLocation\nsource(output(\n\t\tLanguageKey as integer,\n\t\tLanguageName as string,\n\t\tLanguageShortCode as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimLanguage\nsource(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tISODate as string,\n\t\tYearNumber as integer,\n\t\tYearQuarterNumber as integer,\n\t\tYearMonthNumber as integer,\n\t\tYearQuarterMonthNumber as integer,\n\t\tYearWeekNumber as integer,\n\t\tDateName as string,\n\t\tWeekName as string,\n\t\tWeekNameWithYear as string,\n\t\tWeekShortName as string,\n\t\tWeekShortNameWithYear as string,\n\t\tWeekNumber as integer,\n\t\tFirstDateOfWeek as date,\n\t\tLastDateOfWeek as date,\n\t\tDayOfWeek as integer,\n\t\tDayOfWeekName as string,\n\t\tIsWeekday as boolean,\n\t\tIsWeekend as boolean,\n\t\tMonthName as string,\n\t\tMonthNameWithYear as string,\n\t\tMonthShortName as string,\n\t\tMonthShortNameWithYear as string,\n\t\tMonthNumber as integer,\n\t\tFirstDateOfMonth as date,\n\t\tLastDateOfMonth as date,\n\t\tDayOfMonth as integer,\n\t\tDayOfMonthName as string,\n\t\tIsLastDayOfMonth as boolean,\n\t\tQuarterName as string,\n\t\tQuarterNameWithYear as string,\n\t\tQuarterShortName as string,\n\t\tQuarterShortNameWithYear as string,\n\t\tQuarterNumber as integer,\n\t\tFirstDateOfQuarter as date,\n\t\tLastDateOfQuarter as date,\n\t\tDayOfQuarter as integer,\n\t\tDayOfQuarterName as string,\n\t\tHalfName as string,\n\t\tHalfNameWithYear as string,\n\t\tHalfShortName as string,\n\t\tHalfShortNameWithYear as string,\n\t\tHalfNumber as integer,\n\t\tYearHalfNumber as integer,\n\t\tFirstDateOfHalf as date,\n\t\tLastDateOfHalf as date,\n\t\tDayOfHalf as integer,\n\t\tDayOfHalfName as string,\n\t\tYearName as string,\n\t\tYearShortName as string,\n\t\tFirstDateOfYear as date,\n\t\tLastDateOfYear as date,\n\t\tDayOfYear as integer,\n\t\tDayOfYearName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarYear as integer,\n\t\tCalendarYearMonth as string,\n\t\tCalendarYearQtr as string,\n\t\tFiscalYear as integer,\n\t\tFiscalWeek as integer,\n\t\tFiscalPeriod as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalQuarter as integer,\n\t\tFiscalYearFiscalWeek as integer,\n\t\tFiscalYearFiscalPeriod as integer,\n\t\tFiscalYearFiscalMonth as integer,\n\t\tFiscalYearFiscalQuarter as integer,\n\t\tFiscalYearFiscalQuarterFiscalMonth as integer,\n\t\tFiscalYearName as string,\n\t\tFiscalYearLongName as string,\n\t\tFiscalYearShortName as string,\n\t\tFiscalQuarterName as string,\n\t\tFiscalQuarterLongName as string,\n\t\tFiscalQuarterNameWithYear as string,\n\t\tFiscalQuarterLongNameWithYear as string,\n\t\tFiscalQuarterShortName as string,\n\t\tFiscalQuarterShortNameWithYear as string,\n\t\tFiscalMonthName as string,\n\t\tFiscalMonthNameWithYear as string,\n\t\tFiscalMonthShortName as string,\n\t\tFiscalMonthShortNameWithYear as string,\n\t\tFiscalMonthCalendarShortName as string,\n\t\tFiscalMonthCalendarShortNameWithYear as string,\n\t\tFiscalWeekName as string,\n\t\tFiscalWeekLongName as string,\n\t\tFiscalWeekNameWithYear as string,\n\t\tFiscalWeekLongNameWithYear as string,\n\t\tFiscalWeekShortName as string,\n\t\tFiscalWeekShortNameWithYear as string,\n\t\tFiscalPeriodName as string,\n\t\tFiscalPeriodLongName as string,\n\t\tFiscalPeriodNameWithYear as string,\n\t\tFiscalPeriodLongNameWithYear as string,\n\t\tFiscalPeriodShortName as string,\n\t\tFiscalPeriodShortNameWithYear as string,\n\t\tCummWorkdays as integer,\n\t\tMonthWorkdays as integer,\n\t\tMonthWorkdaysTotal as integer,\n\t\tIsHoliday as boolean,\n\t\tMonthOfQuarter as integer,\n\t\tBroadcastYearBroadcastQuarter as integer,\n\t\tBroadcastYearBroadcastMonth as integer,\n\t\tBroadcastYearBroadcastWeek as integer,\n\t\tBroadcastYearQtrMonthWeekDay as integer,\n\t\tBroadcastYearQtrMonth as integer,\n\t\tBroadcastYearShortName as string,\n\t\tBroadcastYearLongName as string,\n\t\tBroadcastYeartName as string,\n\t\tBroadcastQuarterName as string,\n\t\tBroadcastWeekName as string,\n\t\tBroadcastDayName as string,\n\t\tmsrepl_tran_version as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimDate\nsource(output(\n\t\tAudienceKey as integer,\n\t\tAudienceName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimAudience\nsource(output(\n\t\tMethodKey as integer,\n\t\tMethodName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimMethod\nsource(output(\n\t\tMediumKey as integer,\n\t\tMediumName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimMedium\nsource(output(\n\t\tBudgetKey as integer,\n\t\tBudgetName as string,\n\t\tBudgetType as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimBudget\nsource(output(\n\t\tDate as string,\n\t\tMonth as string,\n\t\tBudgetType as string,\n\t\tAgency as string,\n\t\tChannel as string,\n\t\tMedium as string,\n\t\tSource as string,\n\t\tBudget as string,\n\t\tLocation as string,\n\t\tBudgetAmount as string,\n\t\tTaregetLeads as string,\n\t\tCurrencyConversion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSTargets\nsource(output(\n\t\tTimeOfDayKey as integer,\n\t\tTime as string,\n\t\tTime24 as string,\n\t\tHour as integer,\n\t\tHourName as string,\n\t\tMinute as integer,\n\t\tMinuteKey as integer,\n\t\tMinuteName as string,\n\t\tSecond as integer,\n\t\tHour24 as integer,\n\t\tAM as string,\n\t\tTime24HM as string,\n\t\tHourC as integer,\n\t\tMinuteC as integer,\n\t\t{30MinuteInterval} as integer,\n\t\tDayPart as string,\n\t\tTimeNumber as integer,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimTimeOfDay\nsource(output(\n\t\tFactDateKey as integer,\n\t\tFactDate as timestamp,\n\t\tMarketingActivityDate as date,\n\t\tMarketingActivityTime as string,\n\t\tLocalAirTime as string,\n\t\tTransactionId as integer,\n\t\tAgencyName as string,\n\t\tFile as string,\n\t\tBudgetAmount as decimal(19,4),\n\t\tGrossSpend as decimal(19,4),\n\t\tDiscount as decimal(19,4),\n\t\tFees as decimal(19,4),\n\t\tNetSpend as decimal(19,4),\n\t\tSpotDate as date,\n\t\tSpots as integer,\n\t\tTelephone as string,\n\t\tSourceCode as string,\n\t\tPromoCode as string,\n\t\tUrl as string,\n\t\t{Impressions18-65} as integer,\n\t\tAffiliate as string,\n\t\tStation as string,\n\t\tShow as string,\n\t\tContentType as string,\n\t\tContent as string,\n\t\tIsci as string,\n\t\tMasterNumber as string,\n\t\tDMAkey as integer,\n\t\tDMA as integer,\n\t\tAgencyKey as integer,\n\t\tAgency as string,\n\t\tAudienceKey as integer,\n\t\tAudience as string,\n\t\tChannelKey as integer,\n\t\tChannel as string,\n\t\tFormatKey as integer,\n\t\tFormat as string,\n\t\tTacticKey as integer,\n\t\tTactic as string,\n\t\tSourceKey as integer,\n\t\tSource as string,\n\t\tMediumKey as integer,\n\t\tMedium as string,\n\t\tPurposeKey as integer,\n\t\tPurpose as string,\n\t\tMethodKey as integer,\n\t\tMethod as string,\n\t\tBudgetTypeKey as integer,\n\t\tBudgetName as string,\n\t\tBudgetType as string,\n\t\tCampaignKey as integer,\n\t\tCampaign as string,\n\t\tCompanyKey as integer,\n\t\tCompany as string,\n\t\tLocationKey as integer,\n\t\tLocation as string,\n\t\tLanguageKey as integer,\n\t\tLanguage as string,\n\t\tNumberOfLeads as integer,\n\t\tNumberOfLeadsTarget as integer,\n\t\tNumertOfOpportunities as integer,\n\t\tNumberOfOpportunitiesTarget as integer,\n\t\tNumberOfSales as integer,\n\t\tNumberOfSalesTarget as integer,\n\t\tDWH_LoadDate as timestamp,\n\t\tLogType as string,\n\t\tHash as string,\n\t\tImpressions as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> FactMarketing\nODSTelevision filter(iif($DaysToLoad == -1, like(FilePath, concat('%', $FilePath, '%')), toDate(DWH_LoadDate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(DWH_LoadDate) <= addDays(toDate(currentTimestamp()), -1))) ~> FilterLastUpload\nJoinTimeOfDay, DimAgency join(lower(trim(split(ODSTelevision@agency, ' ')[1])) == lower(trim(AgencyName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAgency\nJoinAgency, DimFormat join(format == FormatValue,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinFormat\nJoinFormat, DimTactic join(lower(tactic) == lower(TacticName),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTactic\nJoinTactic, FilterSourceSystem join(initCap(trim(ODSTelevision@source)) == SourceName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSource\nJoinSource, DimPurpose join(initCap(trim(purpose)) == PurposeName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPurpose\nJoinPurpose, DimCompany join(initCap(trim(company)) == CompanyName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCompany\nJoinCompany, FilterSocialMedia join(initCap(trim(ODSTelevision@location)) == LocationName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLocation\nJoinMethod, DimLanguage join(initCap(trim(language)) == initCap(trim(LanguageShortCode)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLanguage\nJoinBudget derive(FactDateKey = DateKey,\n\t\tFactDate = CalendarDateTimeUTC,\n\t\tMarketingActivityDate = toDate(CalendarDateTimeUTC),\n\t\tMarketingActivityTime = split(toString(CalendarDateTimeUTC), ' ')[2],\n\t\tLocalAirTime = localairtime,\n\t\tTransactionId = toInteger(transactionid),\n\t\tAgencyName = initCap(AgencyName),\n\t\tFile = FilePath,\n\t\tBudgetAmount = toDecimal(BudgetAmount),\n\t\tGrossSpend = case(lower(AgencyName) == 'intermedia', toDecimal(netspend)*(1.1), \n      like(lower(AgencyName), '%kingstar%'),  (toDecimal(netspend)/0.95), toDecimal(netspend)),\n\t\tNetSpend = toDecimal(netspend),\n\t\tSpotDate = toDate(null()),\n\t\tSpots = toInteger(spots),\n\t\tTelephone = toString(null()),\n\t\tSourceCode = sourcecode,\n\t\tPromoCode = promocode,\n\t\tUrl = url,\n\t\t{Impressions18-65} = toInteger({impressions18-65}),\n\t\tAffiliate = affiliate,\n\t\tStation = initCap(station),\n\t\tShow = initCap(show),\n\t\tContentType = initCap(contenttype),\n\t\tContent = initCap(content),\n\t\tIsci = isci,\n\t\tMasterNumber = masternumber,\n\t\tDMAkey = iifNull(toInteger(null()), -1),\n\t\tAgencyKey = iifNull(AgencyKey,-1, AgencyKey),\n\t\tAudienceKey = iifNull(AudienceKey, -1, AudienceKey),\n\t\tChannelKey = iifNull(ChannelKey, -1, ChannelKey),\n\t\tFormatKey = iifNull(FormatKey, -1, FormatKey),\n\t\tTacticKey = iifNull(TacticKey, -1, TacticKey),\n\t\tSourceKey = iifNull(SourceKey, -1, SourceKey),\n\t\tMediumKey = iifNull(MediumKey, -1, MediumKey),\n\t\tPurposeKey = iifNull(PurposeKey, -1,PurposeKey),\n\t\tMethodKey = iifNull(MethodKey, -1, MethodKey),\n\t\tBudgetTypeKey = iifNull(BudgetKey, -1, BudgetKey),\n\t\tCampaignKey = iifNull(toInteger(null()), -1),\n\t\tLocationKey = iifNull(LocationKey, -1, LocationKey),\n\t\tLanguageKey = iifNull(LanguageKey, -1, LanguageKey),\n\t\tNumberOfLeads = toInteger(null()),\n\t\tNumberOfLeadsTarget = TaregetLeads,\n\t\tNumertOfOpportunities = toInteger(null()),\n\t\tNumberOfOpportunitiesTarget = toInteger(null()),\n\t\tNumberOfSales = toInteger(null()),\n\t\tNumberOfSalesTarget = toInteger(null()),\n\t\tDWH_LoadDate = ODSTelevision@DWH_LoadDate,\n\t\tAgency = initCap(trim(ODSTelevision@agency)),\n\t\tDMA = -1,\n\t\tAudience = initCap(trim(audiene)),\n\t\tChannel = initCap(trim(ODSTelevision@channel)),\n\t\tFormat = initCap(trim(format)),\n\t\tTactict = initCap(trim(tactic)),\n\t\tSource = initCap(trim(sourcecode)),\n\t\tMedium = initCap(trim(ODSTelevision@medium)),\n\t\tPurpose = initCap(trim(purpose)),\n\t\tMethod = initCap(trim(method)),\n\t\tBudgetName = initCap(trim(ODSTelevision@budgetname)),\n\t\tBudgetType = initCap(trim(ODSTelevision@budgettype)),\n\t\tCampaign = initCap(trim(campaign)),\n\t\tLocation = initCap(trim(ODSTelevision@location)),\n\t\tLanguage = initCap(trim(language)),\n\t\tCompany = initCap(company),\n\t\tLogType = logtype,\n\t\tHash = sha2(256, concat(transactionid, ODSTelevision@agency, calendardateest, calendartimeest)),\n\t\tCompanyKey = coalesce(CompanyKey, -1)) ~> CalculatedColumns\nCalculeUTCTime, SelectDateKey join(toDate(CalendarDateTimeUTC) == FullDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDate\nDimDate select(mapColumn(\n\t\tDateKey,\n\t\tFullDate\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDateKey\nJoinLanguage derive(CalendarDateTimeUTC = toTimestamp(concat(calendardateest,' ', Time24HM, ':00'))) ~> CalculeUTCTime\nJoinDate, DimAudience join(initCap(trim(audiene)) == AudienceName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAudience\nJoinAudience, DimMedium join(initCap(trim(ODSTelevision@medium)) == MediumName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMedium\nDiscountsAndFees select(mapColumn(\n\t\teach(match(stream=='DiscountsAndFees'||stream=='CalculatedColumns'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalColumns\nDimSource filter(SourceSystem == 'Marketing') ~> FilterSourceSystem\nJoinChannel, DimMethod join(initCap(trim(method)) == MethodName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMethod\nJoinLocation, DimChannel join(sha2(256, concat(initCap(trim(ODSTelevision@channel)),'TV')) == DimChannel@Hash,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinChannel\nJoinMedium, FilterBudgetSocialMedia join(sha2(256, concat(initCap(trim(ODSTelevision@budgetname)), initCap(trim(ODSTelevision@budgettype)))) == DimBudget@Hash,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinBudget\nFilterLastUpload derive(CalendarTimeESTMinute = iif(instr(lower(calendartimeest), 'pm') != 0 || instr(lower(calendartimeest), 'am') != 0, split(split(trim(calendartimeest), ':')[2], ' ')[1], 'na'),\n\t\tCalendarTimeESTHour = iif(instr(lower(calendartimeest), 'pm') != 0 || instr(lower(calendartimeest), 'am') != 0, split(trim(calendartimeest), ':')[1], 'na'),\n\t\tCalendarTimeESTName = split(calendartimeest, ' ')[2],\n\t\tcalendardateest = case(instr(calendardateest, '/') != 0 && lower(trim(agency)) != 'cannella', toString(toDate(calendardateest, 'MM/dd/yyyy')),\nlower(trim(agency)) == 'cannella', toString(toDate(calendardateest, 'yyyy/MM/dd')),\n calendardateest),\n\t\tcalendartimeest = iif(length(trim(calendartimeest)) ==8, trim(calendartimeest), concat('0',trim(calendartimeest))),\n\t\tgrossspend = replace(replace(grossspend, '$', ''), ',', ''),\n\t\tnetspend = replace(replace(netspend, '$', ''), ',', '')) ~> TransformDates\nJoinTargets, DistincHour join(lower(trim(calendartimeest)) == lower(trim(MinuteName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTimeOfDay\nDimTimeOfDay aggregate(groupBy(MinuteName,\n\t\tTime24HM),\n\teach(match(name!='MinuteName'&&name!='Time24HM'), $$ = first($$))) ~> DistincHour\nTransformDates, ODSTargets join(lower(trim(ODSTelevision@budgettype)) == lower(trim(ODSTargets@BudgetType))\n\t&& month(toDate(calendardateest)) == month(toDate(Date))\n\t&& year(toDate(calendardateest)) == year(toDate(Date))\n\t&& lower(trim(ODSTelevision@agency)) == lower(trim(ODSTargets@Agency))\n\t&& lower(trim(ODSTelevision@channel)) == lower(trim(ODSTargets@Channel))\n\t&& lower(trim(ODSTelevision@medium)) == lower(trim(ODSTargets@Medium))\n\t&& lower(trim(budgetname)) == lower(trim(Budget))\n\t&& lower(trim(ODSTelevision@location)) == lower(trim(ODSTargets@Location)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTargets\nDimLocation filter(Source  == 'SocialMedia') ~> FilterSocialMedia\nDimBudget filter(SourceSystem == 'Social Media') ~> FilterBudgetSocialMedia\nNotExists alterRow(deleteIf(case(like(lower($FilePath),'%airings%'),lower(AgencyName)==lower('Cannella'),like(lower($FilePath),'%hrcb%'),(lower(AgencyName)==lower('Intermedia')&&lower(Medium)!='ott'),like(lower($FilePath),'%havas%'),lower(AgencyName)==lower('Havas')))) ~> AllowDelete\nCalculatedColumns derive(Discount = (toDecimal(CalculatedColumns@GrossSpend)/iifNull(toDecimal(CADPrice), 1))*0.15*-1,\n\t\tFees = (toDecimal(CalculatedColumns@GrossSpend)/iifNull(toDecimal(CADPrice), 1))*0.10) ~> DiscountsAndFees\nFactMarketing filter((month(FactDate) == month(currentTimestamp()) ||  month(FactDate) == (month(currentTimestamp())-1) ) && year(FactDate) == year(currentTimestamp())) ~> FilterByMonth\nSelectFinalColumns alterRow(upsertIf(true())) ~> AllowUpsert\nSelectHashFactMark, SelectFinalColumns exists(SelectHashFactMark@Hash == SelectFinalColumns@Hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExists\nFilterByMonth select(mapColumn(\n\t\tHash,\n\t\tAgencyName,\n\t\tMedium\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectHashFactMark\nODSTargets derive(Date = month(toDate(Date))) ~> DateColumn\nAllowDelete sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['Hash'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHash\n\t)) ~> deleteMarketingActivity\nAllowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Hash'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFactDateKey,\n\t\tFactDate,\n\t\tMarketingActivityDate,\n\t\tMarketingActivityTime,\n\t\tLocalAirTime,\n\t\tTransactionId,\n\t\tAgencyName,\n\t\tFile,\n\t\tBudgetAmount,\n\t\tGrossSpend,\n\t\tDiscount,\n\t\tFees,\n\t\tNetSpend,\n\t\tSpotDate,\n\t\tSpots,\n\t\tTelephone,\n\t\tSourceCode,\n\t\tPromoCode,\n\t\tUrl,\n\t\t{Impressions18-65},\n\t\tAffiliate,\n\t\tStation,\n\t\tShow,\n\t\tContentType,\n\t\tContent,\n\t\tIsci,\n\t\tMasterNumber,\n\t\tDMAkey,\n\t\tDMA,\n\t\tAgencyKey,\n\t\tAgency,\n\t\tAudienceKey,\n\t\tAudience,\n\t\tChannelKey,\n\t\tChannel,\n\t\tFormatKey,\n\t\tFormat,\n\t\tTacticKey,\n\t\tTactic = Tactict,\n\t\tSourceKey,\n\t\tSource,\n\t\tMediumKey,\n\t\tMedium,\n\t\tPurposeKey,\n\t\tPurpose,\n\t\tMethodKey,\n\t\tMethod,\n\t\tBudgetTypeKey,\n\t\tBudgetName,\n\t\tBudgetType,\n\t\tCampaignKey,\n\t\tCampaign,\n\t\tCompanyKey,\n\t\tCompany,\n\t\tLocationKey,\n\t\tLocation,\n\t\tLanguageKey,\n\t\tLanguage,\n\t\tNumberOfLeads,\n\t\tNumberOfLeadsTarget,\n\t\tNumertOfOpportunities,\n\t\tNumberOfOpportunitiesTarget,\n\t\tNumberOfSales,\n\t\tNumberOfSalesTarget,\n\t\tDWH_LoadDate,\n\t\tLogType,\n\t\tHash\n\t)) ~> UpsertMarketing"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_AgentActivity')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "BrightPattern/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_BP_AgentActivity",
                                "type": "DatasetReference"
                            },
                            "name": "DLAgentActivity"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_BP_AgentsActivity",
                                "type": "DatasetReference"
                            },
                            "name": "ODSCallDetail"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "ChangeColumnFormat"
                        }
                    ],
                    "script": "source(output(\n\t\tid as binary,\n\t\tpkid as integer,\n\t\tactivity_id as binary,\n\t\tlogin_id as string,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tteam_name as string,\n\t\tagent_country as string,\n\t\tagent_city as string,\n\t\trank as string,\n\t\tagg_run_id as binary,\n\t\tstart_time as timestamp,\n\t\tactivity as string,\n\t\tduration as long,\n\t\tdetail as string,\n\t\tpending_time as long,\n\t\ttalk_time as long,\n\t\thold_time as long,\n\t\theld as long,\n\t\tmax_hold as long,\n\t\tacw_time as long,\n\t\tservice_name as string,\n\t\torigination_number as string,\n\t\tdestination_number as string,\n\t\texternal_number as string,\n\t\tother_party_phone_type as string,\n\t\tdisposition as string,\n\t\tagent_disposition_name as string,\n\t\tagent_disposition_code as integer,\n\t\tagent_disposition_notes as string,\n\t\tsession_id as binary,\n\t\tmedia_type as string,\n\t\tcase_number as string,\n\t\temail_completion_time as long,\n\t\tworkitem_id as string,\n\t\tcall_detail_id as binary,\n\t\thas_screen_recording as boolean,\n\t\tcobrowsing as boolean,\n\t\tcustom1 as string,\n\t\tcustom2 as string,\n\t\tcustom3 as string,\n\t\tcustom4 as string,\n\t\tcustom5 as string,\n\t\tip_address as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLAgentActivity\nDLAgentActivity derive(id = toBinary(id),\n\t\tactivity_id = toBinary(activity_id),\n\t\tagg_run_id = toBinary(agg_run_id),\n\t\tcall_detail_id = toBinary(call_detail_id),\n\t\tsession_id = toBinary(session_id)) ~> ChangeColumnFormat\nChangeColumnFormat sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as binary,\n\t\tpkid as integer,\n\t\tactivity_id as binary,\n\t\tlogin_id as string,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tteam_name as string,\n\t\tagent_country as string,\n\t\tagent_city as string,\n\t\trank as string,\n\t\tagg_run_id as binary,\n\t\tstart_time as timestamp,\n\t\tactivity as string,\n\t\tduration as long,\n\t\tdetail as string,\n\t\tpending_time as long,\n\t\ttalk_time as long,\n\t\thold_time as long,\n\t\theld as long,\n\t\tmax_hold as long,\n\t\tacw_time as long,\n\t\tservice_name as string,\n\t\torigination_number as string,\n\t\tdestination_number as string,\n\t\texternal_number as string,\n\t\tother_party_phone_type as string,\n\t\tdisposition as string,\n\t\tagent_disposition_name as string,\n\t\tagent_disposition_code as integer,\n\t\tagent_disposition_notes as string,\n\t\tsession_id as binary,\n\t\tmedia_type as string,\n\t\tcase_number as string,\n\t\temail_completion_time as long,\n\t\tworkitem_id as string,\n\t\tcall_detail_id as binary,\n\t\thas_screen_recording as boolean,\n\t\tcobrowsing as boolean,\n\t\tcustom1 as string,\n\t\tcustom2 as string,\n\t\tcustom3 as string,\n\t\tcustom4 as string,\n\t\tcustom5 as string,\n\t\tip_address as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tid,\n\t\tpkid,\n\t\tactivity_id,\n\t\tlogin_id,\n\t\tfirst_name,\n\t\tlast_name,\n\t\tteam_name,\n\t\tagent_country,\n\t\tagent_city,\n\t\trank,\n\t\tagg_run_id,\n\t\tstart_time,\n\t\tactivity,\n\t\tduration,\n\t\tdetail,\n\t\tpending_time,\n\t\ttalk_time,\n\t\thold_time,\n\t\theld,\n\t\tmax_hold,\n\t\tacw_time,\n\t\tservice_name,\n\t\torigination_number,\n\t\tdestination_number,\n\t\texternal_number,\n\t\tother_party_phone_type,\n\t\tdisposition,\n\t\tagent_disposition_name,\n\t\tagent_disposition_code,\n\t\tagent_disposition_notes,\n\t\tsession_id,\n\t\tmedia_type,\n\t\tcase_number,\n\t\temail_completion_time,\n\t\tworkitem_id,\n\t\tcall_detail_id,\n\t\thas_screen_recording,\n\t\tcobrowsing,\n\t\tcustom1,\n\t\tcustom2,\n\t\tcustom3,\n\t\tcustom4,\n\t\tcustom5,\n\t\tip_address\n\t)) ~> ODSCallDetail"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_Agents')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "BrightPattern/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_BP_Agents",
                                "type": "DatasetReference"
                            },
                            "name": "DLAgents"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_BP_Agents",
                                "type": "DatasetReference"
                            },
                            "name": "ODSAgents"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AllowUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tlogin_id as string,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tteam_name as string,\n\t\tagent_country as string,\n\t\tagent_city as string,\n\t\trank as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLAgents\nDLAgents alterRow(upsertIf(true())) ~> AllowUpsert\nAllowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tlogin_id as string,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tteam_name as string,\n\t\tagent_country as string,\n\t\tagent_city as string,\n\t\trank as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['login_id'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSAgents"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_AgentsDisposition')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "BrightPattern/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_BP_AgentsDisposition",
                                "type": "DatasetReference"
                            },
                            "name": "DLAgentsDisposition"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_BP_AgentsDisposition",
                                "type": "DatasetReference"
                            },
                            "name": "ODSAgentsDisposition"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AllowUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tdisposition_name as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLAgentsDisposition\nDLAgentsDisposition alterRow(upsertIf(true())) ~> AllowUpsert\nAllowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdisposition_name as string,\n\t\tstart_time as timestamp,\n\t\tend_time as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['disposition_name'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdisposition_name,\n\t\tstart_time,\n\t\tend_time\n\t)) ~> ODSAgentsDisposition"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_BD_CallDetail')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "BrightPattern/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_BP_CallDetail",
                                "type": "DatasetReference"
                            },
                            "name": "DLCallDetail"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_PB_CallDetail",
                                "type": "DatasetReference"
                            },
                            "name": "ODSCallDetail"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "ChangeColumnFormat"
                        }
                    ],
                    "script": "source(output(\n\t\tid as binary,\n\t\tpkid as integer,\n\t\tagg_run_id as binary,\n\t\tmedia_type as string,\n\t\tstart_time as timestamp,\n\t\tivr_time as long,\n\t\tqueue_time as long,\n\t\tpending_time as long,\n\t\ttalk_time as long,\n\t\thold_time as long,\n\t\theld as long,\n\t\tmax_hold as long,\n\t\tacw_time as long,\n\t\tduration as long,\n\t\tservice_name as string,\n\t\tscenario_name as string,\n\t\ttrunk_description as string,\n\t\tcaller_login_id as string,\n\t\tcallee_login_id as string,\n\t\tcaller_phone_type as string,\n\t\tcallee_phone_type as string,\n\t\tcaller_rank as string,\n\t\tcallee_rank as string,\n\t\tfrom_phone as string,\n\t\toriginal_destination_phone as string,\n\t\tconnected_to_phone as string,\n\t\ttransferred_from_phone as string,\n\t\tdisposition as string,\n\t\tagent_disposition_name as string,\n\t\tagent_disposition_code as integer,\n\t\tagent_disposition_notes as string,\n\t\treported_problem as string,\n\t\tglobal_interaction_id as binary,\n\t\tinitial_call_id as binary,\n\t\tinitial_start_time as timestamp,\n\t\tinitial_service_name as string,\n\t\tinitial_caller_phone_type as string,\n\t\tinitial_callee_phone_type as string,\n\t\tinitial_from_phone as string,\n\t\tinitial_original_destination_phone as string,\n\t\tinitial_connected_to_phone as string,\n\t\tflagged as boolean,\n\t\tvoice_signature as boolean,\n\t\taccount_number as string,\n\t\tcaller_first_name as string,\n\t\tcallee_first_name as string,\n\t\tcaller_last_name as string,\n\t\tcallee_last_name as string,\n\t\tcaller_city as string,\n\t\tcallee_city as string,\n\t\tcaller_country as string,\n\t\tcallee_country as string,\n\t\temail_id as string,\n\t\temail_subject as string,\n\t\temail_language as string,\n\t\tcase_id as string,\n\t\tthread_id as string,\n\t\tcase_number as string,\n\t\tcase_search_result as string,\n\t\tresponse_email_id as string,\n\t\tcaller_monitored as boolean,\n\t\tcallee_monitored as boolean,\n\t\tcaller_interaction_step_id as binary,\n\t\tcallee_interaction_step_id as binary,\n\t\tcaller_cpa_rtp_server_id as binary,\n\t\tcaller_cpa_recording_url as string,\n\t\tcaller_encryption_key_id as binary,\n\t\tcallee_cpa_rtp_server_id as binary,\n\t\tcallee_cpa_recording_url as string,\n\t\tcallee_encryption_key_id as binary,\n\t\tcaller_has_screen_recording as boolean,\n\t\tcallee_has_screen_recording as boolean,\n\t\tcaller_interaction_id as binary,\n\t\tcallee_interaction_id as binary,\n\t\tcaller_has_voice_recording as boolean,\n\t\tcallee_has_voice_recording as boolean,\n\t\tvoice_recording_banned as boolean,\n\t\tmonitoring_banned as boolean,\n\t\temail_detail_id as string,\n\t\temail_completion_time as long,\n\t\temail_kb_article_id as string,\n\t\tcaller_team_name as string,\n\t\tcallee_team_name as string,\n\t\tdetail_record_count as integer,\n\t\tin_service_level as string,\n\t\tcustom1 as string,\n\t\tcustom2 as string,\n\t\tcustom3 as string,\n\t\tcustom4 as string,\n\t\tcustom5 as string,\n\t\tsentiment as decimal(38,18),\n\t\terased_voice_recording as boolean,\n\t\terased_voice_signature as boolean,\n\t\terased_chat_transcript as boolean,\n\t\terased_email as boolean,\n\t\terased_screen_recording as boolean,\n\t\tewt as long,\n\t\tcobrowsing as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLCallDetail\nDLCallDetail derive(global_interaction_id = toBinary(global_interaction_id),\n\t\tid = toBinary(id),\n\t\tinitial_call_id = toBinary(initial_call_id),\n\t\tcaller_interaction_step_id = toBinary(caller_interaction_step_id),\n\t\tcallee_interaction_step_id = toBinary(callee_interaction_step_id),\n\t\tcaller_cpa_rtp_server_id = toBinary(caller_cpa_rtp_server_id),\n\t\tcaller_encryption_key_id = toBinary(caller_encryption_key_id),\n\t\tcallee_cpa_rtp_server_id = toBinary(callee_cpa_rtp_server_id),\n\t\tcallee_encryption_key_id = toBinary(callee_encryption_key_id),\n\t\tcaller_interaction_id = toBinary(caller_interaction_id),\n\t\tcallee_interaction_id = toBinary(callee_interaction_id),\n\t\tagg_run_id = toBinary(agg_run_id)) ~> ChangeColumnFormat\nChangeColumnFormat sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tid as binary,\n\t\tpkid as integer,\n\t\tagg_run_id as binary,\n\t\tmedia_type as string,\n\t\tstart_time as timestamp,\n\t\tivr_time as long,\n\t\tqueue_time as long,\n\t\tpending_time as long,\n\t\ttalk_time as long,\n\t\thold_time as long,\n\t\theld as long,\n\t\tmax_hold as long,\n\t\tacw_time as long,\n\t\tduration as long,\n\t\tservice_name as string,\n\t\tscenario_name as string,\n\t\ttrunk_description as string,\n\t\tcaller_login_id as string,\n\t\tcallee_login_id as string,\n\t\tcaller_phone_type as string,\n\t\tcallee_phone_type as string,\n\t\tcaller_rank as string,\n\t\tcallee_rank as string,\n\t\tfrom_phone as string,\n\t\toriginal_destination_phone as string,\n\t\tconnected_to_phone as string,\n\t\ttransferred_from_phone as string,\n\t\tdisposition as string,\n\t\tagent_disposition_name as string,\n\t\tagent_disposition_code as integer,\n\t\tagent_disposition_notes as string,\n\t\treported_problem as string,\n\t\tglobal_interaction_id as binary,\n\t\tinitial_call_id as binary,\n\t\tinitial_start_time as timestamp,\n\t\tinitial_service_name as string,\n\t\tinitial_caller_phone_type as string,\n\t\tinitial_callee_phone_type as string,\n\t\tinitial_from_phone as string,\n\t\tinitial_original_destination_phone as string,\n\t\tinitial_connected_to_phone as string,\n\t\tflagged as boolean,\n\t\tvoice_signature as boolean,\n\t\taccount_number as string,\n\t\tcaller_first_name as string,\n\t\tcallee_first_name as string,\n\t\tcaller_last_name as string,\n\t\tcallee_last_name as string,\n\t\tcaller_city as string,\n\t\tcallee_city as string,\n\t\tcaller_country as string,\n\t\tcallee_country as string,\n\t\temail_id as string,\n\t\temail_subject as string,\n\t\temail_language as string,\n\t\tcase_id as string,\n\t\tthread_id as string,\n\t\tcase_number as string,\n\t\tcase_search_result as string,\n\t\tresponse_email_id as string,\n\t\tcaller_monitored as boolean,\n\t\tcallee_monitored as boolean,\n\t\tcaller_interaction_step_id as binary,\n\t\tcallee_interaction_step_id as binary,\n\t\tcaller_cpa_rtp_server_id as binary,\n\t\tcaller_cpa_recording_url as string,\n\t\tcaller_encryption_key_id as binary,\n\t\tcallee_cpa_rtp_server_id as binary,\n\t\tcallee_cpa_recording_url as string,\n\t\tcallee_encryption_key_id as binary,\n\t\tcaller_has_screen_recording as boolean,\n\t\tcallee_has_screen_recording as boolean,\n\t\tcaller_interaction_id as binary,\n\t\tcallee_interaction_id as binary,\n\t\tcaller_has_voice_recording as boolean,\n\t\tcallee_has_voice_recording as boolean,\n\t\tvoice_recording_banned as boolean,\n\t\tmonitoring_banned as boolean,\n\t\temail_detail_id as string,\n\t\temail_completion_time as long,\n\t\temail_kb_article_id as string,\n\t\tcaller_team_name as string,\n\t\tcallee_team_name as string,\n\t\tdetail_record_count as integer,\n\t\tin_service_level as string,\n\t\tcustom1 as string,\n\t\tcustom2 as string,\n\t\tcustom3 as string,\n\t\tcustom4 as string,\n\t\tcustom5 as string,\n\t\tsentiment as decimal(38,18),\n\t\terased_voice_recording as boolean,\n\t\terased_voice_signature as boolean,\n\t\terased_chat_transcript as boolean,\n\t\terased_email as boolean,\n\t\terased_screen_recording as boolean,\n\t\tewt as long,\n\t\tcobrowsing as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tid,\n\t\tpkid,\n\t\tagg_run_id,\n\t\tmedia_type,\n\t\tstart_time,\n\t\tivr_time,\n\t\tqueue_time,\n\t\tpending_time,\n\t\ttalk_time,\n\t\thold_time,\n\t\theld,\n\t\tmax_hold,\n\t\tacw_time,\n\t\tduration,\n\t\tservice_name,\n\t\tscenario_name,\n\t\ttrunk_description,\n\t\tcaller_login_id,\n\t\tcallee_login_id,\n\t\tcaller_phone_type,\n\t\tcallee_phone_type,\n\t\tcaller_rank,\n\t\tcallee_rank,\n\t\tfrom_phone,\n\t\toriginal_destination_phone,\n\t\tconnected_to_phone,\n\t\ttransferred_from_phone,\n\t\tdisposition,\n\t\tagent_disposition_name,\n\t\tagent_disposition_code,\n\t\tagent_disposition_notes,\n\t\treported_problem,\n\t\tinitial_start_time,\n\t\tinitial_service_name,\n\t\tinitial_caller_phone_type,\n\t\tinitial_callee_phone_type,\n\t\tinitial_from_phone,\n\t\tinitial_original_destination_phone,\n\t\tinitial_connected_to_phone,\n\t\tflagged,\n\t\tvoice_signature,\n\t\taccount_number,\n\t\tcaller_first_name,\n\t\tcallee_first_name,\n\t\tcaller_last_name,\n\t\tcallee_last_name,\n\t\tcaller_city,\n\t\tcallee_city,\n\t\tcaller_country,\n\t\tcallee_country,\n\t\temail_id,\n\t\temail_subject,\n\t\temail_language,\n\t\tcase_id,\n\t\tthread_id,\n\t\tcase_number,\n\t\tcase_search_result,\n\t\tresponse_email_id,\n\t\tcaller_monitored,\n\t\tcallee_monitored,\n\t\tcaller_interaction_step_id,\n\t\tcallee_interaction_step_id,\n\t\tcaller_cpa_rtp_server_id,\n\t\tcaller_cpa_recording_url,\n\t\tcaller_encryption_key_id,\n\t\tcallee_cpa_rtp_server_id,\n\t\tcallee_cpa_recording_url,\n\t\tcallee_encryption_key_id,\n\t\tcaller_has_screen_recording,\n\t\tcallee_has_screen_recording,\n\t\tcaller_interaction_id,\n\t\tcallee_interaction_id,\n\t\tcaller_has_voice_recording,\n\t\tcallee_has_voice_recording,\n\t\tvoice_recording_banned,\n\t\tmonitoring_banned,\n\t\temail_detail_id,\n\t\temail_completion_time,\n\t\temail_kb_article_id,\n\t\tcaller_team_name,\n\t\tcallee_team_name,\n\t\tdetail_record_count,\n\t\tin_service_level,\n\t\tcustom1,\n\t\tcustom2,\n\t\tcustom3,\n\t\tcustom4,\n\t\tcustom5,\n\t\tsentiment,\n\t\terased_voice_recording,\n\t\terased_voice_signature,\n\t\terased_chat_transcript,\n\t\terased_email,\n\t\terased_screen_recording,\n\t\tewt,\n\t\tcobrowsing\n\t)) ~> ODSCallDetail"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/FactCallDetail')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_PB_CallDetail",
                                "type": "DatasetReference"
                            },
                            "name": "ODSBPCallDetail"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimDate",
                                "type": "DatasetReference"
                            },
                            "name": "DimDate"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimTimeOfDay",
                                "type": "DatasetReference"
                            },
                            "name": "DimeTimeOfDay"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_dimAgentDisposition",
                                "type": "DatasetReference"
                            },
                            "name": "DimAgentDisposition"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimLead",
                                "type": "DatasetReference"
                            },
                            "name": "DimLead"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSource",
                                "type": "DatasetReference"
                            },
                            "name": "DimSource"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSystemUser",
                                "type": "DatasetReference"
                            },
                            "name": "DimSystemUser"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCallType",
                                "type": "DatasetReference"
                            },
                            "name": "DimCallType"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimMedia",
                                "type": "DatasetReference"
                            },
                            "name": "DimMedia"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimScenario",
                                "type": "DatasetReference"
                            },
                            "name": "DimScenario"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimService",
                                "type": "DatasetReference"
                            },
                            "name": "DimService"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_FactCallDetail",
                                "type": "DatasetReference"
                            },
                            "name": "FactCallDetail"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "SelectCallDetail"
                        },
                        {
                            "name": "SelectDimDate"
                        },
                        {
                            "name": "SelectDimTimeOfDay"
                        },
                        {
                            "name": "JoinWithDimDate"
                        },
                        {
                            "name": "JoinDimTimeOfDay"
                        },
                        {
                            "name": "SelectDimLead"
                        },
                        {
                            "name": "JoinDimLead"
                        },
                        {
                            "name": "SelectSource"
                        },
                        {
                            "name": "JoinDimAgentDisposition"
                        },
                        {
                            "name": "MapColumns"
                        },
                        {
                            "name": "JoinSource"
                        },
                        {
                            "name": "JoinCallType"
                        },
                        {
                            "name": "CallTypeColumns"
                        },
                        {
                            "name": "CalculateColumnsColumn"
                        },
                        {
                            "name": "JoinUserSystem"
                        },
                        {
                            "name": "JoinMedia"
                        },
                        {
                            "name": "FilterMediaSource"
                        },
                        {
                            "name": "SelectFinalColumns"
                        },
                        {
                            "name": "SelectTempColumns"
                        },
                        {
                            "name": "JoinScenario"
                        },
                        {
                            "name": "JoinService"
                        },
                        {
                            "name": "SelectService"
                        },
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tid as binary,\n\t\tpkid as integer,\n\t\tagg_run_id as binary,\n\t\tmedia_type as string,\n\t\tstart_time as timestamp,\n\t\tivr_time as long,\n\t\tqueue_time as long,\n\t\tpending_time as long,\n\t\ttalk_time as long,\n\t\thold_time as long,\n\t\theld as long,\n\t\tmax_hold as long,\n\t\tacw_time as long,\n\t\tduration as long,\n\t\tservice_name as string,\n\t\tscenario_name as string,\n\t\ttrunk_description as string,\n\t\tcaller_login_id as string,\n\t\tcallee_login_id as string,\n\t\tcaller_phone_type as string,\n\t\tcallee_phone_type as string,\n\t\tcaller_rank as string,\n\t\tcallee_rank as string,\n\t\tfrom_phone as string,\n\t\toriginal_destination_phone as string,\n\t\tconnected_to_phone as string,\n\t\ttransferred_from_phone as string,\n\t\tdisposition as string,\n\t\tagent_disposition_name as string,\n\t\tagent_disposition_code as integer,\n\t\tagent_disposition_notes as string,\n\t\treported_problem as string,\n\t\tglobal_interaction_id as binary,\n\t\tinitial_call_id as binary,\n\t\tinitial_start_time as timestamp,\n\t\tinitial_service_name as string,\n\t\tinitial_caller_phone_type as string,\n\t\tinitial_callee_phone_type as string,\n\t\tinitial_from_phone as string,\n\t\tinitial_original_destination_phone as string,\n\t\tinitial_connected_to_phone as string,\n\t\tflagged as boolean,\n\t\tvoice_signature as boolean,\n\t\taccount_number as string,\n\t\tcaller_first_name as string,\n\t\tcallee_first_name as string,\n\t\tcaller_last_name as string,\n\t\tcallee_last_name as string,\n\t\tcaller_city as string,\n\t\tcallee_city as string,\n\t\tcaller_country as string,\n\t\tcallee_country as string,\n\t\temail_id as string,\n\t\temail_subject as string,\n\t\temail_language as string,\n\t\tcase_id as string,\n\t\tthread_id as string,\n\t\tcase_number as string,\n\t\tcase_search_result as string,\n\t\tresponse_email_id as string,\n\t\tcaller_monitored as boolean,\n\t\tcallee_monitored as boolean,\n\t\tcaller_interaction_step_id as binary,\n\t\tcallee_interaction_step_id as binary,\n\t\tcaller_cpa_rtp_server_id as binary,\n\t\tcaller_cpa_recording_url as string,\n\t\tcaller_encryption_key_id as binary,\n\t\tcallee_cpa_rtp_server_id as binary,\n\t\tcallee_cpa_recording_url as string,\n\t\tcallee_encryption_key_id as binary,\n\t\tcaller_has_screen_recording as boolean,\n\t\tcallee_has_screen_recording as boolean,\n\t\tcaller_interaction_id as binary,\n\t\tcallee_interaction_id as binary,\n\t\tcaller_has_voice_recording as boolean,\n\t\tcallee_has_voice_recording as boolean,\n\t\tvoice_recording_banned as boolean,\n\t\tmonitoring_banned as boolean,\n\t\temail_detail_id as string,\n\t\temail_completion_time as long,\n\t\temail_kb_article_id as string,\n\t\tcaller_team_name as string,\n\t\tcallee_team_name as string,\n\t\tdetail_record_count as integer,\n\t\tin_service_level as string,\n\t\tcustom1 as string,\n\t\tcustom2 as string,\n\t\tcustom3 as string,\n\t\tcustom4 as string,\n\t\tcustom5 as string,\n\t\tsentiment as decimal(38,18),\n\t\terased_voice_recording as boolean,\n\t\terased_voice_signature as boolean,\n\t\terased_chat_transcript as boolean,\n\t\terased_email as boolean,\n\t\terased_screen_recording as boolean,\n\t\tewt as long,\n\t\tcobrowsing as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSBPCallDetail\nsource(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tISODate as string,\n\t\tYearNumber as integer,\n\t\tYearQuarterNumber as integer,\n\t\tYearMonthNumber as integer,\n\t\tYearQuarterMonthNumber as integer,\n\t\tYearWeekNumber as integer,\n\t\tDateName as string,\n\t\tWeekName as string,\n\t\tWeekNameWithYear as string,\n\t\tWeekShortName as string,\n\t\tWeekShortNameWithYear as string,\n\t\tWeekNumber as integer,\n\t\tFirstDateOfWeek as date,\n\t\tLastDateOfWeek as date,\n\t\tDayOfWeek as integer,\n\t\tDayOfWeekName as string,\n\t\tIsWeekday as boolean,\n\t\tIsWeekend as boolean,\n\t\tMonthName as string,\n\t\tMonthNameWithYear as string,\n\t\tMonthShortName as string,\n\t\tMonthShortNameWithYear as string,\n\t\tMonthNumber as integer,\n\t\tFirstDateOfMonth as date,\n\t\tLastDateOfMonth as date,\n\t\tDayOfMonth as integer,\n\t\tDayOfMonthName as string,\n\t\tIsLastDayOfMonth as boolean,\n\t\tQuarterName as string,\n\t\tQuarterNameWithYear as string,\n\t\tQuarterShortName as string,\n\t\tQuarterShortNameWithYear as string,\n\t\tQuarterNumber as integer,\n\t\tFirstDateOfQuarter as date,\n\t\tLastDateOfQuarter as date,\n\t\tDayOfQuarter as integer,\n\t\tDayOfQuarterName as string,\n\t\tHalfName as string,\n\t\tHalfNameWithYear as string,\n\t\tHalfShortName as string,\n\t\tHalfShortNameWithYear as string,\n\t\tHalfNumber as integer,\n\t\tYearHalfNumber as integer,\n\t\tFirstDateOfHalf as date,\n\t\tLastDateOfHalf as date,\n\t\tDayOfHalf as integer,\n\t\tDayOfHalfName as string,\n\t\tYearName as string,\n\t\tYearShortName as string,\n\t\tFirstDateOfYear as date,\n\t\tLastDateOfYear as date,\n\t\tDayOfYear as integer,\n\t\tDayOfYearName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarYear as integer,\n\t\tCalendarYearMonth as string,\n\t\tCalendarYearQtr as string,\n\t\tFiscalYear as integer,\n\t\tFiscalWeek as integer,\n\t\tFiscalPeriod as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalQuarter as integer,\n\t\tFiscalYearFiscalWeek as integer,\n\t\tFiscalYearFiscalPeriod as integer,\n\t\tFiscalYearFiscalMonth as integer,\n\t\tFiscalYearFiscalQuarter as integer,\n\t\tFiscalYearFiscalQuarterFiscalMonth as integer,\n\t\tFiscalYearName as string,\n\t\tFiscalYearLongName as string,\n\t\tFiscalYearShortName as string,\n\t\tFiscalQuarterName as string,\n\t\tFiscalQuarterLongName as string,\n\t\tFiscalQuarterNameWithYear as string,\n\t\tFiscalQuarterLongNameWithYear as string,\n\t\tFiscalQuarterShortName as string,\n\t\tFiscalQuarterShortNameWithYear as string,\n\t\tFiscalMonthName as string,\n\t\tFiscalMonthNameWithYear as string,\n\t\tFiscalMonthShortName as string,\n\t\tFiscalMonthShortNameWithYear as string,\n\t\tFiscalMonthCalendarShortName as string,\n\t\tFiscalMonthCalendarShortNameWithYear as string,\n\t\tFiscalWeekName as string,\n\t\tFiscalWeekLongName as string,\n\t\tFiscalWeekNameWithYear as string,\n\t\tFiscalWeekLongNameWithYear as string,\n\t\tFiscalWeekShortName as string,\n\t\tFiscalWeekShortNameWithYear as string,\n\t\tFiscalPeriodName as string,\n\t\tFiscalPeriodLongName as string,\n\t\tFiscalPeriodNameWithYear as string,\n\t\tFiscalPeriodLongNameWithYear as string,\n\t\tFiscalPeriodShortName as string,\n\t\tFiscalPeriodShortNameWithYear as string,\n\t\tCummWorkdays as integer,\n\t\tMonthWorkdays as integer,\n\t\tMonthWorkdaysTotal as integer,\n\t\tIsHoliday as boolean,\n\t\tMonthOfQuarter as integer,\n\t\tBroadcastYearBroadcastQuarter as integer,\n\t\tBroadcastYearBroadcastMonth as integer,\n\t\tBroadcastYearBroadcastWeek as integer,\n\t\tBroadcastYearQtrMonthWeekDay as integer,\n\t\tBroadcastYearQtrMonth as integer,\n\t\tBroadcastYearShortName as string,\n\t\tBroadcastYearLongName as string,\n\t\tBroadcastYeartName as string,\n\t\tBroadcastQuarterName as string,\n\t\tBroadcastWeekName as string,\n\t\tBroadcastDayName as string,\n\t\tmsrepl_tran_version as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimDate\nsource(output(\n\t\tTimeOfDayKey as integer,\n\t\tTime as string,\n\t\tTime24 as string,\n\t\tHour as integer,\n\t\tHourName as string,\n\t\tMinute as integer,\n\t\tMinuteKey as integer,\n\t\tMinuteName as string,\n\t\tSecond as integer,\n\t\tHour24 as integer,\n\t\tAM as string,\n\t\tTime24HM as string,\n\t\tHourC as integer,\n\t\tMinuteC as integer,\n\t\t{30MinuteInterval} as integer,\n\t\tDayPart as string,\n\t\tTimeNumber as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimeTimeOfDay\nsource(output(\n\t\tAgentDispositionKey as integer,\n\t\tAgentDispositionName as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimAgentDisposition\nsource(output(\n\t\tLeadKey as integer,\n\t\tLeadId as string,\n\t\tLeadName as string,\n\t\tLeadLastname as string,\n\t\tLeadFullName as string,\n\t\tLeadBirthday as date,\n\t\tLeadAddress as string,\n\t\tIsActive as integer,\n\t\tIsConsultFormComplete as integer,\n\t\tIsvalid as integer,\n\t\tIsReferral as integer,\n\t\tLeadScore as decimal(18,0),\n\t\tLeadEmail as string,\n\t\tLeadPhone as string,\n\t\tLeadMobilePhone as string,\n\t\tLeadAddress1 as string,\n\t\tNorwoodScale as string,\n\t\tLudwigScale as string,\n\t\tHairLossScaleKey as decimal(18,0),\n\t\tHairLossInFamily as string,\n\t\tHairLossProductUsed as string,\n\t\tHairLossSpot as string,\n\t\tSourceSystem as string,\n\t\tSegmentKey as decimal(18,0),\n\t\tGeographyKey as integer,\n\t\tLeadPostalCode as string,\n\t\tEthnicityKey as decimal(18,0),\n\t\tLeadEthnicity as string,\n\t\tGenderKey as decimal(18,0),\n\t\tLeadGender as string,\n\t\tOriginalCampaignKey as decimal(18,0),\n\t\tOriginalCampaignCode as string,\n\t\tOriginalSourceCode as string,\n\t\tCenterKey as decimal(18,0),\n\t\tCenterNumber as string,\n\t\tLanguageKey as decimal(18,0),\n\t\tLeadLanguage as string,\n\t\tStatusKey as decimal(18,0),\n\t\tLeadStatus as string,\n\t\tFunnelStepKey as decimal(18,0),\n\t\tLeadCreatedDate as timestamp,\n\t\tCreatedDateKey as integer,\n\t\tCreatedTimeKey as integer,\n\t\tRecentCampaignKey as integer,\n\t\tRecentCampaignCode as string,\n\t\tRecentSourceCode as string,\n\t\tLeadLastActivityDate as timestamp,\n\t\tLastActivityDateKey as integer,\n\t\tLastActivityTimekey as integer,\n\t\tDISCStyle as string,\n\t\tLeadMaritalStatus as string,\n\t\tLeadOccupation as string,\n\t\tLeadConsultReady as integer,\n\t\tConsultationFormReady as integer,\n\t\tDWHLoadDate as timestamp,\n\t\tDWHLastUpdateDate as timestamp,\n\t\tIsDeleted as boolean,\n\t\tDoNotCall as boolean,\n\t\tDoNotContact as boolean,\n\t\tDoNotEmail as boolean,\n\t\tDoNotMail as boolean,\n\t\tDoNotText as boolean,\n\t\tCreateUser as string,\n\t\tUpdateUser as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tOccupationKey as integer,\n\t\tMaritalStatusKey as integer,\n\t\tLeadSource as string,\n\t\tSourceKey as integer,\n\t\tFunnelStep as string,\n\t\tOriginalCommMethodkey as integer,\n\t\tRecentCommMethodKey as integer,\n\t\tCommunicationMethod as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimLead\nsource(output(\n\t\tSourceKey as integer,\n\t\tSourceName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSource\nsource(output(\n\t\tUserKey as integer,\n\t\tUserId as string,\n\t\tUserLogin as string,\n\t\tUserName as string,\n\t\tCompanyName as string,\n\t\tStreet as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tTeamName as string,\n\t\tcONEctUserLogin as string,\n\t\tCenterId as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as string,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSystemUser\nsource(output(\n\t\tCallTypeKey as integer,\n\t\tCallTypeName as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCallType\nsource(output(\n\t\tMediaKey as integer,\n\t\tMediaName as string,\n\t\tMediaCode as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimMedia\nsource(output(\n\t\tScenarioKey as integer,\n\t\tScenarioName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimScenario\nsource(output(\n\t\tServiceKey as integer,\n\t\tServiceName as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimService\nODSBPCallDetail select(mapColumn(\n\t\tCallId = id,\n\t\tcaller_phone_type,\n\t\tcallee_phone_type,\n\t\tcaller_login_id,\n\t\tcallee_login_id,\n\t\tmedia_type,\n\t\tagent_disposition_code,\n\t\tCallPkId = pkid,\n\t\tCallMediaType = media_type,\n\t\tFactDate = start_time,\n\t\tCallDate = start_time,\n\t\tCallIvrTime = ivr_time,\n\t\tCallQueueTime = queue_time,\n\t\tCallPendingTime = pending_time,\n\t\tCallTalkTime = talk_time,\n\t\tCallHoldTime = hold_time,\n\t\tCallHeld = held,\n\t\tCallMaxHold = max_hold,\n\t\tCallAcwTime = acw_time,\n\t\tCallDuration = duration,\n\t\tServiceName = service_name,\n\t\tScenarioName = scenario_name,\n\t\tAgentDispositionName = agent_disposition_name,\n\t\tcustom1,\n\t\tcustom2,\n\t\tcustom3\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCallDetail\nDimDate select(mapColumn(\n\t\tDateKey,\n\t\tFullDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDate\nDimeTimeOfDay select(mapColumn(\n\t\tTimeOfDayKey,\n\t\tHour24,\n\t\tMinute,\n\t\tSecond\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimTimeOfDay\nJoinService, SelectDimDate join(toDate(FactDate) == FullDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinWithDimDate\nJoinWithDimDate, SelectDimTimeOfDay join(second(FactDate) == Second\n\t&& minute(FactDate) == Minute\n\t&& hour(FactDate) == Hour24,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimTimeOfDay\nDimLead select(mapColumn(\n\t\tLeadKey,\n\t\tLeadId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimLead\nJoinDimTimeOfDay, SelectDimLead join(custom1 == LeadId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimLead\nDimSource select(mapColumn(\n\t\tSourceKey,\n\t\tSourceName,\n\t\tSource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSource\nJoinDimLead, DimAgentDisposition join(lower(trim(SelectCallDetail@AgentDispositionName)) == lower(trim(DimAgentDisposition@AgentDispositionName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimAgentDisposition\nSelectTempColumns derive(FactDateKey = DateKey,\n\t\tFactTimeKey = TimeOfDayKey,\n\t\tFactDate = FactDate,\n\t\tCallId = CallId,\n\t\tCallMediaType = initCap(media_type),\n\t\tMediaKey = iifNull(MediaKey, -1),\n\t\tCallPkId = toString(CallPkId),\n\t\tCallDate = FactDate,\n\t\tCallIvrTime = CallIvrTime,\n\t\tCallQueueTime = CallQueueTime,\n\t\tCallPendingTime = CallPendingTime,\n\t\tCallTalkTime = CallTalkTime,\n\t\tCallHoldTime = CallHoldTime,\n\t\tCallHeld = CallHeld,\n\t\tCallMaxHold = CallMaxHold,\n\t\tCallAcwTime = CallAcwTime,\n\t\tCallDuration = CallDuration,\n\t\tServiceName = ServiceName,\n\t\tServiceKey = iifNull(ServiceKey, -1),\n\t\tAgentDispositionKey = iifNull(AgentDispositionKey, -1),\n\t\tAgentDispositionName = AgentDispositionName,\n\t\tScenarioName = initCap(ScenarioName),\n\t\tScenarioKey = iifNull(ScenarioKey, -1),\n\t\tLeadKey = LeadKey,\n\t\tLeadId = LeadId,\n\t\tTaskId = custom2,\n\t\tIncommingSourceCode = custom3,\n\t\tSourceKey = -1,\n\t\tCallType = CallType,\n\t\tCallTypeKey = iifNull(CallTypeKey, -1),\n\t\tAgentLogin = AgentLogin,\n\t\tAgentKey = iifNull(UserKey, -1),\n\t\tIsViableCall = IsViableCall,\n\t\tIsProductiveCall = case(in(['Appointment-ExistingLead',\r\n                                                         'Appointment-NewLead',\r\n                                                         'Brochure-NewLead',\r\n                                                         'GeneralInquiry-NoleadCreated',\r\n                                                         'GeneralInquiry-NewLead',\r\n                                                         'Recovery',\r\n                                                         'Recycle'\r\n], replace(AgentDispositionName,' ','')), 1,   0)) ~> MapColumns\nJoinScenario, SelectSource join(custom3 == SelectSource@Source,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSource\nCalculateColumnsColumn, CallTypeColumns join(lower(CallType) == lower(CallTypeName),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCallType\nDimCallType select(mapColumn(\n\t\tCallTypeKey,\n\t\tCallTypeName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CallTypeColumns\nJoinSource derive(CallType = case(initCap(trim(caller_phone_type)) == 'Internal' && initCap(trim(callee_phone_type)) == 'External', 'Outbound', \r\n    initCap(trim(caller_phone_type)) == 'External' && initCap(trim(callee_phone_type)) == 'Internal' && instr(iifNull(lower(trim(SelectCallDetail@ServiceName)), ''),'sms')  == 0,'Inbound',\r\n    initCap(trim(caller_phone_type)) == 'External' && initCap(trim(callee_phone_type)) == 'Internal' && instr(iifNull(lower(trim(SelectCallDetail@ServiceName)), ''), 'sms') > 0,'SMS',\r\n    (initCap(trim(caller_phone_type)) == 'External' || isNull(caller_phone_type)) && (initCap(trim(callee_phone_type)) == 'External' || isNull(caller_phone_type)) && instr(iifNull(lower(trim(SelectCallDetail@ServiceName)), ''), 'dial now')> 0,'Outbound',\r\n    (initCap(trim(caller_phone_type)) == 'External' || isNull(caller_phone_type)) && (initCap(trim(callee_phone_type)) == 'External' || isNull(caller_phone_type)) && instr(iifNull(lower(trim(SelectCallDetail@ServiceName)), ''), 'inbound')> 0, 'Inbound',\r\n    initCap(trim(caller_phone_type)) == 'Internal' && initCap(trim(callee_phone_type)) == 'Internal', 'Transfer', 'Unknown' ),\n\t\tAgentLogin = case(initCap(trim(caller_phone_type)) == 'External', initCap(trim(callee_login_id)), initCap(trim(caller_phone_type)) == 'Internal', caller_login_id, toString(null())),\n\t\tIsViableCall = case(  in(['Appointment-ExistingLead', \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t 'Appointment-NewLead',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t 'Brochure-NewLead', \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t 'GeneralInquiry-NoleadCreated',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t 'GeneralInquiry-NewLead', \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t 'Recovery', \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t 'Recycle'\r\n ], replace(SelectCallDetail@AgentDispositionName,' ','') ),\r\n\t\t\t\t\t   1\r\n\t\t\t\t   ,\r\n\t\t\t\t\t   0)) ~> CalculateColumnsColumn\nJoinCallType, DimSystemUser join(lower(toString(agent_disposition_code)) == lower(UserId),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUserSystem\nJoinDimAgentDisposition, DimMedia join(lower(trim(media_type)) == lower(trim(MediaName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMedia\nDimMedia filter(Source == 'Bright Pattern') ~> FilterMediaSource\nMapColumns select(mapColumn(\n\t\teach(match(stream=='MapColumns'))\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectFinalColumns\nJoinUserSystem select(mapColumn(\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTempColumns\nJoinMedia, DimScenario join(lower(trim(SelectCallDetail@ScenarioName)) == lower(DimScenario@ScenarioName),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinScenario\nSelectCallDetail, DimService join(lower(trim(SelectCallDetail@ServiceName)) == lower(trim(DimService@ServiceName)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinService\nDimService select(mapColumn(\n\t\tServiceKey,\n\t\tDimServiceName = ServiceName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectService\nSelectFinalColumns alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tFactDateKey as integer,\n\t\tFactTimeKey as integer,\n\t\tFactDate as timestamp,\n\t\tCallId as binary,\n\t\tCallMediaType as string,\n\t\tMediaKey as integer,\n\t\tCallPkId as string,\n\t\tCallDate as timestamp,\n\t\tCallIvrTime as integer,\n\t\tCallQueueTime as integer,\n\t\tCallPendingTime as integer,\n\t\tCallTalkTime as integer,\n\t\tCallHoldTime as integer,\n\t\tCallHeld as integer,\n\t\tCallMaxHold as integer,\n\t\tCallAcwTime as integer,\n\t\tCallDuration as integer,\n\t\tServiceName as string,\n\t\tServiceKey as integer,\n\t\tScenarioName as string,\n\t\tScenarioKey as integer,\n\t\tLeadKey as integer,\n\t\tLeadId as string,\n\t\tTaskId as string,\n\t\tIncommingSourceCode as string,\n\t\tSourceKey as integer,\n\t\tCallType as string,\n\t\tCallTypeKey as integer,\n\t\tAgentDisposition as string,\n\t\tAgentDispositionKey as integer,\n\t\tAgentLogin as string,\n\t\tAgentKey as integer,\n\t\tIsViableCall as integer,\n\t\tIsProductiveCall as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['CallId'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFactDateKey,\n\t\tFactTimeKey,\n\t\tFactDate,\n\t\tCallId,\n\t\tCallMediaType,\n\t\tMediaKey,\n\t\tCallPkId,\n\t\tCallDate,\n\t\tCallIvrTime,\n\t\tCallQueueTime,\n\t\tCallPendingTime,\n\t\tCallTalkTime,\n\t\tCallHoldTime,\n\t\tCallHeld,\n\t\tCallMaxHold,\n\t\tCallAcwTime,\n\t\tCallDuration,\n\t\tServiceName,\n\t\tServiceKey,\n\t\tScenarioName,\n\t\tScenarioKey,\n\t\tLeadKey,\n\t\tLeadId,\n\t\tTaskId,\n\t\tIncommingSourceCode,\n\t\tSourceKey,\n\t\tCallType,\n\t\tCallTypeKey,\n\t\tAgentDisposition = AgentDispositionName,\n\t\tAgentDispositionKey,\n\t\tAgentLogin,\n\t\tAgentKey,\n\t\tIsViableCall,\n\t\tIsProductiveCall\n\t)) ~> FactCallDetail"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODSServiceResource')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_SF_ServiceResource",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_ServiceResource",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tId as string,\n\t\tOwnerId as string,\n\t\tName as string,\n\t\tCurrencyIsoCode as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tRelatedRecordId as string,\n\t\tResourceType as string,\n\t\tDescription as string,\n\t\tIsActive as boolean,\n\t\tLocationId as string,\n\t\tAccountId as string,\n\t\tExternal_Id__c as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nsource1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as string,\n\t\tOwnerId as string,\n\t\tName as string,\n\t\tCurrencyIsoCode as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tLastViewedDate as timestamp,\n\t\tLastReferencedDate as timestamp,\n\t\tRelatedRecordId as string,\n\t\tResourceType as string,\n\t\tDescription as string,\n\t\tIsActive as boolean,\n\t\tLocationId as string,\n\t\tAccountId as string,\n\t\tExternal_Id__c as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Id'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tId,\n\t\tOwnerId,\n\t\tName,\n\t\tCurrencyIsoCode,\n\t\tCreatedDate,\n\t\tCreatedById,\n\t\tLastModifiedDate,\n\t\tLastModifiedById,\n\t\tSystemModstamp,\n\t\tLastViewedDate,\n\t\tLastReferencedDate,\n\t\tRelatedRecordId,\n\t\tResourceType,\n\t\tDescription,\n\t\tIsActive,\n\t\tLocationId,\n\t\tAccountId,\n\t\tExternal_Id__c\n\t)) ~> sink1"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODSAssignedResource')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_SF_AssaignedRessource",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_SF_AssignedResource",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tAssignedResourceNumber as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tServiceAppointmentId as string,\n\t\tServiceResourceId as string,\n\t\tIsRequiredResource as boolean,\n\t\tRole as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nsource1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tAssignedResourceNumber as string,\n\t\tCreatedDate as timestamp,\n\t\tCreatedById as string,\n\t\tLastModifiedDate as timestamp,\n\t\tLastModifiedById as string,\n\t\tSystemModstamp as timestamp,\n\t\tServiceAppointmentId as string,\n\t\tServiceResourceId as string,\n\t\tIsRequiredResource as boolean,\n\t\tRole as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Id'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tId,\n\t\tIsDeleted,\n\t\tAssignedResourceNumber,\n\t\tCreatedDate,\n\t\tCreatedById,\n\t\tLastModifiedDate,\n\t\tLastModifiedById,\n\t\tSystemModstamp,\n\t\tServiceAppointmentId,\n\t\tServiceResourceId,\n\t\tIsRequiredResource,\n\t\tRole\n\t)) ~> sink1"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_Targets')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "MarketingAgencies/ODS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_MA_Targets",
                                "type": "DatasetReference"
                            },
                            "name": "ParquetTargets"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_MA_Targets",
                                "type": "DatasetReference"
                            },
                            "name": "ODSTargets"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterNotNulls"
                        },
                        {
                            "name": "SelectColumns"
                        },
                        {
                            "name": "RoundValues"
                        }
                    ],
                    "script": "source(output(\n\t\tDate as string,\n\t\tMonth as string,\n\t\tBudgetType as string,\n\t\tAgency as string,\n\t\tChannel as string,\n\t\tMedium as string,\n\t\tSource as string,\n\t\tBudget as string,\n\t\tLocation as string,\n\t\tBudget_Amount as string,\n\t\tTareget_Leads as string,\n\t\tCurrencyConversion as string,\n\t\tFeeRate as string,\n\t\tDataStreamID as string,\n\t\tDataStreamName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> ParquetTargets\nParquetTargets filter(!isNull(Date)) ~> FilterNotNulls\nFilterNotNulls select(mapColumn(\n\t\tDate,\n\t\tMonth,\n\t\tBudgetType,\n\t\tAgency,\n\t\tChannel,\n\t\tMedium,\n\t\tSource,\n\t\tBudget,\n\t\tLocation,\n\t\tBudgetAmount = Budget_Amount,\n\t\tTaregetLeads = Tareget_Leads,\n\t\tCurrencyConversion,\n\t\tFee = FeeRate,\n\t\tDataStreamID,\n\t\tDataStreamName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nSelectColumns derive(TaregetLeads = toString(round(toDecimal(TaregetLeads)))) ~> RoundValues\nRoundValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDate as string,\n\t\tMonth as string,\n\t\tBudgetType as string,\n\t\tAgency as string,\n\t\tChannel as string,\n\t\tMedium as string,\n\t\tSource as string,\n\t\tBudget as string,\n\t\tLocation as string,\n\t\tBudgetAmount as string,\n\t\tTargetLeads as string,\n\t\tCurrencyConversion as string,\n\t\tFee as string,\n\t\tDataStreamID as integer,\n\t\tDataStreamName as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tDate,\n\t\tMonth,\n\t\tBudgetType,\n\t\tAgency,\n\t\tChannel,\n\t\tMedium,\n\t\tSource,\n\t\tBudget,\n\t\tLocation,\n\t\tBudgetAmount,\n\t\tTargetLeads = TaregetLeads,\n\t\tCurrencyConversion,\n\t\tFee,\n\t\tDataStreamID,\n\t\tDataStreamName\n\t)) ~> ODSTargets"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/FactMarketingBudget')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/Marketing"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_MA_Targets",
                                "type": "DatasetReference"
                            },
                            "name": "OdsTargets"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_FactMarketingBudget",
                                "type": "DatasetReference"
                            },
                            "name": "InsertFactMarketingBudget"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterMonth"
                        },
                        {
                            "name": "SelectColumns"
                        },
                        {
                            "name": "AddCustomColumns"
                        }
                    ],
                    "script": "parameters{\n\tMonth as string\n}\nsource(output(\n\t\tDate as string,\n\t\tMonth as string,\n\t\tBudgetType as string,\n\t\tAgency as string,\n\t\tChannel as string,\n\t\tMedium as string,\n\t\tSource as string,\n\t\tBudget as string,\n\t\tLocation as string,\n\t\tBudgetAmount as string,\n\t\tTaregetLeads as string,\n\t\tCurrencyConversion as string,\n\t\tFee as string,\n\t\tDataStreamID as integer,\n\t\tDataStreamName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> OdsTargets\nOdsTargets filter(trim(lower(Month)) == trim(lower($Month))) ~> FilterMonth\nFilterMonth select(mapColumn(\n\t\tFactDate = Date,\n\t\tMonth,\n\t\tBudgetType,\n\t\tAgency,\n\t\tChannel,\n\t\tMedium,\n\t\tSource,\n\t\tBudget,\n\t\tLocation,\n\t\tBudgetAmount,\n\t\tTaregetLeads,\n\t\tCurrencyConversion,\n\t\tFee,\n\t\tDataStreamName,\n\t\tDataStreamID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nSelectColumns derive(DWH_UpdatedDate = currentTimestamp(),\n\t\tDWH_LoadDate = currentTimestamp()) ~> AddCustomColumns\nAddCustomColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tFactDate as string,\n\t\tMonth as string,\n\t\tBudgetType as string,\n\t\tAgency as string,\n\t\tChannel as string,\n\t\tMedium as string,\n\t\tSource as string,\n\t\tBudget as string,\n\t\tLocation as string,\n\t\tBudgetAmount as string,\n\t\tTaregetLeads as string,\n\t\tCurrencyConversion as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_UpdatedDate as timestamp,\n\t\tFee as string,\n\t\tDataStreamID as integer,\n\t\tDataStreamName as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFactDate,\n\t\tMonth,\n\t\tBudgetType,\n\t\tAgency,\n\t\tChannel,\n\t\tMedium,\n\t\tSource,\n\t\tBudget,\n\t\tLocation,\n\t\tBudgetAmount,\n\t\tTaregetLeads,\n\t\tCurrencyConversion,\n\t\tDWH_LoadDate,\n\t\tDWH_UpdatedDate,\n\t\tFee,\n\t\tDataStreamID,\n\t\tDataStreamName\n\t)) ~> InsertFactMarketingBudget"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_SF_AccountHistory')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "SLF_LOGS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_SF_AccountHistory",
                                "type": "DatasetReference"
                            },
                            "name": "DLAccountHistory"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_dimAccountHistory",
                                "type": "DatasetReference"
                            },
                            "name": "ODSAccountHistory"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tAccountId as string,\n\t\tCreatedById as string,\n\t\tCreatedDate as timestamp,\n\t\tField as string,\n\t\tOldValue as string,\n\t\tNewValue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLAccountHistory\nDLAccountHistory alterRow(upsertIf(true())) ~> AlterUpsert\nAlterUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Id','CreatedDate'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSAccountHistory"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_SF_LeadHistory')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "SLF_LOGS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_SF_LeadHistory",
                                "type": "DatasetReference"
                            },
                            "name": "DLLeadHistory"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_dimLeadHistory",
                                "type": "DatasetReference"
                            },
                            "name": "ODSLeadHistory"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tLeadId as string,\n\t\tCreatedById as string,\n\t\tCreatedDate as timestamp,\n\t\tField as string,\n\t\tOldValue as string,\n\t\tNewValue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLLeadHistory\nDLLeadHistory alterRow(upsertIf(true())) ~> AlterUpsert\nAlterUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Id','CreatedDate'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSLeadHistory"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_SF_SAHistory')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "SLF_LOGS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_SF_ServiceAppointmentHistory",
                                "type": "DatasetReference"
                            },
                            "name": "DLSAHistory"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_dimSAHistory",
                                "type": "DatasetReference"
                            },
                            "name": "ODSSAHistory"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tId as string,\n\t\tIsDeleted as boolean,\n\t\tServiceAppointmentId as string,\n\t\tCreatedById as string,\n\t\tCreatedDate as timestamp,\n\t\tField as string,\n\t\tOldValue as string,\n\t\tNewValue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLSAHistory\nDLSAHistory alterRow(upsertIf(true())) ~> AlterUpsert\nAlterUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Id','CreatedDate'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSSAHistory"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_CNCT_ConnectHistory')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "SLF_LOGS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_Logs",
                                "type": "DatasetReference"
                            },
                            "name": "DLLogs"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_dimConnectHistory",
                                "type": "DatasetReference"
                            },
                            "name": "ODSLogs"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tID as integer,\n\t\tDate as timestamp,\n\t\tCenterID as integer,\n\t\tClientGUID as string,\n\t\tClientMembershipGUID as string,\n\t\tSalesOrderGUID as string,\n\t\tHairSystemOrderGUID as string,\n\t\tMethodName as string,\n\t\tUserName as string,\n\t\tThread as string,\n\t\tLevel as string,\n\t\tLogger as string,\n\t\tMessage as string,\n\t\tException as string,\n\t\tHostName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLLogs\nDLLogs alterRow(upsertIf(true())) ~> AlterUpsert\nAlterUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['ID','Date'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSLogs"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ODS_SF_OpportunityHistory')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "SLF_LOGS"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_SF_OpportunityHistory",
                                "type": "DatasetReference"
                            },
                            "name": "DLOpportunityHistory"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_dimOpportunityHistory",
                                "type": "DatasetReference"
                            },
                            "name": "ODSOpportunityHistory"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterUpsert"
                        }
                    ],
                    "script": "source(output(\n\t\tId as string,\n\t\tOpportunityId as string,\n\t\tCreatedById as string,\n\t\tCreatedDate as timestamp,\n\t\tStageName as string,\n\t\tAmount as decimal(38,18),\n\t\tExpectedRevenue as decimal(38,18),\n\t\tCloseDate as timestamp,\n\t\tProbability as decimal(38,18),\n\t\tForecastCategory as string,\n\t\tCurrencyIsoCode as string,\n\t\tSystemModstamp as timestamp,\n\t\tIsDeleted as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DLOpportunityHistory\nDLOpportunityHistory alterRow(upsertIf(true())) ~> AlterUpsert\nAlterUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Id','CreatedDate'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSOpportunityHistory"
                }
            },
            "dependsOn": []
        }
    ]
}