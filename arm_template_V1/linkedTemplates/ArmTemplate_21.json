{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "hc-eim-df-prod2"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_lkpMaritalStatus')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_lkpMaritalStatus",
                                "type": "DatasetReference"
                            },
                            "name": "CNTlkpMaritalStatus"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpMaritalStatus",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpMaritalStatus"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow"
                        }
                    ],
                    "script": "source(output(\n\t\tMaritalStatusID as integer,\n\t\tBOSMaritalStatusCode as string,\n\t\tMaritalStatusSortOrder as integer,\n\t\tMaritalStatusDescription as string,\n\t\tMaritalStatusDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tDescriptionResourceKey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNTlkpMaritalStatus\nCNTlkpMaritalStatus alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tMaritalStatusID as integer,\n\t\tBOSMaritalStatusCode as string,\n\t\tMaritalStatusSortOrder as integer,\n\t\tMaritalStatusDescription as string,\n\t\tMaritalStatusDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tDescriptionResourceKey as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['MaritalStatusID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tMaritalStatusID,\n\t\tBOSMaritalStatusCode,\n\t\tMaritalStatusSortOrder,\n\t\tMaritalStatusDescription,\n\t\tMaritalStatusDescriptionShort,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tLastUpdate,\n\t\tLastUpdateUser,\n\t\tDescriptionResourceKey\n\t)) ~> ODSlkpMaritalStatus"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_cfgMembershipPromotion')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_cfgMembershipPromotion",
                                "type": "DatasetReference"
                            },
                            "name": "CNCTcfgMembershipPromotion"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_cfgMembershipPromotion",
                                "type": "DatasetReference"
                            },
                            "name": "ODScfgMembershipPromotion"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tMembershipPromotionID as integer,\n\t\tMembershipPromotionSortOrder as integer,\n\t\tMembershipPromotionDescription as string,\n\t\tMembershipPromotionDescriptionShort as string,\n\t\tMembershipPromotionTypeID as integer,\n\t\tBeginDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tAmount as decimal(6,2),\n\t\tRevenueGroupID as integer,\n\t\tBusinessSegmentID as integer,\n\t\tAdditionalSystems as integer,\n\t\tAdditionalServices as integer,\n\t\tAdditionalSolutions as integer,\n\t\tAdditionalProductKits as integer,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tAdditionalHCSL as integer,\n\t\tAdditionalStrands as integer,\n\t\tMembershipPromotionGroupID as integer,\n\t\tMembershipPromotionAdjustmentTypeID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNCTcfgMembershipPromotion\nCNCTcfgMembershipPromotion alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['MembershipPromotionID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODScfgMembershipPromotion"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_lkpCountry')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_lkpCountry",
                                "type": "DatasetReference"
                            },
                            "name": "CNCTlkpCountry"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpCountry",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpCountry"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tCountryID as integer,\n\t\tCountrySortOrder as integer,\n\t\tCountryDescription as string,\n\t\tCountryDescriptionShort as string,\n\t\tCurrencyTypeID as integer,\n\t\tValidateZipCodeFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tIsStateEnabled as boolean,\n\t\tIsAddressRequired as boolean,\n\t\tIsPhoneNumberRequired as boolean,\n\t\tPhoneNumberMask as string,\n\t\tPhoneNumberValidationRegEx as string,\n\t\tPhoneNumberDisplayFormat as string,\n\t\tPhoneCountryCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNCTlkpCountry\nCNCTlkpCountry alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCountryID as integer,\n\t\tCountrySortOrder as integer,\n\t\tCountryDescription as string,\n\t\tCountryDescriptionShort as string,\n\t\tCurrencyTypeID as integer,\n\t\tValidateZipCodeFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tIsStateEnabled as boolean,\n\t\tIsAddressRequired as boolean,\n\t\tIsPhoneNumberRequired as boolean,\n\t\tPhoneNumberMask as string,\n\t\tPhoneNumberValidationRegEx as string,\n\t\tPhoneNumberDisplayFormat as string,\n\t\tPhoneCountryCode as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['CountryID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSlkpCountry"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_lkpAccumulatorDataType')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_lkpAccumulatorDataType",
                                "type": "DatasetReference"
                            },
                            "name": "CNTlkpAccumulatorDataType"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpAccumulatorDataType",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpAccumulatorDataType"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow"
                        }
                    ],
                    "script": "source(output(\n\t\tAccumulatorDataTypeID as integer,\n\t\tAccumulatorDataTypeSortOrder as integer,\n\t\tAccumulatorDataTypeDescription as string,\n\t\tAccumulatorDataTypeDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNTlkpAccumulatorDataType\nCNTlkpAccumulatorDataType alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['AccumulatorDataTypeID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAccumulatorDataTypeID,\n\t\tAccumulatorDataTypeSortOrder,\n\t\tAccumulatorDataTypeDescription,\n\t\tAccumulatorDataTypeDescriptionShort,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tLastUpdate,\n\t\tLastUpdateUser,\n\t\tUpdateStamp\n\t)) ~> ODSlkpAccumulatorDataType"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_lkpState')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_lkpState",
                                "type": "DatasetReference"
                            },
                            "name": "CNCTlkpState"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpState",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpState"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tStateID as integer,\n\t\tStateSortOrder as integer,\n\t\tStateDescription as string,\n\t\tStateDescriptionShort as string,\n\t\tCountryID as integer,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNCTlkpState\nCNCTlkpState alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tStateID as integer,\n\t\tStateSortOrder as integer,\n\t\tStateDescription as string,\n\t\tStateDescriptionShort as string,\n\t\tCountryID as integer,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['StateID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSlkpState"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_cfgConfigurationCenter')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_cfgConfigurationCenter",
                                "type": "DatasetReference"
                            },
                            "name": "CNTcfgConfigurationCenter"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_cfgConfigurationCenter",
                                "type": "DatasetReference"
                            },
                            "name": "ODScfgConfigurationCenter"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow"
                        }
                    ],
                    "script": "source(output(\n\t\tConfigurationCenterID as integer,\n\t\tConfigurationCenterSortOrder as integer,\n\t\tCenterID as integer,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tUseCreditCardProcessorFlag as boolean,\n\t\tAccountingExportFreightBaseRate as decimal(19,4),\n\t\tAccountingExportFreightPerItemRate as decimal(19,4),\n\t\tAccountingExportReceiveAPDebitGLNumber as integer,\n\t\tFeeNotificationDays as integer,\n\t\tIsFeeProcessedCentrallyFlag as boolean,\n\t\tLastClientEFTUpdate as timestamp,\n\t\tCenterBusinessTypeID as integer,\n\t\tHasFullAccess as boolean,\n\t\tEndOfDayLastRunDate as timestamp,\n\t\tIsSalesConsultationEnabled as boolean,\n\t\tIsSalesOrderRoundingEnabled as boolean,\n\t\tIsScheduleFeatureEnabled as boolean,\n\t\tIsFulfillmentEnabled as boolean,\n\t\tIsEnhSalesConsultEnabled as boolean,\n\t\tIsAutoConfirmEnabled as boolean,\n\t\tIsNoteDeletionEnabled as boolean,\n\t\tNACHAFileProfileID as integer,\n\t\tIsNewClientEnabled as boolean,\n\t\tLanguageID as integer,\n\t\tEntityID as integer,\n\t\tIsAutomatedAgreementEnabled as boolean,\n\t\tIsAccountReceivableProcEnabled as boolean,\n\t\tHairOrderDelayDays as integer,\n\t\tIsActiveForVipAccess as boolean,\n\t\tUseCreditCardProcessorForCreditCardOnFile as boolean,\n\t\tNewBusinessSizeID as integer,\n\t\tRecurringBusinessSizeID as integer,\n\t\tIsTrichoViewEnabledForMobile as boolean,\n\t\tIsSalesConsultationEnabledForMobile as boolean,\n\t\tIsLiveWithBosley as boolean,\n\t\tCanCompleteVisitNextDay as boolean,\n\t\tIsNonSerializedInventoryEnabled as boolean,\n\t\tNewClientMembershipID as integer,\n\t\tIncludeInNationalPricingRenewal as boolean,\n\t\tIsTransferToHWEnabled as boolean,\n\t\tIsConfirmAppointmentClientContactInformationEnabled as boolean,\n\t\tIsStylistCareerPathEnabled as boolean,\n\t\tIsHWIntegrationEnabled as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNTcfgConfigurationCenter\nCNTcfgConfigurationCenter alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tConfigurationCenterID as integer,\n\t\tConfigurationCenterSortOrder as integer,\n\t\tCenterID as integer,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tUseCreditCardProcessorFlag as boolean,\n\t\tAccountingExportFreightBaseRate as decimal(19,4),\n\t\tAccountingExportFreightPerItemRate as decimal(19,4),\n\t\tAccountingExportReceiveAPDebitGLNumber as integer,\n\t\tFeeNotificationDays as integer,\n\t\tIsFeeProcessedCentrallyFlag as boolean,\n\t\tLastClientEFTUpdate as timestamp,\n\t\tCenterBusinessTypeID as integer,\n\t\tHasFullAccess as boolean,\n\t\tEndOfDayLastRunDate as timestamp,\n\t\tIsSalesConsultationEnabled as boolean,\n\t\tIsSalesOrderRoundingEnabled as boolean,\n\t\tIsScheduleFeatureEnabled as boolean,\n\t\tIsFulfillmentEnabled as boolean,\n\t\tIsEnhSalesConsultEnabled as boolean,\n\t\tIsAutoConfirmEnabled as boolean,\n\t\tIsNoteDeletionEnabled as boolean,\n\t\tNACHAFileProfileID as integer,\n\t\tIsNewClientEnabled as boolean,\n\t\tLanguageID as integer,\n\t\tEntityID as integer,\n\t\tIsAutomatedAgreementEnabled as boolean,\n\t\tIsAccountReceivableProcEnabled as boolean,\n\t\tHairOrderDelayDays as integer,\n\t\tIsActiveForVipAccess as boolean,\n\t\tUseCreditCardProcessorForCreditCardOnFile as boolean,\n\t\tNewBusinessSizeID as integer,\n\t\tRecurringBusinessSizeID as integer,\n\t\tIsTrichoViewEnabledForMobile as boolean,\n\t\tIsSalesConsultationEnabledForMobile as boolean,\n\t\tIsLiveWithBosley as boolean,\n\t\tCanCompleteVisitNextDay as boolean,\n\t\tIsNonSerializedInventoryEnabled as boolean,\n\t\tNewClientMembershipID as integer,\n\t\tIncludeInNationalPricingRenewal as boolean,\n\t\tIsTransferToHWEnabled as boolean,\n\t\tIsConfirmAppointmentClientContactInformationEnabled as boolean,\n\t\tIsStylistCareerPathEnabled as boolean,\n\t\tIsHWIntegrationEnabled as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['ConfigurationCenterID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tConfigurationCenterID,\n\t\tConfigurationCenterSortOrder,\n\t\tCenterID,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tLastUpdate,\n\t\tLastUpdateUser,\n\t\tUseCreditCardProcessorFlag,\n\t\tAccountingExportFreightBaseRate,\n\t\tAccountingExportFreightPerItemRate,\n\t\tAccountingExportReceiveAPDebitGLNumber,\n\t\tFeeNotificationDays,\n\t\tIsFeeProcessedCentrallyFlag,\n\t\tLastClientEFTUpdate,\n\t\tCenterBusinessTypeID,\n\t\tHasFullAccess,\n\t\tEndOfDayLastRunDate,\n\t\tIsSalesConsultationEnabled,\n\t\tIsSalesOrderRoundingEnabled,\n\t\tIsScheduleFeatureEnabled,\n\t\tIsFulfillmentEnabled,\n\t\tIsEnhSalesConsultEnabled,\n\t\tIsAutoConfirmEnabled,\n\t\tIsNoteDeletionEnabled,\n\t\tNACHAFileProfileID,\n\t\tIsNewClientEnabled,\n\t\tLanguageID,\n\t\tEntityID,\n\t\tIsAutomatedAgreementEnabled,\n\t\tIsAccountReceivableProcEnabled,\n\t\tHairOrderDelayDays,\n\t\tIsActiveForVipAccess,\n\t\tUseCreditCardProcessorForCreditCardOnFile,\n\t\tNewBusinessSizeID,\n\t\tRecurringBusinessSizeID,\n\t\tIsTrichoViewEnabledForMobile,\n\t\tIsSalesConsultationEnabledForMobile,\n\t\tIsLiveWithBosley,\n\t\tCanCompleteVisitNextDay,\n\t\tIsNonSerializedInventoryEnabled,\n\t\tNewClientMembershipID,\n\t\tIncludeInNationalPricingRenewal,\n\t\tIsTransferToHWEnabled,\n\t\tIsConfirmAppointmentClientContactInformationEnabled,\n\t\tIsStylistCareerPathEnabled,\n\t\tIsHWIntegrationEnabled\n\t)) ~> ODScfgConfigurationCenter"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_datAppointmentEmployee')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_datAppointmentEmployee",
                                "type": "DatasetReference"
                            },
                            "name": "CNTdatAppointmentEmployee"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datAppointmentEmployee",
                                "type": "DatasetReference"
                            },
                            "name": "ODSdatAppointmentEmployee"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tAppointmentEmployeeGUID as string,\n\t\tAppointmentGUID as string,\n\t\tEmployeeGUID as string,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNTdatAppointmentEmployee\nCNTdatAppointmentEmployee alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tAppointmentEmployeeGUID as string,\n\t\tAppointmentGUID as string,\n\t\tEmployeeGUID as string,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['AppointmentEmployeeGUID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAppointmentEmployeeGUID,\n\t\tAppointmentGUID,\n\t\tEmployeeGUID,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tLastUpdate,\n\t\tLastUpdateUser\n\t)) ~> ODSdatAppointmentEmployee"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_cfgAccumulator')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_cfgAccumulator",
                                "type": "DatasetReference"
                            },
                            "name": "CNTcfgAccumulator"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_cfgAccumulator",
                                "type": "DatasetReference"
                            },
                            "name": "ODScfgAccumulator"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow"
                        }
                    ],
                    "script": "source(output(\n\t\tAccumulatorID as integer,\n\t\tAccumulatorSortOrder as integer,\n\t\tAccumulatorDescription as string,\n\t\tAccumulatorDescriptionShort as string,\n\t\tAccumulatorDataTypeID as integer,\n\t\tSalesOrderProcessFlag as boolean,\n\t\tSchedulerProcessFlag as boolean,\n\t\tSchedulerActionTypeID as integer,\n\t\tSchedulerAdjustmentTypeID as integer,\n\t\tAdjustARBalanceFlag as boolean,\n\t\tAdjustContractPriceFlag as boolean,\n\t\tAdjustContractPaidFlag as boolean,\n\t\tIsVisibleFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tIsVisibleToClient as boolean,\n\t\tClientDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNTcfgAccumulator\nCNTcfgAccumulator alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['AccumulatorID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAccumulatorID,\n\t\tAccumulatorSortOrder,\n\t\tAccumulatorDescription,\n\t\tAccumulatorDescriptionShort,\n\t\tAccumulatorDataTypeID,\n\t\tSalesOrderProcessFlag,\n\t\tSchedulerProcessFlag,\n\t\tSchedulerActionTypeID,\n\t\tSchedulerAdjustmentTypeID,\n\t\tAdjustARBalanceFlag,\n\t\tAdjustContractPriceFlag,\n\t\tAdjustContractPaidFlag,\n\t\tIsVisibleFlag,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tLastUpdate,\n\t\tLastUpdateUser,\n\t\tUpdateStamp,\n\t\tIsVisibleToClient,\n\t\tClientDescription\n\t)) ~> ODScfgAccumulator"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_lkpSalesCodeDivision')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpSalesCodeDivision",
                                "type": "DatasetReference"
                            },
                            "name": "CNCTlkpSalesCodeDivision"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpSalesCodeDivision",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpSalesCodeDivision"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Upsert"
                        }
                    ],
                    "script": "source(output(\n\t\tSalesCodeDivisionID as integer,\n\t\tSalesCodeDivisionSortOrder as integer,\n\t\tSalesCodeDivisionDescription as string,\n\t\tSalesCodeDivisionDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> CNCTlkpSalesCodeDivision\nCNCTlkpSalesCodeDivision alterRow(upsertIf(true())) ~> Upsert\nUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesCodeDivisionID as integer,\n\t\tSalesCodeDivisionSortOrder as integer,\n\t\tSalesCodeDivisionDescription as string,\n\t\tSalesCodeDivisionDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['SalesCodeDivisionID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesCodeDivisionID,\n\t\tSalesCodeDivisionSortOrder,\n\t\tSalesCodeDivisionDescription,\n\t\tSalesCodeDivisionDescriptionShort,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tLastUpdate,\n\t\tLastUpdateUser\n\t)) ~> ODSlkpSalesCodeDivision"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimOccupation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpOccupation",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpOccupation"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimOccupation",
                                "type": "DatasetReference"
                            },
                            "name": "DimOccupation"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimOccupation",
                                "type": "DatasetReference"
                            },
                            "name": "UpdateDimOccupation"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimOccupation",
                                "type": "DatasetReference"
                            },
                            "name": "InsertDimOccupation"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "DaysToLoad"
                        },
                        {
                            "name": "SelectColumns"
                        },
                        {
                            "name": "Hash"
                        },
                        {
                            "name": "CustomColumns"
                        },
                        {
                            "name": "SelectHash"
                        },
                        {
                            "name": "Exists"
                        },
                        {
                            "name": "AlterRow"
                        },
                        {
                            "name": "NotExists"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tOccupationID as integer,\n\t\tBOSOccupationCode as string,\n\t\tOccupationSortOrder as integer,\n\t\tOccupationDescription as string,\n\t\tOccupationDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tDescriptionResourceKey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSlkpOccupation\nsource(output(\n\t\tOccupationKey as integer,\n\t\tOccupationName as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string,\n\t\tOccupationID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> DimOccupation\nODSlkpOccupation filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(OccupationID)) ~> DaysToLoad\nDaysToLoad select(mapColumn(\n\t\tOccupationID,\n\t\tOccupationDescription,\n\t\tIsActiveFlag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nCustomColumns derive(Hash = sha2(256, concat(OccupationDescription, SourceSystem))) ~> Hash\nSelectColumns derive(DWH_CreatedDate = currentTimestamp(),\n\t\tDWH_LastUpdateDate = currentTimestamp(),\n\t\tSourceSystem = 'Conect',\n\t\tOccupationName = trim(OccupationDescription)) ~> CustomColumns\nDimOccupation select(mapColumn(\n\t\tHash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectHash\nHash, SelectHash exists(Hash@Hash == SelectHash@Hash,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nExists alterRow(updateIf(true())) ~> AlterRow\nHash, SelectHash exists(Hash@Hash == SelectHash@Hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExists\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOccupationKey as integer,\n\t\tOccupationName as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string,\n\t\tOccupationID as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Hash'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tOccupationName,\n\t\tHash,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive = IsActiveFlag,\n\t\tSourceSystem,\n\t\tOccupationID\n\t)) ~> UpdateDimOccupation\nNotExists sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOccupationKey as integer,\n\t\tOccupationName as string,\n\t\tHash as string,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string,\n\t\tOccupationID as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tOccupationName,\n\t\tHash,\n\t\tDWH_CreatedDate,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive = IsActiveFlag,\n\t\tSourceSystem,\n\t\tOccupationID\n\t)) ~> InsertDimOccupation"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimSalesOrderType')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpSalesOrderType",
                                "type": "DatasetReference"
                            },
                            "name": "lkpSalesOrderType"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesOrderType",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesOrderType"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Upsert"
                        },
                        {
                            "name": "LastColumnsUpdate"
                        }
                    ],
                    "script": "source(output(\n\t\tSalesOrderTypeID as integer,\n\t\tSalesOrderTypeSortOrder as integer,\n\t\tSalesOrderTypeDescription as string,\n\t\tSalesOrderTypeDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> lkpSalesOrderType\nlkpSalesOrderType alterRow(upsertIf(true())) ~> Upsert\nUpsert derive(SourceSystem = 'cONEct',\n\t\tDWH_LastUpdateDate = currentTimestamp(),\n\t\tDWH_LoadDate = currentTimestamp(),\n\t\tSalesOrderTypeDescriptionShort_trim = coalesce(toString((ltrim(rtrim(SalesOrderTypeDescriptionShort)))),'')) ~> LastColumnsUpdate\nLastColumnsUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesOrderTypeKey as integer,\n\t\tSalesOrderTypeId as integer,\n\t\tSalesOrderTypeDescription as string,\n\t\tSalesOrderTypeDescriptionShort as string,\n\t\tLastModifiedDate as timestamp,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tSourceSystem as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['SalesOrderTypeId'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesOrderTypeId = SalesOrderTypeID,\n\t\tSalesOrderTypeDescription,\n\t\tSalesOrderTypeDescriptionShort,\n\t\tLastModifiedDate = LastUpdate,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tSourceSystem,\n\t\tDWH_LoadDate,\n\t\tDWH_LastUpdateDate\n\t)) ~> DimSalesOrderType"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimSalesCodeDepartment')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpSalesCodeDepartment",
                                "type": "DatasetReference"
                            },
                            "name": "ODSSalesCodeDepartment"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpSalesCodeDivision",
                                "type": "DatasetReference"
                            },
                            "name": "ODSSalesCodeDivision"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesCodeDepartment",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesCodeDepartment"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterLastUpdate"
                        },
                        {
                            "name": "SelectFieldsDepartment"
                        },
                        {
                            "name": "SelectFieldsDivisionName"
                        },
                        {
                            "name": "JoinDivision"
                        },
                        {
                            "name": "FinalColumns"
                        },
                        {
                            "name": "SelectFinalColumns"
                        },
                        {
                            "name": "Upsert"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tSalesCodeDepartmentID as integer,\n\t\tSalesCodeDepartmentSortOrder as integer,\n\t\tSalesCodeDepartmentDescription as string,\n\t\tSalesCodeDepartmentDescriptionShort as string,\n\t\tSalesCodeDivisionID as integer,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSSalesCodeDepartment\nsource(output(\n\t\tSalesCodeDivisionID as integer,\n\t\tSalesCodeDivisionSortOrder as integer,\n\t\tSalesCodeDivisionDescription as string,\n\t\tSalesCodeDivisionDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSSalesCodeDivision\nODSSalesCodeDepartment filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(SalesCodeDepartmentID)) ~> FilterLastUpdate\nFilterLastUpdate select(mapColumn(\n\t\tSalesCodeDepartmentID,\n\t\tSalesCodeDepartmentDescription,\n\t\tSalesCodeDepartmentDescriptionShort,\n\t\tSalesCodeDivisionID,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tLastUpdate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFieldsDepartment\nODSSalesCodeDivision select(mapColumn(\n\t\tSalesCodeDivisionID,\n\t\tSalesCodeDivisionDescription,\n\t\tSalesCodeDivisionDescriptionShort\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFieldsDivisionName\nSelectFieldsDepartment, SelectFieldsDivisionName join(SelectFieldsDepartment@SalesCodeDivisionID == SelectFieldsDivisionName@SalesCodeDivisionID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDivision\nJoinDivision derive(SalesCodeDepartmentID = SalesCodeDepartmentID,\n\t\tSalesCodeDepartmentName = initCap(SalesCodeDepartmentDescription),\n\t\tSalesCodeDepartmentNameShort = SalesCodeDepartmentDescriptionShort,\n\t\tSalesCodeDivisionID = SelectFieldsDepartment@SalesCodeDivisionID,\n\t\tSalesCodeDivisionName = initCap(SalesCodeDivisionDescription),\n\t\tSalesCodeDivisionNameShort = SalesCodeDivisionDescriptionShort,\n\t\tIsActive = IsActiveFlag,\n\t\tSalesCodeDepartmentCreateDate = CreateDate,\n\t\tSalesCodeDepartmentLastUpdateDate = LastUpdate,\n\t\tDWH_LoadDate = currentTimestamp(),\n\t\tDWH_LastUpdateDate = currentTimestamp(),\n\t\tSourceSystem = 'Conect') ~> FinalColumns\nFinalColumns select(mapColumn(\n\t\teach(match(stream=='FinalColumns'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalColumns\nSelectFinalColumns alterRow(upsertIf(true())) ~> Upsert\nUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesCodeDepartmentKey as integer,\n\t\tSalesCodeDepartmentID as integer,\n\t\tSalesCodeDepartmentName as string,\n\t\tSalesCodeDepartmentNameShort as string,\n\t\tSalesCodeDivisionID as integer,\n\t\tSalesCodeDivisionName as string,\n\t\tSalesCodeDivisionNameShort as string,\n\t\tSalesCodeDepartmentCreateDate as timestamp,\n\t\tSalesCodeDepartmentLastUpdateDate as timestamp,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['SalesCodeDepartmentID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesCodeDepartmentID,\n\t\tSalesCodeDepartmentName,\n\t\tSalesCodeDepartmentNameShort,\n\t\tSalesCodeDivisionID,\n\t\tSalesCodeDivisionName,\n\t\tSalesCodeDivisionNameShort,\n\t\tSalesCodeDepartmentCreateDate,\n\t\tSalesCodeDepartmentLastUpdateDate,\n\t\tDWH_LoadDate,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive,\n\t\tSourceSystem\n\t)) ~> DimSalesCodeDepartment"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimCustomer')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datClient",
                                "type": "DatasetReference"
                            },
                            "name": "ODSDatClient"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCenter",
                                "type": "DatasetReference"
                            },
                            "name": "DimCenter"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimGeography",
                                "type": "DatasetReference"
                            },
                            "name": "DimGeography"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimGender",
                                "type": "DatasetReference"
                            },
                            "name": "DimGender"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_Gender",
                                "type": "DatasetReference"
                            },
                            "name": "ODSGender"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimLanguage",
                                "type": "DatasetReference"
                            },
                            "name": "DimLanguage"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomer",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomer"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpLanguage",
                                "type": "DatasetReference"
                            },
                            "name": "ODSLanguage"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomer",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomerf"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomer",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomerSink"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "SelectColumns"
                        },
                        {
                            "name": "FilterDate"
                        },
                        {
                            "name": "SelectCenterKey"
                        },
                        {
                            "name": "JoinDimCenter"
                        },
                        {
                            "name": "SelectGeographyKey"
                        },
                        {
                            "name": "JoinDimGeography"
                        },
                        {
                            "name": "FilterGroup"
                        },
                        {
                            "name": "SelectGenderKey"
                        },
                        {
                            "name": "JoinDimGender"
                        },
                        {
                            "name": "SelectODSGenderID"
                        },
                        {
                            "name": "JoinGender"
                        },
                        {
                            "name": "SelectGenderID"
                        },
                        {
                            "name": "SelectLanguageKey"
                        },
                        {
                            "name": "FinalColumns"
                        },
                        {
                            "name": "SelectColumnsF"
                        },
                        {
                            "name": "SelectCustomerGUID"
                        },
                        {
                            "name": "NotExists"
                        },
                        {
                            "name": "AddCreationUdpDates"
                        },
                        {
                            "name": "Exists"
                        },
                        {
                            "name": "AddUpdateDate"
                        },
                        {
                            "name": "AlterRow"
                        },
                        {
                            "name": "SelectLanguageDescrip"
                        },
                        {
                            "name": "JoinLanguage"
                        },
                        {
                            "name": "SelectLanguageFinal"
                        },
                        {
                            "name": "JoinLanguages"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tClientGUID as string,\n\t\tClientIdentifier as integer,\n\t\tClientNumber_Temp as integer,\n\t\tCenterID as integer,\n\t\tCountryID as integer,\n\t\tSalutationID as integer,\n\t\tContactID as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCity as string,\n\t\tStateID as integer,\n\t\tPostalCode as string,\n\t\tARBalance as decimal(19,4),\n\t\tGenderID as integer,\n\t\tDateOfBirth as timestamp,\n\t\tDoNotCallFlag as boolean,\n\t\tDoNotContactFlag as boolean,\n\t\tIsHairModelFlag as boolean,\n\t\tIsTaxExemptFlag as boolean,\n\t\tEMailAddress as string,\n\t\tTextMessageAddress as string,\n\t\tPhone1 as string,\n\t\tPhone2 as string,\n\t\tPhone3 as string,\n\t\tPhone1TypeID as integer,\n\t\tPhone2TypeID as integer,\n\t\tPhone3TypeID as integer,\n\t\tIsPhone1PrimaryFlag as boolean,\n\t\tIsPhone2PrimaryFlag as boolean,\n\t\tIsPhone3PrimaryFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tIsHairSystemClientFlag as boolean,\n\t\tTaxExemptNumber as string,\n\t\tCurrentBioMatrixClientMembershipGUID as string,\n\t\tCurrentSurgeryClientMembershipGUID as string,\n\t\tCurrentExtremeTherapyClientMembershipGUID as string,\n\t\tIsAutoConfirmTextPhone1 as boolean,\n\t\tIsAutoConfirmTextPhone2 as boolean,\n\t\tIsAutoConfirmTextPhone3 as boolean,\n\t\tImportCreateDate as timestamp,\n\t\tImportLastUpdate as timestamp,\n\t\tClientMembershipCounter as integer,\n\t\tRequiredNoteReview as boolean,\n\t\tSiebelID as string,\n\t\tEmergencyContactPhone as string,\n\t\tBosleyProcedureOffice as string,\n\t\tBosleyConsultOffice as string,\n\t\tIsAutoConfirmEmail as boolean,\n\t\tIsEmailUndeliverable as boolean,\n\t\tAcquiredDate as timestamp,\n\t\tCurrentXtrandsClientMembershipGUID as string,\n\t\tExpectedConversionDate as timestamp,\n\t\tLanguageID as integer,\n\t\tIsConfirmCallPhone1 as boolean,\n\t\tIsConfirmCallPhone2 as boolean,\n\t\tIsConfirmCallPhone3 as boolean,\n\t\tAnniversaryDate as timestamp,\n\t\tCanConfirmAppointmentByEmail as boolean,\n\t\tCanContactForPromotionsByEmail as boolean,\n\t\tDoNotVisitInRoom as boolean,\n\t\tDoNotMoveAppointments as boolean,\n\t\tIsAutoRenewDisabled as boolean,\n\t\tKorvueID as string,\n\t\tSalesforceContactID as string,\n\t\tClientFullNameAltCalc as string,\n\t\tClientFullNameCalc as string,\n\t\tClientFullNameAlt2Calc as string,\n\t\tClientFullNameAlt3Calc as string,\n\t\tAgeCalc as integer,\n\t\tIsBioGraftClient as boolean,\n\t\tCurrentMDPClientMembershipGUID as string,\n\t\tLeadCreateDate as date,\n\t\tBosleySalesforceAccountID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSDatClient\nsource(output(\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tCenterPayGroupID as integer,\n\t\tCenterDescription as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCenterGeographykey as integer,\n\t\tCenterPostalCode as string,\n\t\tCenterPhone1 as string,\n\t\tCenterPhone2 as string,\n\t\tCenterPhone3 as string,\n\t\tPhone1TypeID as integer,\n\t\tPhone2TypeID as integer,\n\t\tPhone3TypeID as integer,\n\t\tIsPhone1PrimaryFlag as boolean,\n\t\tIsPhone2PrimaryFlag as boolean,\n\t\tIsPhone3PrimaryFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tLastUpdate as timestamp,\n\t\tUpdateStamp as string,\n\t\tCenterNumber as integer,\n\t\tCenterOwnershipID as integer,\n\t\tCenterOwnershipSortOrder as integer,\n\t\tCenterOwnershipDescription as string,\n\t\tCenterOwnershipDescriptionShort as string,\n\t\tOwnerLastName as string,\n\t\tOwnerFirstName as string,\n\t\tCorporateName as string,\n\t\tOwnershipAddress1 as string,\n\t\tOwnershipAddress2 as string,\n\t\tOwnershipGeographykey as integer,\n\t\tOwnershipPostalCode as string,\n\t\tCenterTypeID as integer,\n\t\tCenterTypeSortOrder as integer,\n\t\tCenterTypeDescription as string,\n\t\tCenterTypeDescriptionShort as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string,\n\t\tTimeZoneID as integer,\n\t\tServiceTerritoryId as string,\n\t\tIsDeleted as boolean,\n\t\tRegion1 as string,\n\t\tRegion2 as string,\n\t\tRegioAM as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCenter\nsource(output(\n\t\tGeographyKey as integer,\n\t\tDigitZIPCode as string,\n\t\tLongitudeZIPCode as double,\n\t\tLatitudeZIPCode as double,\n\t\tZIPCodeClassification as string,\n\t\tNameOfCityOrORG as string,\n\t\tFIPSCode as integer,\n\t\tTwoLetterAbbrevForState as string,\n\t\tFullNameOfStateOrTerritory as string,\n\t\tFIPSCountyCode as integer,\n\t\tNameOfCounty as string,\n\t\tMetroStatisticalAreaCode as integer,\n\t\tSingleAreaCodeForZIPCode as integer,\n\t\tMultipleAreaCodesForZIPCode as string,\n\t\tTimeZoneForZIPCode as string,\n\t\tHrsDiff as integer,\n\t\tZIPCodeObeysDaylightSavings as boolean,\n\t\tUSPSPostOfficeName as string,\n\t\tUSPSAlternateNamesOfCity as string,\n\t\tLocalAlternateNamesOfCity as string,\n\t\tCleanCITYNameForGeocoding as string,\n\t\tCleanSTATENAMEForGeocoding as string,\n\t\tFIPSStateNumericCode as integer,\n\t\tName as string,\n\t\tDMADescription as string,\n\t\tDMAMarketRegion as string,\n\t\tDMACode as integer,\n\t\tDMANameNielsen as string,\n\t\tDMANameInternal as string,\n\t\tDMANameAlternate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimGeography\nsource(output(\n\t\tGenderKey as integer,\n\t\tGenderCode as string,\n\t\tGenderName as string,\n\t\tGenderGroup as string,\n\t\tdwh_loaddate as timestamp,\n\t\tdwh_lastupdated as timestamp,\n\t\tisActive as integer,\n\t\tsourcesystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimGender\nsource(output(\n\t\tGenderID as integer,\n\t\tGenderSortOrder as integer,\n\t\tGenderDescription as string,\n\t\tGenderDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tDescriptionResourceKey as string,\n\t\tDescriptionShortResourceKey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSGender\nsource(output(\n\t\tLanguageKey as integer,\n\t\tLanguageName as string,\n\t\tLanguageShortCode as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string,\n\t\tHash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimLanguage\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerGUID as string,\n\t\tCustomerIdentifier as string,\n\t\tCenterkey as integer,\n\t\tCenterId as string,\n\t\tCountryId as string,\n\t\tContactId as string,\n\t\tCustomerFirstName as string,\n\t\tCustomerMiddleName as string,\n\t\tCustomerLastName as string,\n\t\tCustomerAddress1 as string,\n\t\tCustomerCity as string,\n\t\tGeographyKey as integer,\n\t\tStateId as string,\n\t\tPostalCode as string,\n\t\tGenderkey as integer,\n\t\tGenderId as integer,\n\t\tDateOfBirth as date,\n\t\tDoNotCallFlag as boolean,\n\t\tDoNotContactFlag as boolean,\n\t\tIsHairModelFlag as boolean,\n\t\tEmailAddress as string,\n\t\tPhone1 as string,\n\t\tPhone2 as string,\n\t\tLanguageKey as integer,\n\t\tLanguageId as string,\n\t\tSalesforceContactId as string,\n\t\tLeadCreateDate as date,\n\t\tBosleySalesforceAccountID as string,\n\t\tSourceSystem as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tCustomerCreatedDate as timestamp,\n\t\tCustomerLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCustomer\nsource(output(\n\t\tLanguageID as integer,\n\t\tLanguageSortOrder as integer,\n\t\tLanguageDescription as string,\n\t\tLanguageDescriptionShort as string,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tOnContactLanguageCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSLanguage\nFilterDate select(mapColumn(\n\t\tClientGUID,\n\t\tClientIdentifier,\n\t\tCenterID,\n\t\tCountryID,\n\t\tContactID,\n\t\tFirstName,\n\t\tMiddleName,\n\t\tLastName,\n\t\tAddress1,\n\t\tCity,\n\t\tStateID,\n\t\tPostalCode,\n\t\tGenderID,\n\t\tDateOfBirth,\n\t\tDoNotCallFlag,\n\t\tDoNotContactFlag,\n\t\tIsHairModelFlag,\n\t\tEMailAddress,\n\t\tPhone1,\n\t\tPhone2,\n\t\tLanguageID,\n\t\tLeadCreateDate,\n\t\tBosleySalesforceAccountID,\n\t\tSalesforceContactID,\n\t\tCreateDate,\n\t\tLastUpdate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nODSDatClient filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1)) ~> FilterDate\nDimCenter select(mapColumn(\n\t\tCenterKey,\n\t\tCenterID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCenterKey\nSelectColumns, SelectCenterKey join(SelectColumns@CenterID == SelectCenterKey@CenterID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimCenter\nDimGeography select(mapColumn(\n\t\tGeographyKey,\n\t\tDigitZIPCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGeographyKey\nJoinDimCenter, SelectGeographyKey join(PostalCode == DigitZIPCode,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimGeography\nDimGender filter(GenderGroup== 'Lead') ~> FilterGroup\nFilterGroup select(mapColumn(\n\t\tGenderKey,\n\t\tGenderCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGenderKey\nJoinDimGeography, SelectGenderID join(SelectColumns@GenderID == SelectGenderID@GenderID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimGender\nODSGender select(mapColumn(\n\t\tGenderID,\n\t\tGenderDescriptionShort\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectODSGenderID\nSelectGenderKey, SelectODSGenderID join(GenderCode == GenderDescriptionShort,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinGender\nJoinGender select(mapColumn(\n\t\tGenderKey,\n\t\tGenderID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGenderID\nDimLanguage select(mapColumn(\n\t\tLanguageKey,\n\t\tLanguageName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLanguageKey\nJoinLanguages derive(CustomerGUID = ClientGUID,\n\t\tCustomerIdentifier = toString(ClientIdentifier),\n\t\tCenterKey = CenterKey,\n\t\tCenterId = toString(SelectColumns@CenterID),\n\t\tCountryId = toString(CountryID),\n\t\tCustomerFirstName = iif(regexMatch(FirstName,`[a-zA-Z]+`), initCap(regexReplace(FirstName, `([0-9])|[!@#$%^&*(),.?:;+´~|\\[\\]{}|<>\\/_-]`,'')) ,initCap(regexReplace(FirstName, `[()-]`,''))),\n\t\tCustomerMiddleName = iif(regexMatch(MiddleName,`[a-zA-Z]+`), initCap(regexReplace(MiddleName, `([0-9])|[!@#$%^&*(),.?:;+´~|\\[\\]{}|<>\\/_-]`,'')) ,initCap(regexReplace(MiddleName, `[()-]`,''))),\n\t\tCustomerLastName = iif(regexMatch(LastName,`[a-zA-Z]+`), initCap(regexReplace(LastName, `([0-9])|[!@#$%^&*(),.?:;+´~|\\[\\]{}|<>\\/_-]`,'')) ,initCap(regexReplace(LastName, `[()-]`,''))),\n\t\tCustomerAddress1 = Address1,\n\t\tCustomerCity = initCap(City),\n\t\tGeographyKey = coalesce(GeographyKey,-1),\n\t\tStateId = toString(StateID),\n\t\tPostalCode = PostalCode,\n\t\tGenderKey = coalesce(GenderKey, -1),\n\t\tGenderId = toInteger(SelectColumns@GenderID),\n\t\tDateOfBirth = toDate(DateOfBirth),\n\t\tDoNotCallFlag = DoNotCallFlag,\n\t\tDoNotContactFlag = DoNotContactFlag,\n\t\tIsHairModelFlag = IsHairModelFlag,\n\t\tEMailAddress = EMailAddress,\n\t\tPhone1 = Phone1,\n\t\tPhone2 = Phone2,\n\t\tLanguageKey = coalesce(LanguageKey,-1),\n\t\tLanguageId = toString(SelectColumns@LanguageID),\n\t\tSalesforceContactId = SalesforceContactID,\n\t\tBosleySalesforceAccountId = BosleySalesforceAccountID,\n\t\tSourceSystem = 'Conect',\n\t\tIsActive = 1,\n\t\tCustomerCreateDate = CreateDate,\n\t\tCustomerLastUpdateDate = LastUpdate) ~> FinalColumns\nFinalColumns select(mapColumn(\n\t\teach(match(stream=='FinalColumns'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsF\nDimCustomer select(mapColumn(\n\t\tCustomerGUID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerGUID\nSelectColumnsF, SelectCustomerGUID exists(SelectColumnsF@CustomerGUID == SelectCustomerGUID@CustomerGUID,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExists\nNotExists derive(DWH_LoadDate = currentTimestamp(),\n\t\tDWH_LastUpdateDate = currentTimestamp()) ~> AddCreationUdpDates\nSelectColumnsF, SelectCustomerGUID exists(SelectColumnsF@CustomerGUID == SelectCustomerGUID@CustomerGUID,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nExists derive(DWH_LastUpdateDate = currentTimestamp()) ~> AddUpdateDate\nAddUpdateDate alterRow(updateIf(true())) ~> AlterRow\nODSLanguage select(mapColumn(\n\t\tLanguageID,\n\t\tLanguageDescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLanguageDescrip\nSelectLanguageKey, SelectLanguageDescrip join(LanguageName == LanguageDescription,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinLanguage\nJoinLanguage select(mapColumn(\n\t\tLanguageKey,\n\t\tLanguageID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLanguageFinal\nJoinDimGender, SelectLanguageFinal join(SelectColumns@LanguageID == SelectLanguageFinal@LanguageID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLanguages\nAddCreationUdpDates sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCustomerKey as integer,\n\t\tCustomerGUID as string,\n\t\tCustomerIdentifier as string,\n\t\tCenterkey as integer,\n\t\tCenterId as string,\n\t\tCountryId as string,\n\t\tContactId as string,\n\t\tCustomerFirstName as string,\n\t\tCustomerMiddleName as string,\n\t\tCustomerLastName as string,\n\t\tCustomerAddress1 as string,\n\t\tCustomerCity as string,\n\t\tGeographyKey as integer,\n\t\tStateId as string,\n\t\tPostalCode as string,\n\t\tGenderkey as integer,\n\t\tGenderId as integer,\n\t\tDateOfBirth as date,\n\t\tDoNotCallFlag as boolean,\n\t\tDoNotContactFlag as boolean,\n\t\tIsHairModelFlag as boolean,\n\t\tEmailAddress as string,\n\t\tPhone1 as string,\n\t\tPhone2 as string,\n\t\tLanguageKey as integer,\n\t\tLanguageId as string,\n\t\tSalesforceContactId as string,\n\t\tLeadCreateDate as date,\n\t\tBosleySalesforceAccountID as string,\n\t\tSourceSystem as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tCustomerCreatedDate as timestamp,\n\t\tCustomerLastUpdateDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomerGUID,\n\t\tCustomerIdentifier,\n\t\tCenterkey = CenterKey,\n\t\tCenterId,\n\t\tCountryId,\n\t\tContactId = ContactID,\n\t\tCustomerFirstName,\n\t\tCustomerMiddleName,\n\t\tCustomerLastName,\n\t\tCustomerAddress1,\n\t\tCustomerCity,\n\t\tGeographyKey,\n\t\tStateId,\n\t\tPostalCode,\n\t\tGenderkey = GenderKey,\n\t\tGenderId,\n\t\tDateOfBirth,\n\t\tDoNotCallFlag,\n\t\tDoNotContactFlag,\n\t\tIsHairModelFlag,\n\t\tEmailAddress = EMailAddress,\n\t\tPhone1,\n\t\tPhone2,\n\t\tLanguageKey,\n\t\tLanguageId,\n\t\tSalesforceContactId,\n\t\tLeadCreateDate,\n\t\tBosleySalesforceAccountID = BosleySalesforceAccountId,\n\t\tSourceSystem,\n\t\tDWH_LoadDate,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive,\n\t\tCustomerCreatedDate = CustomerCreateDate,\n\t\tCustomerLastUpdateDate\n\t)) ~> DimCustomerf\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCustomerKey as integer,\n\t\tCustomerGUID as string,\n\t\tCustomerIdentifier as string,\n\t\tCenterkey as integer,\n\t\tCenterId as string,\n\t\tCountryId as string,\n\t\tContactId as string,\n\t\tCustomerFirstName as string,\n\t\tCustomerMiddleName as string,\n\t\tCustomerLastName as string,\n\t\tCustomerAddress1 as string,\n\t\tCustomerCity as string,\n\t\tGeographyKey as integer,\n\t\tStateId as string,\n\t\tPostalCode as string,\n\t\tGenderkey as integer,\n\t\tGenderId as integer,\n\t\tDateOfBirth as date,\n\t\tDoNotCallFlag as boolean,\n\t\tDoNotContactFlag as boolean,\n\t\tIsHairModelFlag as boolean,\n\t\tEmailAddress as string,\n\t\tPhone1 as string,\n\t\tPhone2 as string,\n\t\tLanguageKey as integer,\n\t\tLanguageId as string,\n\t\tSalesforceContactId as string,\n\t\tLeadCreateDate as date,\n\t\tBosleySalesforceAccountID as string,\n\t\tSourceSystem as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tCustomerCreatedDate as timestamp,\n\t\tCustomerLastUpdateDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['CustomerGUID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomerGUID,\n\t\tCustomerIdentifier,\n\t\tCenterkey = CenterKey,\n\t\tCenterId,\n\t\tCountryId,\n\t\tContactId = ContactID,\n\t\tCustomerFirstName,\n\t\tCustomerMiddleName,\n\t\tCustomerLastName,\n\t\tCustomerAddress1,\n\t\tCustomerCity,\n\t\tGeographyKey,\n\t\tStateId,\n\t\tPostalCode,\n\t\tGenderkey = GenderKey,\n\t\tGenderId,\n\t\tDateOfBirth,\n\t\tDoNotCallFlag,\n\t\tDoNotContactFlag,\n\t\tIsHairModelFlag,\n\t\tEmailAddress = EMailAddress,\n\t\tPhone1,\n\t\tPhone2,\n\t\tLanguageKey,\n\t\tLanguageId,\n\t\tSalesforceContactId,\n\t\tLeadCreateDate,\n\t\tBosleySalesforceAccountID = BosleySalesforceAccountId,\n\t\tSourceSystem,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive,\n\t\tCustomerCreatedDate = CustomerCreateDate,\n\t\tCustomerLastUpdateDate\n\t)) ~> DimCustomerSink"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimCustomerMembership')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Load the necessary columns from ODS.CNCT_cfgMembership to DimMembership dimension.",
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datClientMembership",
                                "type": "DatasetReference"
                            },
                            "name": "ODSClientMembership"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomer",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomer"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCenter",
                                "type": "DatasetReference"
                            },
                            "name": "DimCenter"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimMembership",
                                "type": "DatasetReference"
                            },
                            "name": "DimMembership"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimDate",
                                "type": "DatasetReference"
                            },
                            "name": "DimDate"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpClientMembershipStatus",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpClientMembershipStatus"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomerMembership",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomerMembership"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomerMembership",
                                "type": "DatasetReference"
                            },
                            "name": "UpdateDimCustomerMembership"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomerMembership",
                                "type": "DatasetReference"
                            },
                            "name": "InsertCustomerMembership"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "LastUpdateAndMembershipIDFilter"
                        },
                        {
                            "name": "SelectColumns"
                        },
                        {
                            "name": "Update"
                        },
                        {
                            "name": "JoinDimCustomer"
                        },
                        {
                            "name": "SelectFinalColumns"
                        },
                        {
                            "name": "JoinDimCenter"
                        },
                        {
                            "name": "JoinDimMembership"
                        },
                        {
                            "name": "SelectCustomerKey"
                        },
                        {
                            "name": "SelectKeyCenter"
                        },
                        {
                            "name": "SelectKeyMembership"
                        },
                        {
                            "name": "JoinDimDateBegin"
                        },
                        {
                            "name": "SelectKeyBeginDate"
                        },
                        {
                            "name": "JoinDimDateEndDate"
                        },
                        {
                            "name": "SelectKeyCancelDate"
                        },
                        {
                            "name": "SelectKeyEndDate"
                        },
                        {
                            "name": "JoinDimDateCancel"
                        },
                        {
                            "name": "FinalColumns1"
                        },
                        {
                            "name": "SelectClientMembershipName"
                        },
                        {
                            "name": "JoinlkpCliemMembershipStatus"
                        },
                        {
                            "name": "SelectCustomerMembershipID"
                        },
                        {
                            "name": "Exists"
                        },
                        {
                            "name": "NotExists"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tClientMembershipGUID as string,\n\t\tMember1_ID_Temp as integer,\n\t\tClientGUID as string,\n\t\tCenterID as integer,\n\t\tMembershipID as integer,\n\t\tClientMembershipStatusID as integer,\n\t\tContractPrice as decimal(19,4),\n\t\tContractPaidAmount as decimal(19,4),\n\t\tMonthlyFee as decimal(19,4),\n\t\tBeginDate as date,\n\t\tEndDate as date,\n\t\tMembershipCancelReasonID as integer,\n\t\tCancelDate as timestamp,\n\t\tIsGuaranteeFlag as boolean,\n\t\tIsRenewalFlag as boolean,\n\t\tIsMultipleSurgeryFlag as boolean,\n\t\tRenewalCount as integer,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tClientMembershipIdentifier as string,\n\t\tMembershipCancelReasonDescription as string,\n\t\tHasInHousePaymentPlan as boolean,\n\t\tNationalMonthlyFee as decimal(19,4),\n\t\tMembershipProfileTypeID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> ODSClientMembership\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerGUID as string,\n\t\tCustomerIdentifier as string,\n\t\tCenterkey as integer,\n\t\tCenterId as string,\n\t\tCountryId as string,\n\t\tContactId as string,\n\t\tCustomerFirstName as string,\n\t\tCustomerMiddleName as string,\n\t\tCustomerLastName as string,\n\t\tCustomerAddress1 as string,\n\t\tCustomerCity as string,\n\t\tGeographyKey as integer,\n\t\tStateId as string,\n\t\tPostalCode as string,\n\t\tGenderkey as integer,\n\t\tGenderId as integer,\n\t\tDateOfBirth as date,\n\t\tDoNotCallFlag as boolean,\n\t\tDoNotContactFlag as boolean,\n\t\tIsHairModelFlag as boolean,\n\t\tEmailAddress as string,\n\t\tPhone1 as string,\n\t\tPhone2 as string,\n\t\tLanguageKey as integer,\n\t\tLanguageId as string,\n\t\tSalesforceContactId as string,\n\t\tLeadCreateDate as date,\n\t\tBosleySalesforceAccountID as string,\n\t\tSourceSystem as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> DimCustomer\nsource(output(\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tCenterPayGroupID as integer,\n\t\tCenterDescription as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCenterGeographykey as integer,\n\t\tCenterPostalCode as string,\n\t\tCenterPhone1 as string,\n\t\tCenterPhone2 as string,\n\t\tCenterPhone3 as string,\n\t\tPhone1TypeID as integer,\n\t\tPhone2TypeID as integer,\n\t\tPhone3TypeID as integer,\n\t\tIsPhone1PrimaryFlag as boolean,\n\t\tIsPhone2PrimaryFlag as boolean,\n\t\tIsPhone3PrimaryFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tLastUpdate as timestamp,\n\t\tUpdateStamp as string,\n\t\tCenterNumber as integer,\n\t\tCenterOwnershipID as integer,\n\t\tCenterOwnershipSortOrder as integer,\n\t\tCenterOwnershipDescription as string,\n\t\tCenterOwnershipDescriptionShort as string,\n\t\tOwnerLastName as string,\n\t\tOwnerFirstName as string,\n\t\tCorporateName as string,\n\t\tOwnershipAddress1 as string,\n\t\tOwnershipAddress2 as string,\n\t\tOwnershipGeographykey as integer,\n\t\tOwnershipPostalCode as string,\n\t\tCenterTypeID as integer,\n\t\tCenterTypeSortOrder as integer,\n\t\tCenterTypeDescription as string,\n\t\tCenterTypeDescriptionShort as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string,\n\t\tTimeZoneID as integer,\n\t\tServiceTerritoryId as string,\n\t\tIsDeleted as boolean,\n\t\tRegion1 as string,\n\t\tRegion2 as string,\n\t\tRegioAM as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> DimCenter\nsource(output(\n\t\tMembershipKey as integer,\n\t\tMembershipID as integer,\n\t\tMembershipName as string,\n\t\tMembershipShortName as string,\n\t\tBusinessSegmentKey as integer,\n\t\tBusinessSegmentID as integer,\n\t\tRevenueGroupKey as integer,\n\t\tRevenueGroupID as integer,\n\t\tGenderKey as integer,\n\t\tGenderID as string,\n\t\tDurationMonths as integer,\n\t\tContractPrice as decimal(18,0),\n\t\tMonthlyFee as decimal(18,0),\n\t\tIsTaxableFlag as boolean,\n\t\tIsDefaultMembershipFlag as boolean,\n\t\tIsActive as boolean,\n\t\tDWH_CreatedDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string,\n\t\tBusinessSegmentName as string,\n\t\tBusinessSegmentShortName as string,\n\t\tRevenueGroupName as string,\n\t\tRevenueGroupShortName as string,\n\t\tMembershipCreateDate as timestamp,\n\t\tMembershipLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> DimMembership\nsource(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tISODate as string,\n\t\tYearNumber as integer,\n\t\tYearQuarterNumber as integer,\n\t\tYearMonthNumber as integer,\n\t\tYearQuarterMonthNumber as integer,\n\t\tYearWeekNumber as integer,\n\t\tDateName as string,\n\t\tWeekName as string,\n\t\tWeekNameWithYear as string,\n\t\tWeekShortName as string,\n\t\tWeekShortNameWithYear as string,\n\t\tWeekNumber as integer,\n\t\tFirstDateOfWeek as date,\n\t\tLastDateOfWeek as date,\n\t\tDayOfWeek as integer,\n\t\tDayOfWeekName as string,\n\t\tIsWeekday as boolean,\n\t\tIsWeekend as boolean,\n\t\tMonthName as string,\n\t\tMonthNameWithYear as string,\n\t\tMonthShortName as string,\n\t\tMonthShortNameWithYear as string,\n\t\tMonthNumber as integer,\n\t\tFirstDateOfMonth as date,\n\t\tLastDateOfMonth as date,\n\t\tDayOfMonth as integer,\n\t\tDayOfMonthName as string,\n\t\tIsLastDayOfMonth as boolean,\n\t\tQuarterName as string,\n\t\tQuarterNameWithYear as string,\n\t\tQuarterShortName as string,\n\t\tQuarterShortNameWithYear as string,\n\t\tQuarterNumber as integer,\n\t\tFirstDateOfQuarter as date,\n\t\tLastDateOfQuarter as date,\n\t\tDayOfQuarter as integer,\n\t\tDayOfQuarterName as string,\n\t\tHalfName as string,\n\t\tHalfNameWithYear as string,\n\t\tHalfShortName as string,\n\t\tHalfShortNameWithYear as string,\n\t\tHalfNumber as integer,\n\t\tYearHalfNumber as integer,\n\t\tFirstDateOfHalf as date,\n\t\tLastDateOfHalf as date,\n\t\tDayOfHalf as integer,\n\t\tDayOfHalfName as string,\n\t\tYearName as string,\n\t\tYearShortName as string,\n\t\tFirstDateOfYear as date,\n\t\tLastDateOfYear as date,\n\t\tDayOfYear as integer,\n\t\tDayOfYearName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarYear as integer,\n\t\tCalendarYearMonth as string,\n\t\tCalendarYearQtr as string,\n\t\tFiscalYear as integer,\n\t\tFiscalWeek as integer,\n\t\tFiscalPeriod as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalQuarter as integer,\n\t\tFiscalYearFiscalWeek as integer,\n\t\tFiscalYearFiscalPeriod as integer,\n\t\tFiscalYearFiscalMonth as integer,\n\t\tFiscalYearFiscalQuarter as integer,\n\t\tFiscalYearFiscalQuarterFiscalMonth as integer,\n\t\tFiscalYearName as string,\n\t\tFiscalYearLongName as string,\n\t\tFiscalYearShortName as string,\n\t\tFiscalQuarterName as string,\n\t\tFiscalQuarterLongName as string,\n\t\tFiscalQuarterNameWithYear as string,\n\t\tFiscalQuarterLongNameWithYear as string,\n\t\tFiscalQuarterShortName as string,\n\t\tFiscalQuarterShortNameWithYear as string,\n\t\tFiscalMonthName as string,\n\t\tFiscalMonthNameWithYear as string,\n\t\tFiscalMonthShortName as string,\n\t\tFiscalMonthShortNameWithYear as string,\n\t\tFiscalMonthCalendarShortName as string,\n\t\tFiscalMonthCalendarShortNameWithYear as string,\n\t\tFiscalWeekName as string,\n\t\tFiscalWeekLongName as string,\n\t\tFiscalWeekNameWithYear as string,\n\t\tFiscalWeekLongNameWithYear as string,\n\t\tFiscalWeekShortName as string,\n\t\tFiscalWeekShortNameWithYear as string,\n\t\tFiscalPeriodName as string,\n\t\tFiscalPeriodLongName as string,\n\t\tFiscalPeriodNameWithYear as string,\n\t\tFiscalPeriodLongNameWithYear as string,\n\t\tFiscalPeriodShortName as string,\n\t\tFiscalPeriodShortNameWithYear as string,\n\t\tCummWorkdays as integer,\n\t\tMonthWorkdays as integer,\n\t\tMonthWorkdaysTotal as integer,\n\t\tIsHoliday as boolean,\n\t\tMonthOfQuarter as integer,\n\t\tBroadcastYearBroadcastQuarter as integer,\n\t\tBroadcastYearBroadcastMonth as integer,\n\t\tBroadcastYearBroadcastWeek as integer,\n\t\tBroadcastYearQtrMonthWeekDay as integer,\n\t\tBroadcastYearQtrMonth as integer,\n\t\tBroadcastYearShortName as string,\n\t\tBroadcastYearLongName as string,\n\t\tBroadcastYeartName as string,\n\t\tBroadcastQuarterName as string,\n\t\tBroadcastWeekName as string,\n\t\tBroadcastDayName as string,\n\t\tmsrepl_tran_version as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> DimDate\nsource(output(\n\t\tClientMembershipStatusID as integer,\n\t\tClientMembershipStatusSortOrder as integer,\n\t\tClientMembershipStatusDescription as string,\n\t\tClientMembershipStatusDescriptionShort as string,\n\t\tIsActiveMembershipFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tCanSearchAndDisplayFlag as boolean,\n\t\tCanCheckInForConsultation as boolean,\n\t\tDescriptionResourceKey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> ODSlkpClientMembershipStatus\nsource(output(\n\t\tCustomerMembershipKey as integer,\n\t\tCustomerMembershipID as string,\n\t\tCustomerKey as integer,\n\t\tCustomerID as string,\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tMembershipKey as integer,\n\t\tMembershipID as integer,\n\t\tCustomerMembershipStatusID as integer,\n\t\tCustomerMembershipStatusName as string,\n\t\tCustomerMembershipStatusNameShort as string,\n\t\tMember1_ID_Temp as integer,\n\t\tCustomerMembershipContractPrice as decimal(19,4),\n\t\tCustomerMembershipContractPaidAmount as decimal(19,4),\n\t\tCustomerMembershipMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipBeginDateKey as integer,\n\t\tCustomerMembershipBeginDate as date,\n\t\tCustomerMembershipEndDateKey as integer,\n\t\tCustomerMembershipEndDate as date,\n\t\tCustomerMembershipCancelDateKey as integer,\n\t\tCustomerMembershipCancelDate as date,\n\t\tCustomerMembershipCancelReasonID as integer,\n\t\tCustomerMembershipCancelReasonName as string,\n\t\tCustomerMembershipIdentifier as string,\n\t\tNationalMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipCreateDate as timestamp,\n\t\tCustomerMembershipLastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> DimCustomerMembership\nODSClientMembership filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1) && !isNull(MembershipID)) ~> LastUpdateAndMembershipIDFilter\nLastUpdateAndMembershipIDFilter select(mapColumn(\n\t\tClientMembershipGUID,\n\t\tMember1_ID_Temp,\n\t\tClientGUID,\n\t\tCenterID,\n\t\tMembershipID,\n\t\tClientMembershipStatusID,\n\t\tContractPrice,\n\t\tContractPaidAmount,\n\t\tMonthlyFee,\n\t\tBeginDate,\n\t\tEndDate,\n\t\tMembershipCancelReasonID,\n\t\tCancelDate,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tLastUpdate,\n\t\tClientMembershipIdentifier,\n\t\tMembershipCancelReasonDescription,\n\t\tNationalMonthlyFee\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nExists alterRow(updateIf(true())) ~> Update\nSelectColumns, SelectCustomerKey join(ClientGUID == CustomerGUID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimCustomer\nFinalColumns1 select(mapColumn(\n\t\teach(match(stream=='FinalColumns1'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalColumns\nJoinDimCustomer, SelectKeyCenter join(SelectColumns@CenterID == SelectKeyCenter@CenterID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimCenter\nJoinDimCenter, SelectKeyMembership join(SelectColumns@MembershipID == SelectKeyMembership@MembershipID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimMembership\nDimCustomer select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerGUID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerKey\nDimCenter select(mapColumn(\n\t\tCenterKey,\n\t\tCenterID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyCenter\nDimMembership select(mapColumn(\n\t\tMembershipKey,\n\t\tMembershipID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyMembership\nJoinDimMembership, SelectKeyBeginDate join(BeginDate == FullDateBegin,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimDateBegin\nDimDate select(mapColumn(\n\t\tDateKeyBegin = DateKey,\n\t\tFullDateBegin = FullDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyBeginDate\nJoinDimDateBegin, SelectKeyEndDate join(EndDate == FullDateEnd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimDateEndDate\nDimDate select(mapColumn(\n\t\tDateKeyCancel = DateKey,\n\t\tFullDateCancel = FullDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyCancelDate\nDimDate select(mapColumn(\n\t\tDateKeyEnd = DateKey,\n\t\tFullDateEnd = FullDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyEndDate\nJoinDimDateEndDate, SelectKeyCancelDate join(toDate(CancelDate) == FullDateCancel,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimDateCancel\nJoinlkpCliemMembershipStatus derive(CustomerMembershipID = ClientMembershipGUID,\n\t\tCustomerKey = iifNull(CustomerKey,-1),\n\t\tCustomerID = ClientGUID,\n\t\tCenterKey = iifNull(CenterKey, -1),\n\t\tCenterID = SelectColumns@CenterID,\n\t\tMembershipKey = iifNull(MembershipKey, -1),\n\t\tMembershipID = SelectColumns@MembershipID,\n\t\tCustomerMembershipStatusID = SelectColumns@ClientMembershipStatusID,\n\t\tCustomerMembershipStatusName = initCap(ClientMembershipStatusDescription),\n\t\tCustomerMembershipStatusNameShort = upper(ClientMembershipStatusDescriptionShort),\n\t\tMember1_ID_Temp = Member1_ID_Temp,\n\t\tCustomerMembershipContractPrice = iif(isNull(ContractPrice), toFloat(0) , toFloat(ContractPrice) ),\n\t\tCustomerMembershipContractPaidAmount = iif(isNull(ContractPaidAmount), toFloat(0) , toFloat(ContractPaidAmount) ),\n\t\tCustomerMembershipMonthlyFee = iif(isNull(MonthlyFee), toFloat(0) , toFloat(MonthlyFee) ),\n\t\tCustomerMembershipBeginDateKey = iifNull(DateKeyBegin, 1),\n\t\tCustomerMembershipBeginDate = FullDateBegin,\n\t\tCustomerMembershipEndDateKey = iifNull(DateKeyEnd, -1),\n\t\tCustomerMembershipEndDate = FullDateEnd,\n\t\tCustomerMembershipCancelDateKey = iifNull(DateKeyCancel, -1),\n\t\tCustomerMembershipCancelDate = CancelDate,\n\t\tCustomerMembershipCancelReasonID = MembershipCancelReasonID,\n\t\tCustomerMembershipCancelReasonName = initCap(MembershipCancelReasonDescription),\n\t\tCustomerMembershipIdentifier = ClientMembershipIdentifier,\n\t\tNationalMonthlyFee = iif(isNull(NationalMonthlyFee), toFloat(0) , toFloat(NationalMonthlyFee) ),\n\t\tCustomerMembershipCreateDate = CreateDate,\n\t\tCustomerMembershipLastUpdateDate = LastUpdate,\n\t\tIsActive = IsActiveFlag,\n\t\tDWH_LoadDate = currentTimestamp(),\n\t\tDWH_LastUpdateDate = currentTimestamp(),\n\t\tSourceSystem = 'Conect') ~> FinalColumns1\nODSlkpClientMembershipStatus select(mapColumn(\n\t\tClientMembershipStatusID,\n\t\tClientMembershipStatusDescription,\n\t\tClientMembershipStatusDescriptionShort\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectClientMembershipName\nJoinDimDateCancel, SelectClientMembershipName join(SelectColumns@ClientMembershipStatusID == SelectClientMembershipName@ClientMembershipStatusID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinlkpCliemMembershipStatus\nDimCustomerMembership select(mapColumn(\n\t\tCustomerMembershipID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerMembershipID\nSelectFinalColumns, SelectCustomerMembershipID exists(SelectFinalColumns@CustomerMembershipID == SelectCustomerMembershipID@CustomerMembershipID,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nSelectFinalColumns, SelectCustomerMembershipID exists(SelectFinalColumns@CustomerMembershipID == SelectCustomerMembershipID@CustomerMembershipID,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExists\nUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCustomerMembershipKey as integer,\n\t\tCustomerMembershipID as string,\n\t\tCustomerKey as integer,\n\t\tCustomerID as string,\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tMembershipKey as integer,\n\t\tMembershipID as integer,\n\t\tCustomerMembershipStatusID as integer,\n\t\tCustomerMembershipStatusName as string,\n\t\tCustomerMembershipStatusNameShort as string,\n\t\tMember1_ID_Temp as integer,\n\t\tCustomerMembershipContractPrice as decimal(19,4),\n\t\tCustomerMembershipContractPaidAmount as decimal(19,4),\n\t\tCustomerMembershipMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipBeginDateKey as integer,\n\t\tCustomerMembershipBeginDate as date,\n\t\tCustomerMembershipEndDateKey as integer,\n\t\tCustomerMembershipEndDate as date,\n\t\tCustomerMembershipCancelDateKey as integer,\n\t\tCustomerMembershipCancelDate as date,\n\t\tCustomerMembershipCancelReasonID as integer,\n\t\tCustomerMembershipCancelReasonName as string,\n\t\tCustomerMembershipIdentifier as string,\n\t\tNationalMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipCreateDate as timestamp,\n\t\tCustomerMembershipLastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['CustomerMembershipID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomerMembershipID,\n\t\tCustomerKey,\n\t\tCustomerID,\n\t\tCenterKey,\n\t\tCenterID,\n\t\tMembershipKey,\n\t\tMembershipID,\n\t\tCustomerMembershipStatusID,\n\t\tCustomerMembershipStatusName,\n\t\tCustomerMembershipStatusNameShort,\n\t\tMember1_ID_Temp,\n\t\tCustomerMembershipContractPrice,\n\t\tCustomerMembershipContractPaidAmount,\n\t\tCustomerMembershipMonthlyFee,\n\t\tCustomerMembershipBeginDateKey,\n\t\tCustomerMembershipBeginDate,\n\t\tCustomerMembershipEndDateKey,\n\t\tCustomerMembershipEndDate,\n\t\tCustomerMembershipCancelDateKey,\n\t\tCustomerMembershipCancelDate,\n\t\tCustomerMembershipCancelReasonID,\n\t\tCustomerMembershipCancelReasonName,\n\t\tCustomerMembershipIdentifier,\n\t\tNationalMonthlyFee,\n\t\tCustomerMembershipCreateDate,\n\t\tCustomerMembershipLastUpdateDate,\n\t\tIsActive,\n\t\tDWH_LastUpdateDate,\n\t\tSourceSystem\n\t)) ~> UpdateDimCustomerMembership\nNotExists sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCustomerMembershipKey as integer,\n\t\tCustomerMembershipID as string,\n\t\tCustomerKey as integer,\n\t\tCustomerID as string,\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tMembershipKey as integer,\n\t\tMembershipID as integer,\n\t\tCustomerMembershipStatusID as integer,\n\t\tCustomerMembershipStatusName as string,\n\t\tCustomerMembershipStatusNameShort as string,\n\t\tMember1_ID_Temp as integer,\n\t\tCustomerMembershipContractPrice as decimal(19,4),\n\t\tCustomerMembershipContractPaidAmount as decimal(19,4),\n\t\tCustomerMembershipMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipBeginDateKey as integer,\n\t\tCustomerMembershipBeginDate as date,\n\t\tCustomerMembershipEndDateKey as integer,\n\t\tCustomerMembershipEndDate as date,\n\t\tCustomerMembershipCancelDateKey as integer,\n\t\tCustomerMembershipCancelDate as date,\n\t\tCustomerMembershipCancelReasonID as integer,\n\t\tCustomerMembershipCancelReasonName as string,\n\t\tCustomerMembershipIdentifier as string,\n\t\tNationalMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipCreateDate as timestamp,\n\t\tCustomerMembershipLastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomerMembershipID,\n\t\tCustomerKey,\n\t\tCustomerID,\n\t\tCenterKey,\n\t\tCenterID,\n\t\tMembershipKey,\n\t\tMembershipID,\n\t\tCustomerMembershipStatusID,\n\t\tCustomerMembershipStatusName,\n\t\tCustomerMembershipStatusNameShort,\n\t\tMember1_ID_Temp,\n\t\tCustomerMembershipContractPrice,\n\t\tCustomerMembershipContractPaidAmount,\n\t\tCustomerMembershipMonthlyFee,\n\t\tCustomerMembershipBeginDateKey,\n\t\tCustomerMembershipBeginDate,\n\t\tCustomerMembershipEndDateKey,\n\t\tCustomerMembershipEndDate,\n\t\tCustomerMembershipCancelDateKey,\n\t\tCustomerMembershipCancelDate,\n\t\tCustomerMembershipCancelReasonID,\n\t\tCustomerMembershipCancelReasonName,\n\t\tCustomerMembershipIdentifier,\n\t\tNationalMonthlyFee,\n\t\tCustomerMembershipCreateDate,\n\t\tCustomerMembershipLastUpdateDate,\n\t\tIsActive,\n\t\tDWH_LoadDate,\n\t\tDWH_LastUpdateDate,\n\t\tSourceSystem\n\t)) ~> InsertCustomerMembership"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimSalesCode')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_cfgSalesCode",
                                "type": "DatasetReference"
                            },
                            "name": "ODScfgSalesCode"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesCodeDepartment",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesCodeDepartement"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpSalesCodeType",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpSalesCodeType"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesCode",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesCode"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesCode",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesCodeUpdate"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesCode",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesCodeInsert"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterByLastUpdate"
                        },
                        {
                            "name": "SelectColumns"
                        },
                        {
                            "name": "SelectColumnsDepartment"
                        },
                        {
                            "name": "JoinDepartment"
                        },
                        {
                            "name": "CustomColums"
                        },
                        {
                            "name": "SelectColumnsCodeType"
                        },
                        {
                            "name": "JoinSalesCodeType"
                        },
                        {
                            "name": "SelectDimSalesCode"
                        },
                        {
                            "name": "Exists"
                        },
                        {
                            "name": "NotExists"
                        },
                        {
                            "name": "AlterRow"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tSalesCodeID as integer,\n\t\tSalesCodeSortOrder as integer,\n\t\tSalesCodeDescription as string,\n\t\tSalesCodeDescriptionShort as string,\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeDepartmentID as integer,\n\t\tVendorID as integer,\n\t\tBarcode as string,\n\t\tPriceDefault as decimal(19,4),\n\t\tGLNumber as integer,\n\t\tServiceDuration as integer,\n\t\tCanScheduleFlag as boolean,\n\t\tFactoryOrderFlag as boolean,\n\t\tIsRefundableFlag as boolean,\n\t\tInventoryFlag as boolean,\n\t\tSurgeryCloseoutFlag as boolean,\n\t\tTechnicalProfileFlag as boolean,\n\t\tAdjustContractPaidAmountFlag as boolean,\n\t\tIsPriceAdjustableFlag as boolean,\n\t\tIsDiscountableFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tIsARTenderRequiredFlag as boolean,\n\t\tCanOrderFlag as boolean,\n\t\tIsQuantityAdjustableFlag as boolean,\n\t\tIsPhotoEnabledFlag as boolean,\n\t\tIsEXTOnlyProductFlag as boolean,\n\t\tHairSystemID as integer,\n\t\tSaleCount as integer,\n\t\tIsSalesCodeKitFlag as boolean,\n\t\tBIOGeneralLedgerID as integer,\n\t\tEXTGeneralLedgerID as integer,\n\t\tSURGeneralLedgerID as integer,\n\t\tBrandID as integer,\n\t\tProduct as string,\n\t\tSize as string,\n\t\tIsRefundablePayment as boolean,\n\t\tIsNSFChargebackFee as boolean,\n\t\tInterCompanyPrice as decimal(19,4),\n\t\tIsQuantityRequired as boolean,\n\t\tXTRGeneralLedgerID as integer,\n\t\tDescriptionResourceKey as string,\n\t\tIsBosleySalesCode as boolean,\n\t\tIsVisibleToConsultant as boolean,\n\t\tIsSerialized as boolean,\n\t\tSerialNumberRegEx as string,\n\t\tQuantityPerPack as integer,\n\t\tPackUnitOfMeasureID as integer,\n\t\tInventorySalesCodeID as integer,\n\t\tIsVisibleToClient as boolean,\n\t\tCanBeManagedByClient as boolean,\n\t\tIsManagedByClientOnly as boolean,\n\t\tClientDescription as string,\n\t\tMDPGeneralLedgerID as integer,\n\t\tPackSKU as string,\n\t\tIsBackBarApproved as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> ODScfgSalesCode\nsource(output(\n\t\tSalesCodeDepartmentKey as integer,\n\t\tSalesCodeDepartmentID as integer,\n\t\tSalesCodeDepartmentName as string,\n\t\tSalesCodeDepartmentNameShort as string,\n\t\tSalesCodeDivisionID as integer,\n\t\tSalesCodeDivisionName as string,\n\t\tSalesCodeDivisionNameShort as string,\n\t\tSalesCodeDepartmentCreateDate as timestamp,\n\t\tSalesCodeDepartmentLastUpdateDate as timestamp,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> DimSalesCodeDepartement\nsource(output(\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeTypeSortOrder as integer,\n\t\tSalesCodeTypeDescription as string,\n\t\tSalesCodeTypeDescriptionShort as string,\n\t\tIsInventory as boolean,\n\t\tIsSerialized as boolean,\n\t\tIsHairSystem as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> ODSlkpSalesCodeType\nsource(output(\n\t\tSalesCodeKey as integer,\n\t\tSalesCodeID as integer,\n\t\tSalesCodeName as string,\n\t\tSalesCodeNameShort as string,\n\t\tSalesCodeDepartmentKey as integer,\n\t\tSalesCodeDepartmentID as integer,\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeTypeName as string,\n\t\tSalesCodeTypeNameShort as string,\n\t\tSalesCodeCreateDate as timestamp,\n\t\tSalesCodeLastUpdateDate as timestamp,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSalesCode\nODScfgSalesCode filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1)) ~> FilterByLastUpdate\nFilterByLastUpdate select(mapColumn(\n\t\tSalesCodeID,\n\t\tSalesCodeName = SalesCodeDescription,\n\t\tSalesCodeNameShort = SalesCodeDescriptionShort,\n\t\tSalesCodeTypeID,\n\t\tSalesCodeDepartmentID,\n\t\tIsActive = IsActiveFlag,\n\t\tSalesCodeCreateDate = CreateDate,\n\t\tSalesCodeLastUpdateDate = LastUpdate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nDimSalesCodeDepartement select(mapColumn(\n\t\tSalesCodeDepartmentKey,\n\t\tSalesCodeDepartmentID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsDepartment\nSelectColumns, SelectColumnsDepartment join(SelectColumns@SalesCodeDepartmentID == SelectColumnsDepartment@SalesCodeDepartmentID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDepartment\nJoinSalesCodeType derive(SourceSystem = 'Conect',\n\t\tDWH_LastUpdateDate = currentTimestamp(),\n\t\tDWH_LoadDate = currentTimestamp(),\n\t\tSalesCodeDepartmentKey = iifNull(SalesCodeDepartmentKey, -1)) ~> CustomColums\nODSlkpSalesCodeType select(mapColumn(\n\t\tSalesCodeTypeId = SalesCodeTypeID,\n\t\tSalesCodeTypeName = SalesCodeTypeDescription,\n\t\tSalesCodeTypeNameShort = SalesCodeTypeDescriptionShort\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsCodeType\nJoinDepartment, SelectColumnsCodeType join(SelectColumns@SalesCodeTypeID == SelectColumnsCodeType@SalesCodeTypeId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSalesCodeType\nDimSalesCode select(mapColumn(\n\t\tSalesCodeID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimSalesCode\nCustomColums, SelectDimSalesCode exists(SelectColumns@SalesCodeID == SelectDimSalesCode@SalesCodeID,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nCustomColums, SelectDimSalesCode exists(SelectColumns@SalesCodeID == SelectDimSalesCode@SalesCodeID,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExists\nExists alterRow(updateIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesCodeKey as integer,\n\t\tSalesCodeID as integer,\n\t\tSalesCodeName as string,\n\t\tSalesCodeNameShort as string,\n\t\tSalesCodeDepartmentKey as integer,\n\t\tSalesCodeDepartmentID as integer,\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeTypeName as string,\n\t\tSalesCodeTypeNameShort as string,\n\t\tSalesCodeCreateDate as timestamp,\n\t\tSalesCodeLastUpdateDate as timestamp,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SalesCodeID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesCodeID,\n\t\tSalesCodeName,\n\t\tSalesCodeNameShort,\n\t\tSalesCodeDepartmentKey,\n\t\tSalesCodeDepartmentID = SelectColumns@SalesCodeDepartmentID,\n\t\tSalesCodeTypeID = SelectColumns@SalesCodeTypeID,\n\t\tSalesCodeTypeName,\n\t\tSalesCodeTypeNameShort,\n\t\tSalesCodeCreateDate,\n\t\tSalesCodeLastUpdateDate,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive,\n\t\tSourceSystem\n\t)) ~> DimSalesCodeUpdate\nNotExists sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesCodeKey as integer,\n\t\tSalesCodeID as integer,\n\t\tSalesCodeName as string,\n\t\tSalesCodeNameShort as string,\n\t\tSalesCodeDepartmentKey as integer,\n\t\tSalesCodeDepartmentID as integer,\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeTypeName as string,\n\t\tSalesCodeTypeNameShort as string,\n\t\tSalesCodeCreateDate as timestamp,\n\t\tSalesCodeLastUpdateDate as timestamp,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesCodeID,\n\t\tSalesCodeName,\n\t\tSalesCodeNameShort,\n\t\tSalesCodeDepartmentKey,\n\t\tSalesCodeDepartmentID = SelectColumns@SalesCodeDepartmentID,\n\t\tSalesCodeTypeID = SelectColumns@SalesCodeTypeID,\n\t\tSalesCodeTypeName,\n\t\tSalesCodeTypeNameShort,\n\t\tSalesCodeCreateDate,\n\t\tSalesCodeLastUpdateDate,\n\t\tDWH_LoadDate,\n\t\tDWH_LastUpdateDate,\n\t\tIsActive,\n\t\tSourceSystem\n\t)) ~> DimSalesCodeInsert"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/FactSalesTransaction')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "Synapse/DWH"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datSalesOrderDetail",
                                "type": "DatasetReference"
                            },
                            "name": "ODSdatSalesOrderDetail"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datSalesOrder",
                                "type": "DatasetReference"
                            },
                            "name": "ODSdatSalesOrder"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesCode",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesCode"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomerMembership",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomerMembershipPrev"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomerMembership",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomerMembership"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCenter",
                                "type": "DatasetReference"
                            },
                            "name": "DimCenter"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSalesOrderType",
                                "type": "DatasetReference"
                            },
                            "name": "DimSalesOrderType"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimCustomer",
                                "type": "DatasetReference"
                            },
                            "name": "DimCustomer"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSystemUser",
                                "type": "DatasetReference"
                            },
                            "name": "DimSystemUser"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datAccumulatorAdjustment",
                                "type": "DatasetReference"
                            },
                            "name": "ODSdatAccumulatorAdjustment"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_cfgAccumulator",
                                "type": "DatasetReference"
                            },
                            "name": "ODScfgAccumulator"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimDate",
                                "type": "DatasetReference"
                            },
                            "name": "DimDate"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimTimeOfDay",
                                "type": "DatasetReference"
                            },
                            "name": "DimTimeOfDay"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datAppointment",
                                "type": "DatasetReference"
                            },
                            "name": "ODSdatAppointment"
                        },
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_datAppointmentEmployee",
                                "type": "DatasetReference"
                            },
                            "name": "ODSdatAppointmentEmployee"
                        },
                        {
                            "dataset": {
                                "referenceName": "ASA_DimSystemUser",
                                "type": "DatasetReference"
                            },
                            "name": "DimSysUser"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ASA_FactSalesTransaction",
                                "type": "DatasetReference"
                            },
                            "name": "FactSalesTransaction"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterByLastUpdateSOD"
                        },
                        {
                            "name": "SelectSOD"
                        },
                        {
                            "name": "SelectSO"
                        },
                        {
                            "name": "FilterByLastUpdateSO"
                        },
                        {
                            "name": "SelectSalesCodeKey"
                        },
                        {
                            "name": "SelectCustomerMembershipKeyPrev"
                        },
                        {
                            "name": "JoinSalesCode"
                        },
                        {
                            "name": "JoinPrevCustomerMembership"
                        },
                        {
                            "name": "SelectCustomerMemberhipKey"
                        },
                        {
                            "name": "JoinCustomerMembership"
                        },
                        {
                            "name": "SelectDimCenterKey"
                        },
                        {
                            "name": "JoinDimCenter"
                        },
                        {
                            "name": "SelectDimSalesOrderTypeKey"
                        },
                        {
                            "name": "JoinDimSalesOrderType"
                        },
                        {
                            "name": "SelectDimCustomerKey"
                        },
                        {
                            "name": "JoinDimCustomer"
                        },
                        {
                            "name": "SelectDimSystemUserKwy"
                        },
                        {
                            "name": "FilterSourceSystem"
                        },
                        {
                            "name": "JoinDimSystemUser"
                        },
                        {
                            "name": "JoinSalesOrder"
                        },
                        {
                            "name": "SelectFinalColumnsSO"
                        },
                        {
                            "name": "SelectFinalColumnsSOD"
                        },
                        {
                            "name": "SelectcfgAccumulatorId"
                        },
                        {
                            "name": "FilterAccumulator"
                        },
                        {
                            "name": "SelectAccumulator"
                        },
                        {
                            "name": "JoincfgAccumulator"
                        },
                        {
                            "name": "SelectColumnsAccumulatorAdj"
                        },
                        {
                            "name": "CustomColumnsAccAdj"
                        },
                        {
                            "name": "SortAccAdj"
                        },
                        {
                            "name": "PivotAccumulator"
                        },
                        {
                            "name": "JoinPivotAccumulator"
                        },
                        {
                            "name": "SelectDimDateKey"
                        },
                        {
                            "name": "JoinDimDateKey"
                        },
                        {
                            "name": "SelectDimTimeOfDayKey"
                        },
                        {
                            "name": "JoinDimTimeOfDayKey"
                        },
                        {
                            "name": "SelectFinal"
                        },
                        {
                            "name": "AlterRow"
                        },
                        {
                            "name": "CustomColumnDimCustomer"
                        },
                        {
                            "name": "MapDrifted",
                            "description": "Creates an explicit mapping for each drifted column"
                        },
                        {
                            "name": "DerivedColumn"
                        },
                        {
                            "name": "FilterLastUpdateApp"
                        },
                        {
                            "name": "SelectDatAppEmployee"
                        },
                        {
                            "name": "SelectAppointment"
                        },
                        {
                            "name": "JoinAppEmployee"
                        },
                        {
                            "name": "SelectFinalAppointmentEmployee"
                        },
                        {
                            "name": "FilterAppEmployee"
                        },
                        {
                            "name": "JoinAppointmentEmployee"
                        },
                        {
                            "name": "FilterConectUser"
                        },
                        {
                            "name": "SelectUserPerformerName"
                        },
                        {
                            "name": "JoinPerformerName"
                        }
                    ],
                    "script": "parameters{\n\tDaysToLoad as integer\n}\nsource(output(\n\t\tSalesOrderDetailGUID as string,\n\t\tTransactionNumber_Temp as integer,\n\t\tSalesOrderGUID as string,\n\t\tSalesCodeID as integer,\n\t\tQuantity as integer,\n\t\tPrice as decimal(21,6),\n\t\tDiscount as decimal(19,4),\n\t\tTax1 as decimal(19,4),\n\t\tTax2 as decimal(19,4),\n\t\tTaxRate1 as decimal(6,5),\n\t\tTaxRate2 as decimal(6,5),\n\t\tIsRefundedFlag as boolean,\n\t\tRefundedSalesOrderDetailGUID as string,\n\t\tRefundedTotalQuantity as integer,\n\t\tRefundedTotalPrice as decimal(19,4),\n\t\tEmployee1GUID as string,\n\t\tEmployee2GUID as string,\n\t\tEmployee3GUID as string,\n\t\tEmployee4GUID as string,\n\t\tPreviousClientMembershipGUID as string,\n\t\tNewCenterID as integer,\n\t\tExtendedPriceCalc as decimal(33,6),\n\t\tTotalTaxCalc as decimal(19,4),\n\t\tPriceTaxCalc as decimal(35,6),\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tCenter_Temp as integer,\n\t\tperformer_temp as string,\n\t\tperformer2_temp as string,\n\t\tMember1Price_temp as decimal(21,6),\n\t\tCancelReasonID as integer,\n\t\tEntrySortOrder as integer,\n\t\tHairSystemOrderGUID as string,\n\t\tDiscountTypeID as integer,\n\t\tBenefitTrackingEnabledFlag as boolean,\n\t\tMembershipPromotionID as integer,\n\t\tMembershipOrderReasonID as integer,\n\t\tMembershipNotes as string,\n\t\tGenericSalesCodeDescription as string,\n\t\tSalesCodeSerialNumber as string,\n\t\tWriteOffSalesOrderDetailGUID as string,\n\t\tNSFBouncedDate as timestamp,\n\t\tIsWrittenOffFlag as boolean,\n\t\tInterCompanyPrice as decimal(19,4),\n\t\tTaxType1ID as integer,\n\t\tTaxType2ID as integer,\n\t\tClientMembershipAddOnID as integer,\n\t\tNCCMembershipPromotionID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSdatSalesOrderDetail\nsource(output(\n\t\tSalesOrderGUID as string,\n\t\tTenderTransactionNumber_Temp as integer,\n\t\tTicketNumber_Temp as integer,\n\t\tCenterID as integer,\n\t\tClientHomeCenterID as integer,\n\t\tSalesOrderTypeID as integer,\n\t\tClientGUID as string,\n\t\tClientMembershipGUID as string,\n\t\tAppointmentGUID as string,\n\t\tHairSystemOrderGUID as string,\n\t\tOrderDate as timestamp,\n\t\tInvoiceNumber as string,\n\t\tIsTaxExemptFlag as boolean,\n\t\tIsVoidedFlag as boolean,\n\t\tIsClosedFlag as boolean,\n\t\tRegisterCloseGUID as string,\n\t\tEmployeeGUID as string,\n\t\tFulfillmentNumber as string,\n\t\tIsWrittenOffFlag as boolean,\n\t\tIsRefundedFlag as boolean,\n\t\tRefundedSalesOrderGUID as string,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tParentSalesOrderGUID as string,\n\t\tIsSurgeryReversalFlag as boolean,\n\t\tIsGuaranteeFlag as boolean,\n\t\tcashier_temp as string,\n\t\tctrOrderDate as timestamp,\n\t\tCenterFeeBatchGUID as string,\n\t\tCenterDeclineBatchGUID as string,\n\t\tRegisterID as integer,\n\t\tEndOfDayGUID as string,\n\t\tIncomingRequestID as integer,\n\t\tWriteOffSalesOrderGUID as string,\n\t\tNSFSalesOrderGUID as string,\n\t\tChargeBackSalesOrderGUID as string,\n\t\tChargebackReasonID as integer,\n\t\tInterCompanyTransactionID as integer,\n\t\tWriteOffReasonDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSdatSalesOrder\nsource(output(\n\t\tSalesCodeKey as integer,\n\t\tSalesCodeID as integer,\n\t\tSalesCodeName as string,\n\t\tSalesCodeNameShort as string,\n\t\tSalesCodeDepartmentKey as integer,\n\t\tSalesCodeDepartmentID as integer,\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeTypeName as string,\n\t\tSalesCodeTypeNameShort as string,\n\t\tSalesCodeCreateDate as timestamp,\n\t\tSalesCodeLastUpdateDate as timestamp,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSalesCode\nsource(output(\n\t\tCustomerMembershipKey as integer,\n\t\tCustomerMembershipID as string,\n\t\tCustomerKey as integer,\n\t\tCustomerID as string,\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tMembershipKey as integer,\n\t\tMembershipID as integer,\n\t\tCustomerMembershipStatusID as integer,\n\t\tCustomerMembershipStatusName as string,\n\t\tCustomerMembershipStatusNameShort as string,\n\t\tMember1_ID_Temp as integer,\n\t\tCustomerMembershipContractPrice as decimal(19,4),\n\t\tCustomerMembershipContractPaidAmount as decimal(19,4),\n\t\tCustomerMembershipMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipBeginDateKey as integer,\n\t\tCustomerMembershipBeginDate as date,\n\t\tCustomerMembershipEndDateKey as integer,\n\t\tCustomerMembershipEndDate as date,\n\t\tCustomerMembershipCancelDateKey as integer,\n\t\tCustomerMembershipCancelDate as date,\n\t\tCustomerMembershipCancelReasonID as integer,\n\t\tCustomerMembershipCancelReasonName as string,\n\t\tCustomerMembershipIdentifier as string,\n\t\tNationalMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipCreateDate as timestamp,\n\t\tCustomerMembershipLastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCustomerMembershipPrev\nsource(output(\n\t\tCustomerMembershipKey as integer,\n\t\tCustomerMembershipID as string,\n\t\tCustomerKey as integer,\n\t\tCustomerID as string,\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tMembershipKey as integer,\n\t\tMembershipID as integer,\n\t\tCustomerMembershipStatusID as integer,\n\t\tCustomerMembershipStatusName as string,\n\t\tCustomerMembershipStatusNameShort as string,\n\t\tMember1_ID_Temp as integer,\n\t\tCustomerMembershipContractPrice as decimal(19,4),\n\t\tCustomerMembershipContractPaidAmount as decimal(19,4),\n\t\tCustomerMembershipMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipBeginDateKey as integer,\n\t\tCustomerMembershipBeginDate as date,\n\t\tCustomerMembershipEndDateKey as integer,\n\t\tCustomerMembershipEndDate as date,\n\t\tCustomerMembershipCancelDateKey as integer,\n\t\tCustomerMembershipCancelDate as date,\n\t\tCustomerMembershipCancelReasonID as integer,\n\t\tCustomerMembershipCancelReasonName as string,\n\t\tCustomerMembershipIdentifier as string,\n\t\tNationalMonthlyFee as decimal(19,4),\n\t\tCustomerMembershipCreateDate as timestamp,\n\t\tCustomerMembershipLastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCustomerMembership\nsource(output(\n\t\tCenterKey as integer,\n\t\tCenterID as integer,\n\t\tCenterPayGroupID as integer,\n\t\tCenterDescription as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCenterGeographykey as integer,\n\t\tCenterPostalCode as string,\n\t\tCenterPhone1 as string,\n\t\tCenterPhone2 as string,\n\t\tCenterPhone3 as string,\n\t\tPhone1TypeID as integer,\n\t\tPhone2TypeID as integer,\n\t\tPhone3TypeID as integer,\n\t\tIsPhone1PrimaryFlag as boolean,\n\t\tIsPhone2PrimaryFlag as boolean,\n\t\tIsPhone3PrimaryFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tLastUpdate as timestamp,\n\t\tUpdateStamp as string,\n\t\tCenterNumber as integer,\n\t\tCenterOwnershipID as integer,\n\t\tCenterOwnershipSortOrder as integer,\n\t\tCenterOwnershipDescription as string,\n\t\tCenterOwnershipDescriptionShort as string,\n\t\tOwnerLastName as string,\n\t\tOwnerFirstName as string,\n\t\tCorporateName as string,\n\t\tOwnershipAddress1 as string,\n\t\tOwnershipAddress2 as string,\n\t\tOwnershipGeographykey as integer,\n\t\tOwnershipPostalCode as string,\n\t\tCenterTypeID as integer,\n\t\tCenterTypeSortOrder as integer,\n\t\tCenterTypeDescription as string,\n\t\tCenterTypeDescriptionShort as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tSourceSystem as string,\n\t\tTimeZoneID as integer,\n\t\tServiceTerritoryId as string,\n\t\tIsDeleted as boolean,\n\t\tRegion1 as string,\n\t\tRegion2 as string,\n\t\tRegioAM as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCenter\nsource(output(\n\t\tSalesOrderTypeKey as integer,\n\t\tSalesOrderTypeId as integer,\n\t\tSalesOrderTypeDescription as string,\n\t\tSalesOrderTypeDescriptionShort as string,\n\t\tLastModifiedDate as timestamp,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tSourceSystem as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSalesOrderType\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerGUID as string,\n\t\tCustomerIdentifier as string,\n\t\tCenterkey as integer,\n\t\tCenterId as string,\n\t\tCountryId as string,\n\t\tContactId as string,\n\t\tCustomerFirstName as string,\n\t\tCustomerMiddleName as string,\n\t\tCustomerLastName as string,\n\t\tCustomerAddress1 as string,\n\t\tCustomerCity as string,\n\t\tGeographyKey as integer,\n\t\tStateId as string,\n\t\tPostalCode as string,\n\t\tGenderkey as integer,\n\t\tGenderId as integer,\n\t\tDateOfBirth as date,\n\t\tDoNotCallFlag as boolean,\n\t\tDoNotContactFlag as boolean,\n\t\tIsHairModelFlag as boolean,\n\t\tEmailAddress as string,\n\t\tPhone1 as string,\n\t\tPhone2 as string,\n\t\tLanguageKey as integer,\n\t\tLanguageId as string,\n\t\tSalesforceContactId as string,\n\t\tLeadCreateDate as date,\n\t\tBosleySalesforceAccountID as string,\n\t\tSourceSystem as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as integer,\n\t\tCustomerCreatedDate as timestamp,\n\t\tCustomerLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCustomer\nsource(output(\n\t\tUserKey as integer,\n\t\tUserId as string,\n\t\tUserLogin as string,\n\t\tUserName as string,\n\t\tCompanyName as string,\n\t\tStreet as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tTeamName as string,\n\t\tcONEctUserLogin as string,\n\t\tcONEctGUID as string,\n\t\tCenterId as string,\n\t\tHash as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSystemUser\nsource(output(\n\t\tAccumulatorAdjustmentGUID as string,\n\t\tClientMembershipGUID as string,\n\t\tSalesOrderDetailGUID as string,\n\t\tAppointmentGUID as string,\n\t\tAccumulatorID as integer,\n\t\tAccumulatorActionTypeID as integer,\n\t\tQuantityUsedOriginal as integer,\n\t\tQuantityUsedAdjustment as integer,\n\t\tQuantityTotalOriginal as integer,\n\t\tQuantityTotalAdjustment as integer,\n\t\tMoneyOriginal as decimal(21,6),\n\t\tMoneyAdjustment as decimal(21,6),\n\t\tDateOriginal as date,\n\t\tDateAdjustment as date,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tQuantityUsedNewCalc as integer,\n\t\tQuantityUsedChangeCalc as integer,\n\t\tQuantityTotalNewCalc as integer,\n\t\tQuantityTotalChangeCalc as integer,\n\t\tMoneyNewCalc as decimal(22,6),\n\t\tMoneyChangeCalc as decimal(23,6),\n\t\tSalesOrderTenderGuid as string,\n\t\tClientMembershipAddOnID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSdatAccumulatorAdjustment\nsource(output(\n\t\tAccumulatorID as integer,\n\t\tAccumulatorSortOrder as integer,\n\t\tAccumulatorDescription as string,\n\t\tAccumulatorDescriptionShort as string,\n\t\tAccumulatorDataTypeID as integer,\n\t\tSalesOrderProcessFlag as boolean,\n\t\tSchedulerProcessFlag as boolean,\n\t\tSchedulerActionTypeID as integer,\n\t\tSchedulerAdjustmentTypeID as integer,\n\t\tAdjustARBalanceFlag as boolean,\n\t\tAdjustContractPriceFlag as boolean,\n\t\tAdjustContractPaidFlag as boolean,\n\t\tIsVisibleFlag as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary,\n\t\tIsVisibleToClient as boolean,\n\t\tClientDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODScfgAccumulator\nsource(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tISODate as string,\n\t\tYearNumber as integer,\n\t\tYearQuarterNumber as integer,\n\t\tYearMonthNumber as integer,\n\t\tYearQuarterMonthNumber as integer,\n\t\tYearWeekNumber as integer,\n\t\tDateName as string,\n\t\tWeekName as string,\n\t\tWeekNameWithYear as string,\n\t\tWeekShortName as string,\n\t\tWeekShortNameWithYear as string,\n\t\tWeekNumber as integer,\n\t\tFirstDateOfWeek as date,\n\t\tLastDateOfWeek as date,\n\t\tDayOfWeek as integer,\n\t\tDayOfWeekName as string,\n\t\tIsWeekday as boolean,\n\t\tIsWeekend as boolean,\n\t\tMonthName as string,\n\t\tMonthNameWithYear as string,\n\t\tMonthShortName as string,\n\t\tMonthShortNameWithYear as string,\n\t\tMonthNumber as integer,\n\t\tFirstDateOfMonth as date,\n\t\tLastDateOfMonth as date,\n\t\tDayOfMonth as integer,\n\t\tDayOfMonthName as string,\n\t\tIsLastDayOfMonth as boolean,\n\t\tQuarterName as string,\n\t\tQuarterNameWithYear as string,\n\t\tQuarterShortName as string,\n\t\tQuarterShortNameWithYear as string,\n\t\tQuarterNumber as integer,\n\t\tFirstDateOfQuarter as date,\n\t\tLastDateOfQuarter as date,\n\t\tDayOfQuarter as integer,\n\t\tDayOfQuarterName as string,\n\t\tHalfName as string,\n\t\tHalfNameWithYear as string,\n\t\tHalfShortName as string,\n\t\tHalfShortNameWithYear as string,\n\t\tHalfNumber as integer,\n\t\tYearHalfNumber as integer,\n\t\tFirstDateOfHalf as date,\n\t\tLastDateOfHalf as date,\n\t\tDayOfHalf as integer,\n\t\tDayOfHalfName as string,\n\t\tYearName as string,\n\t\tYearShortName as string,\n\t\tFirstDateOfYear as date,\n\t\tLastDateOfYear as date,\n\t\tDayOfYear as integer,\n\t\tDayOfYearName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarYear as integer,\n\t\tCalendarYearMonth as string,\n\t\tCalendarYearQtr as string,\n\t\tFiscalYear as integer,\n\t\tFiscalWeek as integer,\n\t\tFiscalPeriod as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalQuarter as integer,\n\t\tFiscalYearFiscalWeek as integer,\n\t\tFiscalYearFiscalPeriod as integer,\n\t\tFiscalYearFiscalMonth as integer,\n\t\tFiscalYearFiscalQuarter as integer,\n\t\tFiscalYearFiscalQuarterFiscalMonth as integer,\n\t\tFiscalYearName as string,\n\t\tFiscalYearLongName as string,\n\t\tFiscalYearShortName as string,\n\t\tFiscalQuarterName as string,\n\t\tFiscalQuarterLongName as string,\n\t\tFiscalQuarterNameWithYear as string,\n\t\tFiscalQuarterLongNameWithYear as string,\n\t\tFiscalQuarterShortName as string,\n\t\tFiscalQuarterShortNameWithYear as string,\n\t\tFiscalMonthName as string,\n\t\tFiscalMonthNameWithYear as string,\n\t\tFiscalMonthShortName as string,\n\t\tFiscalMonthShortNameWithYear as string,\n\t\tFiscalMonthCalendarShortName as string,\n\t\tFiscalMonthCalendarShortNameWithYear as string,\n\t\tFiscalWeekName as string,\n\t\tFiscalWeekLongName as string,\n\t\tFiscalWeekNameWithYear as string,\n\t\tFiscalWeekLongNameWithYear as string,\n\t\tFiscalWeekShortName as string,\n\t\tFiscalWeekShortNameWithYear as string,\n\t\tFiscalPeriodName as string,\n\t\tFiscalPeriodLongName as string,\n\t\tFiscalPeriodNameWithYear as string,\n\t\tFiscalPeriodLongNameWithYear as string,\n\t\tFiscalPeriodShortName as string,\n\t\tFiscalPeriodShortNameWithYear as string,\n\t\tCummWorkdays as integer,\n\t\tMonthWorkdays as integer,\n\t\tMonthWorkdaysTotal as integer,\n\t\tIsHoliday as boolean,\n\t\tMonthOfQuarter as integer,\n\t\tBroadcastYearBroadcastQuarter as integer,\n\t\tBroadcastYearBroadcastMonth as integer,\n\t\tBroadcastYearBroadcastWeek as integer,\n\t\tBroadcastYearQtrMonthWeekDay as integer,\n\t\tBroadcastYearQtrMonth as integer,\n\t\tBroadcastYearShortName as string,\n\t\tBroadcastYearLongName as string,\n\t\tBroadcastYeartName as string,\n\t\tBroadcastQuarterName as string,\n\t\tBroadcastWeekName as string,\n\t\tBroadcastDayName as string,\n\t\tmsrepl_tran_version as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimDate\nsource(output(\n\t\tTimeOfDayKey as integer,\n\t\tTime as string,\n\t\tTime24 as string,\n\t\tTime24HM as string,\n\t\tHour as integer,\n\t\tHourC as integer,\n\t\tHourName as string,\n\t\tMinute as integer,\n\t\tMinuteC as integer,\n\t\tMinuteKey as integer,\n\t\tMinuteName as string,\n\t\tSecond as integer,\n\t\tHour24 as integer,\n\t\tAM as string,\n\t\t{30MinuteInterval} as integer,\n\t\tDayPart as string,\n\t\tTimeNumber as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimTimeOfDay\nsource(output(\n\t\tAppointmentGUID as string,\n\t\tAppointmentID_Temp as integer,\n\t\tClientGUID as string,\n\t\tClientMembershipGUID as string,\n\t\tParentAppointmentGUID as string,\n\t\tCenterID as integer,\n\t\tClientHomeCenterID as integer,\n\t\tResourceID as integer,\n\t\tConfirmationTypeID as integer,\n\t\tAppointmentTypeID as integer,\n\t\tAppointmentDate as date,\n\t\tStartTime as timestamp,\n\t\tEndTime as timestamp,\n\t\tCheckinTime as timestamp,\n\t\tCheckoutTime as timestamp,\n\t\tAppointmentSubject as string,\n\t\tCanPrintCommentFlag as boolean,\n\t\tIsNonAppointmentFlag as boolean,\n\t\tRecurrenceRule as string,\n\t\tStartDateTimeCalc as timestamp,\n\t\tEndDateTimeCalc as timestamp,\n\t\tAppointmentDurationCalc as timestamp,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as string,\n\t\tAppointmentStatusID as integer,\n\t\tIsDeletedFlag as boolean,\n\t\tOnContactActivityID as string,\n\t\tOnContactContactID as string,\n\t\tCheckedInFlag as boolean,\n\t\tIsAuthorizedFlag as boolean,\n\t\tLastChangeUser as string,\n\t\tLastChangeDate as timestamp,\n\t\tScalpHealthID as integer,\n\t\tAppointmentPriorityColorID as integer,\n\t\tCompletedVisitTypeID as integer,\n\t\tIsFullTrichoView as boolean,\n\t\tSalesforceContactID as string,\n\t\tSalesforceTaskID as string,\n\t\tKorvueID as integer,\n\t\tServiceStartTime as timestamp,\n\t\tServiceEndTime as timestamp,\n\t\tIsClientContactInformationConfirmed as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSdatAppointment\nsource(output(\n\t\tAppointmentEmployeeGUID as string,\n\t\tAppointmentGUID as string,\n\t\tEmployeeGUID as string,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> ODSdatAppointmentEmployee\nsource(output(\n\t\tUserKey as integer,\n\t\tUserId as string,\n\t\tUserLogin as string,\n\t\tUserName as string,\n\t\tCompanyName as string,\n\t\tStreet as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tTeamName as string,\n\t\tcONEctUserLogin as string,\n\t\tcONEctGUID as string,\n\t\tCenterId as string,\n\t\tHash as string,\n\t\tDWH_LoadDate as timestamp,\n\t\tDWH_LastUpdateDate as timestamp,\n\t\tIsActive as boolean,\n\t\tSourceSystem as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimSysUser\nODSdatSalesOrderDetail filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1)) ~> FilterByLastUpdateSOD\nFilterByLastUpdateSOD select(mapColumn(\n\t\tOrderDetailId = SalesOrderDetailGUID,\n\t\tOrderId = SalesOrderGUID,\n\t\tSalesCodeId = SalesCodeID,\n\t\tOrderQuantity = Quantity,\n\t\tOrderExtendedPriceCalc = ExtendedPriceCalc,\n\t\tOrderPrice = Price,\n\t\tOrderDiscount = Discount,\n\t\tOrderTax1 = Tax1,\n\t\tOrderTax2 = Tax2,\n\t\tOrderTaxRate1 = TaxRate1,\n\t\tOrderTaxRate2 = TaxRate2,\n\t\tPreviousCustomerMembershipId = PreviousClientMembershipGUID,\n\t\tIsRefundedFlag,\n\t\tSODEmployee1GUID = Employee1GUID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSOD\nFilterByLastUpdateSO select(mapColumn(\n\t\tOrderId = SalesOrderGUID,\n\t\tCenterId = CenterID,\n\t\tOrderTypeId = SalesOrderTypeID,\n\t\tCustomerId = ClientGUID,\n\t\tCustomerMembershipId = ClientMembershipGUID,\n\t\tOrderDate,\n\t\tIsVoided = IsVoidedFlag,\n\t\tIsClosed = IsClosedFlag,\n\t\tOrderUserId = EmployeeGUID,\n\t\tIsGuarantee = IsGuaranteeFlag,\n\t\tAppointmentId = AppointmentGUID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSO\nODSdatSalesOrder filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1)) ~> FilterByLastUpdateSO\nDimSalesCode select(mapColumn(\n\t\tSalesCodeKey,\n\t\tSalesCodeID,\n\t\tSalesCodeDepartmentId = SalesCodeDepartmentID,\n\t\tSalesCodeDepartmentKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesCodeKey\nDimCustomerMembershipPrev select(mapColumn(\n\t\tPreviousCustomerMembershipKey = CustomerMembershipKey,\n\t\tPreviousCustomerMembershipID = CustomerMembershipID,\n\t\tPreviousMembershipKey = MembershipKey,\n\t\tPreviousMembershipId = MembershipID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerMembershipKeyPrev\nSelectSOD, SelectSalesCodeKey join(SelectSOD@SalesCodeId == SelectSalesCodeKey@SalesCodeID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSalesCode\nJoinSalesCode, SelectCustomerMembershipKeyPrev join(SelectSOD@PreviousCustomerMembershipId == SelectCustomerMembershipKeyPrev@PreviousCustomerMembershipID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPrevCustomerMembership\nDimCustomerMembership select(mapColumn(\n\t\tCustomerMembershipKey,\n\t\tCustomerMembershipID,\n\t\tMembershipKey,\n\t\tMembershipId = MembershipID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerMemberhipKey\nSelectSO, SelectCustomerMemberhipKey join(SelectSO@CustomerMembershipId == SelectCustomerMemberhipKey@CustomerMembershipID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCustomerMembership\nDimCenter select(mapColumn(\n\t\tCenterKey,\n\t\tCenterID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimCenterKey\nJoinCustomerMembership, SelectDimCenterKey join(SelectSO@CenterId == SelectDimCenterKey@CenterID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimCenter\nDimSalesOrderType select(mapColumn(\n\t\tOrderTypeKey = SalesOrderTypeKey,\n\t\tOrderTypeID = SalesOrderTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimSalesOrderTypeKey\nJoinDimCenter, SelectDimSalesOrderTypeKey join(SelectSO@OrderTypeId == SelectDimSalesOrderTypeKey@OrderTypeID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimSalesOrderType\nDimCustomer select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerGUID,\n\t\tGeographyKey,\n\t\tGenderkey,\n\t\tGenderId,\n\t\tLanguageKey,\n\t\tLanguageId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimCustomerKey\nJoinDimSalesOrderType, CustomColumnDimCustomer join(CustomerId == CustomerGUID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimCustomer\nFilterSourceSystem select(mapColumn(\n\t\tOrderUserKey = UserKey,\n\t\tUserID = UserId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimSystemUserKwy\nDimSystemUser filter(lower(trim(SourceSystem)) == 'conect') ~> FilterSourceSystem\nJoinDimCustomer, SelectDimSystemUserKwy join(OrderUserId == UserID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimSystemUser\nSelectFinalColumnsSOD, SelectFinalColumnsSO join(SelectFinalColumnsSOD@OrderId == SelectFinalColumnsSO@OrderId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinSalesOrder\nJoinDimSystemUser select(mapColumn(\n\t\tOrderId,\n\t\tCenterId = SelectSO@CenterId,\n\t\tOrderTypeId = SelectSO@OrderTypeId,\n\t\tCustomerId,\n\t\tCustomerMembershipId = SelectSO@CustomerMembershipId,\n\t\tOrderDate,\n\t\tIsVoided,\n\t\tIsClosed,\n\t\tOrderUserId,\n\t\tIsGuarantee,\n\t\tCustomerMembershipKey,\n\t\tMembershipKey,\n\t\tMembershipId,\n\t\tCenterKey,\n\t\tOrderTypeKey,\n\t\tCustomerKey,\n\t\tGeographyKey,\n\t\tGenderkey,\n\t\tGenderId,\n\t\tLanguageKey,\n\t\tLanguageId,\n\t\tOrderUserKey,\n\t\tAppointmentId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalColumnsSO\nJoinPrevCustomerMembership select(mapColumn(\n\t\tOrderDetailId,\n\t\tOrderId,\n\t\tSalesCodeId = SelectSOD@SalesCodeId,\n\t\tOrderQuantity,\n\t\tOrderExtendedPriceCalc,\n\t\tOrderPrice,\n\t\tOrderDiscount,\n\t\tOrderTax1,\n\t\tOrderTax2,\n\t\tOrderTaxRate1,\n\t\tOrderTaxRate2,\n\t\tPreviousCustomerMembershipId = SelectSOD@PreviousCustomerMembershipId,\n\t\tSalesCodeKey,\n\t\tSalesCodeDepartmentId,\n\t\tSalesCodeDepartmentKey,\n\t\tPreviousCustomerMembershipKey,\n\t\tPreviousMembershipKey,\n\t\tPreviousMembershipId,\n\t\tIsRefundedFlag,\n\t\tSODEmployee1GUID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalColumnsSOD\nODScfgAccumulator select(mapColumn(\n\t\tAccumulatorID,\n\t\tAccumulatorNameShort = AccumulatorDescriptionShort\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectcfgAccumulatorId\nODSdatAccumulatorAdjustment filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1) &&  in([1,12,30], AccumulatorID) && !isNull(SalesOrderDetailGUID)) ~> FilterAccumulator\nSortAccAdj select(mapColumn(\n\t\tAccumulatorAdjustmentID = AccumulatorAdjustmentGUID,\n\t\tSalesOrderDetailID = SalesOrderDetailGUID,\n\t\tAccumulatorID,\n\t\tMoneyAdjustment,\n\t\tQuantityTotalChangeCalc,\n\t\tMoneyChangeCalc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAccumulator\nSelectAccumulator, SelectcfgAccumulatorId join(SelectAccumulator@AccumulatorID == SelectcfgAccumulatorId@AccumulatorID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoincfgAccumulator\nCustomColumnsAccAdj select(mapColumn(\n\t\tAccumulatorAdjustmentID,\n\t\tSalesOrderDetailID,\n\t\tMoneyAdjustment,\n\t\tAccumulatorName = AccumulatorNameShort,\n\t\tQuantityTotalChange,\n\t\tMoneyChange\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsAccumulatorAdj\nJoincfgAccumulator derive(MoneyAdjustment = iifNull(toDecimal(MoneyAdjustment,18,6), toDecimal(0,18,4)),\n\t\tQuantityTotalChange = iifNull(QuantityTotalChangeCalc, 0),\n\t\tMoneyChange = iifNull(toDecimal(MoneyChangeCalc,18,6), toDecimal(0,18,4))) ~> CustomColumnsAccAdj\nFilterAccumulator sort(asc(SalesOrderDetailGUID, false)) ~> SortAccAdj\nSelectColumnsAccumulatorAdj pivot(groupBy(SalesOrderDetailID),\n\tpivotBy(AccumulatorName),\n\tMoneyAdjustment = sum(MoneyAdjustment),\n\t\tQuantityTotalChange = sum(QuantityTotalChange),\n\t\tMoneyChange = sum(MoneyChange),\n\tcolumnNaming: '$V$N',\n\tlateral: false) ~> PivotAccumulator\nJoinSalesOrder, MapDrifted join(OrderDetailId == SalesOrderDetailID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPivotAccumulator\nDimDate select(mapColumn(\n\t\tOrderDateKey = DateKey,\n\t\tFullDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDateKey\nJoinPivotAccumulator, SelectDimDateKey join(toDate(OrderDate) == FullDate,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimDateKey\nDimTimeOfDay select(mapColumn(\n\t\tOrderTimeOfDayKey = TimeOfDayKey,\n\t\tHour = Hour24,\n\t\tMinute,\n\t\tSecond\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimTimeOfDayKey\nJoinDimDateKey, SelectDimTimeOfDayKey join(hour(OrderDate) == Hour\n\t&& minute(OrderDate) == Minute\n\t&& second(OrderDate) == Second,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimTimeOfDayKey\nJoinAppointmentEmployee select(mapColumn(\n\t\tOrderDetailId,\n\t\tOrderId = SelectFinalColumnsSOD@OrderId,\n\t\tSalesCodeId,\n\t\tOrderQuantity,\n\t\tOrderExtendedPriceCalc,\n\t\tOrderPrice,\n\t\tOrderDiscount,\n\t\tOrderTax1,\n\t\tOrderTax2,\n\t\tOrderTaxRate1,\n\t\tOrderTaxRate2,\n\t\tPreviousCustomerMembershipId,\n\t\tSalesCodeKey,\n\t\tSalesCodeDepartmentId,\n\t\tSalesCodeDepartmentKey,\n\t\tPreviousCustomerMembershipKey,\n\t\tPreviousMembershipKey,\n\t\tPreviousMembershipId,\n\t\tOrderId = SelectFinalColumnsSO@OrderId,\n\t\tCenterId,\n\t\tOrderTypeId,\n\t\tCustomerId,\n\t\tCustomerMembershipId,\n\t\tOrderDate,\n\t\tIsVoided,\n\t\tIsClosed,\n\t\tOrderUserId,\n\t\tIsGuarantee,\n\t\tCustomerMembershipKey,\n\t\tMembershipKey,\n\t\tMembershipId,\n\t\tCenterKey,\n\t\tOrderTypeKey,\n\t\tCustomerKey,\n\t\tGeographyKey,\n\t\tGenderkey,\n\t\tGenderId,\n\t\tLanguageKey,\n\t\tLanguageId,\n\t\tOrderUserKey,\n\t\tOrderDateKey,\n\t\tOrderTimeOfDayKey,\n\t\tContBalMoneyAdjustment,\n\t\tContBalQuantityTotalChange,\n\t\tContBalMoneyChange,\n\t\tPPSGMoneyAdjustment,\n\t\tPPSGQuantityTotalChange,\n\t\tPPSGMoneyChange,\n\t\tGraftsMoneyAdjustment,\n\t\tGraftsQuantityTotalChange,\n\t\tGraftsMoneyChange,\n\t\tAppointmentId,\n\t\tIsRefunded = IsRefundedFlag,\n\t\tSODEmployee1GUID,\n\t\tAppointmentEmployeeGUID,\n\t\tServiceAppointmentId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinal\nJoinPerformerName alterRow(upsertIf(true())) ~> AlterRow\nSelectDimCustomerKey derive(LanguageId = toInteger(LanguageId)) ~> CustomColumnDimCustomer\nPivotAccumulator derive(ContBalMoneyAdjustment = toDecimal(byName('ContBalMoneyAdjustment')),\n\t\tContBalQuantityTotalChange = toInteger(byName('ContBalQuantityTotalChange')),\n\t\tContBalMoneyChange = toDecimal(byName('ContBalMoneyChange')),\n\t\tGraftsMoneyAdjustment = toDecimal(byName('GraftsMoneyAdjustment')),\n\t\tGraftsQuantityTotalChange = toInteger(byName('GraftsQuantityTotalChange')),\n\t\tGraftsMoneyChange = toDecimal(byName('GraftsMoneyChange')),\n\t\tPPSGMoneyAdjustment = toDecimal(byName('PPSGMoneyAdjustment')),\n\t\tPPSGQuantityTotalChange = toInteger(byName('PPSGQuantityTotalChange')),\n\t\tPPSGMoneyChange = toDecimal(byName('PPSGMoneyChange'))) ~> MapDrifted\nSelectFinal derive(ContBalMoneyAdjustment = iifNull(ContBalMoneyAdjustment, toDecimal(0)),\n\t\tContBalQuantityTotalChange = iifNull(ContBalQuantityTotalChange, 0),\n\t\tContBalMoneyChange = iifNull(ContBalMoneyChange, toDecimal(0)),\n\t\tPPSGMoneyAdjustment = iifNull(PPSGMoneyAdjustment, toDecimal(0)),\n\t\tPPSGQuantityTotalChange = iifNull(PPSGQuantityTotalChange, 0),\n\t\tPPSGMoneyChange = iifNull(PPSGMoneyChange, toDecimal(0)),\n\t\tGraftsMoneyAdjustment = iifNull(GraftsMoneyAdjustment, toDecimal(0)),\n\t\tGraftsQuantityTotalChange = iifNull(GraftsQuantityTotalChange, 0),\n\t\tGraftsMoneyChange = iifNull(GraftsMoneyChange, toDecimal(0)),\n\t\tCenterKey = iifNull(CenterKey, -1),\n\t\tOrderUserId = iifNull(OrderUserId, '00000000-0000-0000-0000-000000000002'),\n\t\tOrderUserKey = iifNull(OrderUserKey,-1),\n\t\tOrderQuantity = iifNull(OrderQuantity, 0),\n\t\tOrderExtendedPriceCalc = iifNull(OrderExtendedPriceCalc, toDecimal(0)),\n\t\tOrderPrice = iifNull(OrderPrice, toDecimal(0)),\n\t\tOrderDiscount = iifNull(OrderDiscount, toDecimal(0)),\n\t\tOrderTax1 = iifNull(OrderTax1, toDecimal(0)),\n\t\tOrderTax2 = iifNull(OrderTax2, toDecimal(0)),\n\t\tOrderTaxRate1 = iifNull(OrderTaxRate1, toDecimal(0)),\n\t\tOrderTaxRate2 = iifNull(OrderTaxRate2, toDecimal(0)),\n\t\tPreviousMembershipKey = iifNull(PreviousMembershipKey, -1),\n\t\tMembershipKey = iifNull(MembershipKey, -1),\n\t\tPreviousCustomerMembershipKey = iifNull(PreviousCustomerMembershipKey, -1),\n\t\tCustomerKey = iifNull(CustomerKey, -1),\n\t\tGeographyKey = iifNull(GeographyKey, -1),\n\t\tLanguageKey = iifNull(LanguageKey, -1),\n\t\tGenderkey = iifNull(Genderkey, -1),\n\t\tCustomerMembershipKey = iifNull(CustomerMembershipKey, -1),\n\t\tPerfomerId = iifNull(AppointmentEmployeeGUID, SODEmployee1GUID)) ~> DerivedColumn\nODSdatAppointment filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1)) ~> FilterLastUpdateApp\nFilterAppEmployee select(mapColumn(\n\t\tAppointmentGUID,\n\t\tEmployeeGUID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDatAppEmployee\nFilterLastUpdateApp select(mapColumn(\n\t\tAppointmentGUID,\n\t\tServiceAppointmentId = SalesforceTaskID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAppointment\nSelectAppointment, SelectDatAppEmployee join(SelectAppointment@AppointmentGUID == SelectDatAppEmployee@AppointmentGUID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAppEmployee\nJoinAppEmployee select(mapColumn(\n\t\tAppointmentGUID = SelectAppointment@AppointmentGUID,\n\t\tAppointmentEmployeeGUID = EmployeeGUID,\n\t\tServiceAppointmentId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalAppointmentEmployee\nODSdatAppointmentEmployee filter(toDate(LastUpdate) >= addDays(toDate(currentTimestamp()), ($DaysToLoad * -1)) && toDate(LastUpdate) <= addDays(toDate(currentTimestamp()), -1)) ~> FilterAppEmployee\nJoinDimTimeOfDayKey, SelectFinalAppointmentEmployee join(AppointmentId == AppointmentGUID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAppointmentEmployee\nDimSysUser filter(lower(trim(SourceSystem)) == 'conect') ~> FilterConectUser\nFilterConectUser select(mapColumn(\n\t\tUserPerformerId = UserId,\n\t\tPerformerName = UserName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUserPerformerName\nDerivedColumn, SelectUserPerformerName join(PerfomerId == UserPerformerId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinPerformerName\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOrderDate as timestamp,\n\t\tOrderDateKey as integer,\n\t\tOrderTimeOfDayKey as integer,\n\t\tOrderId as string,\n\t\tOrderDetailId as string,\n\t\tSalesCodeId as integer,\n\t\tSalesCodeKey as integer,\n\t\tSalesCodeDepartmentId as integer,\n\t\tSalesCodeDepartmentKey as integer,\n\t\tOrderTypeId as integer,\n\t\tOrderTypeKey as integer,\n\t\tCenterId as integer,\n\t\tCenterKey as integer,\n\t\tOrderUserId as string,\n\t\tOrderUserKey as integer,\n\t\tOrderQuantity as integer,\n\t\tOrderExtendedPriceCalc as decimal(21,6),\n\t\tOrderPrice as decimal(21,6),\n\t\tOrderDiscount as decimal(21,6),\n\t\tOrderTax1 as decimal(21,6),\n\t\tOrderTax2 as decimal(21,6),\n\t\tOrderTaxRate1 as decimal(21,6),\n\t\tOrderTaxRate2 as decimal(21,6),\n\t\tContBalMoneyAdjustment as decimal(23,6),\n\t\tContBalQuantityTotalChange as integer,\n\t\tContBalMoneyChange as decimal(23,6),\n\t\tGraftsMoneyAdjustment as decimal(23,6),\n\t\tGraftsQuantityTotalChange as integer,\n\t\tGraftsMoneyChange as decimal(23,6),\n\t\tPPSGMoneyAdjustment as decimal(23,6),\n\t\tPPSGQuantityTotalChange as integer,\n\t\tPPSGMoneyChange as decimal(23,6),\n\t\tIsVoided as boolean,\n\t\tIsClosed as boolean,\n\t\tIsGuarantee as boolean,\n\t\tPreviousCustomerMembershipId as string,\n\t\tPreviousCustomerMembershipKey as integer,\n\t\tPreviousMembershipKey as integer,\n\t\tPreviousMembershipId as integer,\n\t\tCustomerMembershipId as string,\n\t\tCustomerMembershipKey as integer,\n\t\tMembershipId as integer,\n\t\tMembershipKey as integer,\n\t\tCustomerId as string,\n\t\tCustomerKey as integer,\n\t\tGeographyKey as integer,\n\t\tGenderId as integer,\n\t\tGenderkey as integer,\n\t\tLanguageId as integer,\n\t\tLanguageKey as integer,\n\t\tLeadId as string,\n\t\tLeadKey as integer,\n\t\tAccountId as string,\n\t\tAccountKey as integer,\n\t\tAppointmentId as string,\n\t\tIsRefunded as boolean,\n\t\tPerformerId as string,\n\t\tPerformerName as string,\n\t\tServiceAppointmentId as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['OrderDetailId'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tOrderDate,\n\t\tOrderDateKey,\n\t\tOrderTimeOfDayKey,\n\t\tOrderId,\n\t\tOrderDetailId,\n\t\tSalesCodeId,\n\t\tSalesCodeKey,\n\t\tSalesCodeDepartmentId,\n\t\tSalesCodeDepartmentKey,\n\t\tOrderTypeId,\n\t\tOrderTypeKey,\n\t\tCenterId,\n\t\tCenterKey,\n\t\tOrderUserId,\n\t\tOrderUserKey,\n\t\tOrderQuantity,\n\t\tOrderExtendedPriceCalc,\n\t\tOrderPrice,\n\t\tOrderDiscount,\n\t\tOrderTax1,\n\t\tOrderTax2,\n\t\tOrderTaxRate1,\n\t\tOrderTaxRate2,\n\t\tContBalMoneyAdjustment,\n\t\tContBalQuantityTotalChange,\n\t\tContBalMoneyChange,\n\t\tGraftsMoneyAdjustment,\n\t\tGraftsQuantityTotalChange,\n\t\tGraftsMoneyChange,\n\t\tPPSGMoneyAdjustment,\n\t\tPPSGQuantityTotalChange,\n\t\tPPSGMoneyChange,\n\t\tIsVoided,\n\t\tIsClosed,\n\t\tIsGuarantee,\n\t\tPreviousCustomerMembershipId,\n\t\tPreviousCustomerMembershipKey,\n\t\tPreviousMembershipKey,\n\t\tPreviousMembershipId,\n\t\tCustomerMembershipId,\n\t\tCustomerMembershipKey,\n\t\tMembershipId,\n\t\tMembershipKey,\n\t\tCustomerId,\n\t\tCustomerKey,\n\t\tGeographyKey,\n\t\tGenderId,\n\t\tGenderkey,\n\t\tLanguageId,\n\t\tLanguageKey,\n\t\tAppointmentId,\n\t\tIsRefunded,\n\t\tPerformerId = PerfomerId,\n\t\tPerformerName,\n\t\tServiceAppointmentId\n\t)) ~> FactSalesTransaction"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/CNCT_lkpSalesCodeType')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "CONNECT"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DL_CNCT_lkpSalesCodeType",
                                "type": "DatasetReference"
                            },
                            "name": "CNTlkpSalesCodeType"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ODS_CNCT_lkpSalesCodeType",
                                "type": "DatasetReference"
                            },
                            "name": "ODSlkpSalesCodeType"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow"
                        }
                    ],
                    "script": "source(output(\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeTypeSortOrder as integer,\n\t\tSalesCodeTypeDescription as string,\n\t\tSalesCodeTypeDescriptionShort as string,\n\t\tIsInventory as boolean,\n\t\tIsSerialized as boolean,\n\t\tIsHairSystem as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string,\n\t\tUpdateStamp as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CNTlkpSalesCodeType\nCNTlkpSalesCodeType alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesCodeTypeID as integer,\n\t\tSalesCodeTypeSortOrder as integer,\n\t\tSalesCodeTypeDescription as string,\n\t\tSalesCodeTypeDescriptionShort as string,\n\t\tIsInventory as boolean,\n\t\tIsSerialized as boolean,\n\t\tIsHairSystem as boolean,\n\t\tIsActiveFlag as boolean,\n\t\tCreateDate as timestamp,\n\t\tCreateUser as string,\n\t\tLastUpdate as timestamp,\n\t\tLastUpdateUser as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['SalesCodeTypeID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSalesCodeTypeID,\n\t\tSalesCodeTypeSortOrder,\n\t\tSalesCodeTypeDescription,\n\t\tSalesCodeTypeDescriptionShort,\n\t\tIsInventory,\n\t\tIsSerialized,\n\t\tIsHairSystem,\n\t\tIsActiveFlag,\n\t\tCreateDate,\n\t\tCreateUser,\n\t\tLastUpdate,\n\t\tLastUpdateUser\n\t)) ~> ODSlkpSalesCodeType"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SQL01_DL_lkpSalesCodeDepartment')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HC_cONEct",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Connect"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [
                    {
                        "name": "SalesCodeDepartmentID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "SalesCodeDepartmentSortOrder",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "SalesCodeDepartmentDescription",
                        "type": "nvarchar"
                    },
                    {
                        "name": "SalesCodeDepartmentDescriptionShort",
                        "type": "nvarchar"
                    },
                    {
                        "name": "SalesCodeDivisionID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "IsActiveFlag",
                        "type": "bit"
                    },
                    {
                        "name": "CreateDate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "CreateUser",
                        "type": "nvarchar"
                    },
                    {
                        "name": "LastUpdate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "LastUpdateUser",
                        "type": "nvarchar"
                    },
                    {
                        "name": "UpdateStamp",
                        "type": "timestamp"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "lkpSalesCodeDepartment"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SQL01_DL_RevenueGroup')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HC_cONEct",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Connect"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [
                    {
                        "name": "RevenueGroupID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "RevenueGroupSortOrder",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "RevenueGroupDescription",
                        "type": "nvarchar"
                    },
                    {
                        "name": "RevenueGroupDescriptionShort",
                        "type": "nvarchar"
                    },
                    {
                        "name": "IsActiveFlag",
                        "type": "bit"
                    },
                    {
                        "name": "CreateDate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "CreateUser",
                        "type": "nvarchar"
                    },
                    {
                        "name": "LastUpdate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "LastUpdateUser",
                        "type": "nvarchar"
                    },
                    {
                        "name": "UpdateStamp",
                        "type": "timestamp"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "lkpRevenueGroup"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SQL01_DL_Gender')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HC_cONEct",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Connect"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [
                    {
                        "name": "GenderID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "GenderSortOrder",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "GenderDescription",
                        "type": "nvarchar"
                    },
                    {
                        "name": "GenderDescriptionShort",
                        "type": "nvarchar"
                    },
                    {
                        "name": "IsActiveFlag",
                        "type": "bit"
                    },
                    {
                        "name": "CreateDate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "CreateUser",
                        "type": "nvarchar"
                    },
                    {
                        "name": "LastUpdate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "LastUpdateUser",
                        "type": "nvarchar"
                    },
                    {
                        "name": "UpdateStamp",
                        "type": "timestamp"
                    },
                    {
                        "name": "DescriptionResourceKey",
                        "type": "nvarchar"
                    },
                    {
                        "name": "DescriptionShortResourceKey",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "lkpGender"
                }
            },
            "dependsOn": []
        }
    ]
}